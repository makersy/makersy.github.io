<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[爬虫笔记]]></title>
    <url>%2Fpython%2F%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[python爬虫笔记 判断请求是否成功1assert response.status_code==200 字符串格式化的一种方式1"你&#123;&#125;好".format(1) 使用代理ip 准备一堆ip地址，组成ip池，随机选择一个ip来使用 如何随机选择代理ip {“ip”:ip,”times”:0} [{},{},{},{},{}],对这个ip的列表进行排序，按照使用次数进行排序 选择使用次数较少的10个ip，从中随机选择一个 检查ip的可用性 可以使用requests添加超时参数，判断ip地址的质量 在线代理ip质量检测网站 携带cookie请求 尽量不使用cookie 携带一堆cookie进行请求，把cookie组成cookie池 请求登陆之后的网站的思路 实例化session 先使用session发送请求，登陆对网站，把cookie保存在session中 再使用session请求登录之后才能访问的网站，sesssion能够自动携带登陆成功时保存在其中的cookie，进行请求 不发送post请求，使用cookie获取登陆后的页面 cookie过期时间很长的网站 在cookie过期之前能够拿到所有的数据，比较麻烦 配合其他程序一起使用，其他程序专门其获取cookie，当前程序专门请求页面 字典推导式，列表推导式12cookies = "uuid_tt_dd=10_18697420810-1541514998525-406120; dc_session_id=10_1541514998525.130001; c_adb=1; smidV2=2018110622540004c9a404e4b4418224a1bc1f0afbaf24004db7a451c1dc9c0; UN=makersy; TY_SESSION_ID=bcb2fab5-1594-432f-b08b-77ff1c25478c; SESSION=04780891-f506-4bae-9eb9-7bee9b0f01b6; UserName=makersy; UserInfo=TY72nyXcSQ4kxcpYdP3noqwQsV904wqUfUrjssi1EYiqf77of1nXIX31igaPjkMfWt%2FBg37Ty5yCAFxluyxuwvK%2BjTb8WKRG2o8PpCGW7eCE5ImRX5bUUNkAvcYMhTjY; UserNick=makersy; AU=7FA; BT=1541516799322; UserToken=TY72nyXcSQ4kxcpYdP3noqwQsV904wqUfUrjssi1EYiqf77of1nXIX31igaPjkMfWt%2FBg37Ty5yCAFxluyxuwvK%2BjTb8WKRG2o8PpCGW7eAvjKefqLie1zAAltRYdzP1Sk%2Bfm7yuJ%2FP%2Fbsd6wSQVGMnSmTWc8bbv2HgJOkqFDhc%3D; ARK_ID=JSc5d36a4d0c44c361b2667ed6147b5607c5d3; dc_tos=phs2bi"cookies = &#123;i.split("=")[0]:i.split("=")[1] for i in cookies.split("; ")&#125; 获取登陆后的页面的三种方式 实例化session，使用session发送post请求，在使用他获取登陆后的页面 headers中添加cookie键，值为cookie字符串 在请求方法中添加cookie参数，接受字典形式的cookie，字典形式的cookie中的键是cookie的name对应的值，值是cookie的value对应的值]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java连接高版本mysql数据库(8.0)的坑]]></title>
    <url>%2F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%2FJava%2Fjava%E8%BF%9E%E6%8E%A5%E9%AB%98%E7%89%88%E6%9C%ACmysql%E6%95%B0%E6%8D%AE%E5%BA%93-8-0-%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[今天在写java连接mysql数据库时，遇到了无法连接的问题。报错信息如下: Loading class ‘com.mysql.jdbc.Driver’. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver’. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary. Sat Sep 22 16:28:36 GMT+08:00 2018 WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification. java.sql.SQLException: The server time zone value ‘???ú±ê×??±??’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support. 这三段意思是说： 驱动不再是之前的com.mysql.jdbc.Driver而是’com.mysql.cj.jdbc.Driver’； mysql8.0不需要使用ssl连接，因此需要设置手动设置useSSL=false； mysql返回的时间与实际不一样，需要设置在jdbc连接的url后面加上serverTimezone=GMT(即时区)。 因此应该这么写：1234 Class.forName("com.mysql.cj.jdbc.Driver");// Class.forName("com.mysql.jdbc.Driver"); conn = DriverManager.getConnection("jdbc:mysql://localhost/EXAMPLE?useSSL=false&amp;serverTimezone=GMT","root","password");// conn = DriverManager.getConnection("jdbc:mysql://localhost/EXAMPLE","root","password"); 注释里是之前的写法。]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[String&StringBuffer]]></title>
    <url>%2F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%2FJava%2FString-StringBuffer%2F</url>
    <content type="text"><![CDATA[String介绍 String是Java中很常见的类，是一个final修饰的不可变的数组，用来存放字符的容器。不可变是什么意思呢，意思是被赋值后就不能被改变了，如果再进行修改的话实质上是创建一个新对象，并将引用指向新对象，原来的对象被当做垃圾回收掉了。这是效率很低的。 用法1.求字符串某一位置字符 1char charAt(int index)//返回字符串中指定位置的字符；注意字符串中第一个字符索引是0，最后一个是length()-1。 1String str = new String("asdfzxc"); 2获取角标 1Int indexOf(char c) 例如： 1String s=”Java”; Int a=s.indexOf(a); 3判断 字符串是否包含某个字符串 1boolean contains(str)//判断源字符串是否包含str字符串并返回boolean值 例如：String str=”My love Java”; Boolean b=str.contains(love); 结果：true 字符串是否有内容 1boolean isEmpty() 例如：booleanb=str.isEmpty(); 字符串是否以指定内容开始 1boolean startsWith(str) 例如：booleanb=str.startsWith(“My”); 字符串是否以指定内容结束 1boolean endsWith(str); 用法如上 判断内容是否相同 1boolean equals(str) //String类重写了Object类中的equals方法，该方法用于判断字符串内容是否相同而非判断地址 例如: 12345String str1=”Java”;String str2=”love”;boolean s=str1.equals(str2); 判断内容是否相同，并忽略大小写 1Boolean equalsIngoreCase(str) 用法同上 4提取子串用String类的substring方法可以提取字符串中的子串，该方法有两种常用参数: public String substring(int beginIndex) //该方法从beginIndex位置起，从当前字符串中取出剩余的字符作为一个新的字符串返回。 public String substring(int beginIndex, int endIndex) //该方法从beginIndex位置起，从当前字符串中取出到endIndex-1位置的字符作为一个新的字符串返回 1231 String str1 = new String("asdfzxc");2 String str2 = str1.substring(2);//str2 = "dfzxc"3 String str3 = str1.substring(2,5);//str3 = "dfz" 5字符串比较 public int compareTo(StringanotherString) //该方法是对字符串内容按字典顺序进行大小比较，通过返回的整数值指明当前字符串与参数字符串的大小关系。若当前对象比参数大则返回正整数，反之返回负整数，相等返回0。 public int compareToIgnore(StringanotherString) //与compareTo方法相似，但忽略大小写。 public boolean equals(ObjectanotherObject) //比较当前字符串和参数字符串，在两个字符串相等的时候返回true，否则返回false。 6字符串中字符的大小写转换 public String toLowerCase() //返回将当前字符串中所有字符转换成小写后的新串 public String toUpperCase() //返回将当前字符串中所有字符转换成大写后的新串 1231 String str = new String("asDF");2 String str1 = str.toLowerCase();//str1 = "asdf"3 String str2 = str.toUpperCase();//str2 = "ASDF" 7字符串中字符的替换 public String replace(char oldChar, charnewChar) //用字符newChar替换当前字符串中所有的oldChar字符，并返回一个新的字符串。 public String replaceFirst(String regex,String replacement) //该方法用字符replacement的内容替换当前字符串中遇到的第一个和字符串regex相匹配的子串，应将新的字符串返回。 public String replaceAll(String regex,String replacement) //该方法用字符replacement的内容替换当前字符串中遇到的所有和字符串regex相匹配的子串，应将新的字符串返回。 1234567891 String str = "asdzxcasd";2 String str1 = str.replace('a','g');//str1 = "gsdzxcgsd"3 String str2 = str.replace("asd","fgh");//str2 = "fghzxcfgh"4 String str3 = str.replaceFirst("asd","fgh");//str3 = "fghzxcasd"5 String str4 = str.replaceAll("asd","fgh");//str4 = "fghzxcfgh"字符串分隔String[] split(String str)//将str作为分隔符进行字符串分解，分解后的字字符串在字符串数组中返回。1 String str = "asd!qwe|zxc#";2 String[] str1 = str.split("!|#");//str1[0] = "asd";str1[1] = "qwe";str1[2] = "zxc"; 8字符串与基本类型的转换 字符串转换为基本类型java.lang包中有Byte、Short、Integer、Float、Double类的调用方法: public static byte parseByte(String s) public static short parseShort(String s) public static short parseInt(String s) public static long parseLong(String s) public static float parseFloat(String s) public static double parseDouble(String s) 字符串基本类型时，如int short dobule字符串中的数据一定要是数字，否则会出现异常。 例如： 1231 int n = Integer.parseInt("12");2 float f = Float.parseFloat("12.34");3 double d = Double.parseDouble("1.124"); 9基本类型转换为字符串类型 String类中提供了String valueOf()放法，用作基本类型转换为字符串类型。 static String valueOf(char data[]) static String valueOf(char data[], intoffset, int count) static String valueOf(boolean b) static String valueOf(char c) static String valueOf(int i) static String valueOf(long l) static String valueOf(float f) static String valueOf(double d) 例如： 121 String s1 = String.valueOf(12);2 String s1 = String.valueOf(12.34); 10和数组有关的方法 返回类型 方法名 作用 byte[] getBytes() 将一个字符串转换成字节数组 String[] split(String) 将一个字符串按照指定内容劈开 char[] toCharArray() 将一个字符串转换成字符数组 11判断是否为空 public boolean isEmpty() 当且仅当 length()为 0 时返回 true。 String Buffer常用方法 public StringBuffer append(boolean b) 该方法的作用是追加内容到当前StringBuffer对象的末尾，类似于字符串的连接。调用该方法以后，StringBuffer对象的内容也发生改变， public StringBuffer deleteCharAt(int index) 该方法的作用是删除指定位置的字符，然后将剩余的内容形成新的字符串。 public StringBuffer deleteCharAt(int index) 该方法的作用是删除指定位置的字符，然后将剩余的内容形成新的字符串。 public StringBuffer insert(int offset, boolean b) 该方法的作用是在StringBuffer对象中插入内容，然后形成新的字符串。 public StringBuffer reverse() 该方法的作用是将StringBuffer对象中的内容反转，然后形成新的字符串。 public void setCharAt(int index, char ch) 该方法的作用是修改对象中索引值为index位置的字符为新的字符ch。]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java大数基本用法]]></title>
    <url>%2F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%2FJava%2FJava%E5%A4%A7%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[最近学Java有接触到大数运算，感觉比用c++自己写个算法方便太多，在此记录下代码。java中用于操作大数的类主要有两个，一个是BigInteger，代表大整数类，用于对大整数进行操作；另一个是BigDecimal，代表高精度类，用于对比较大或精度比较高的浮点型数据进行操作。两个比较像。 基本用法1、新建一个值为123的大整数对象12BigInteger a=new BigInteger(“123”); //第一种，参数是字符串 BigInteger a=BigInteger.valueOf(123); //第二种，参数可以是int、long 2、大整数的四则运算1234a. add(b); //a,b均为BigInteger类型，加法 a.subtract(b); //减 法 a.divide(b); //除法 a.multiply(b); //乘法 3、大整数比较大小12a.equals(b); //如果a、b相等返回true否则返回false a.compareTo(b); //a小于b返回-1，等于返回0，大于返回1 4、常用方法1234a.mod(b); //求余 a.gcd(b); //求最大公约数 a.max(b); //求最大值 a.min(b); //求最小值 例子HDU1002 a+b 12345678910111213141516171819import java.util.*;import java.math.*;public class Main &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int t = sc.nextInt(); BigInteger a, b, c; for( int i=1; i&lt;=t; i++ ) &#123; System.out.println("Case " + i + ":"); a = sc.nextBigInteger(); b = sc.nextBigInteger(); System.out.println(a + " + " + b + " = " + a.add(b)); if( i!=t ) &#123; System.out.println(); &#125; &#125; &#125; &#125;]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018CCPC-网络赛 1001 Buy and Resell]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%2F%E8%B4%AA%E5%BF%83%2F(HDU)2018CCPC-%E7%BD%91%E7%BB%9C%E8%B5%9B%201001%20Buy%20and%20Resell%2F</url>
    <content type="text"><![CDATA[Buy and Resell Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others)Total Submission(s): 2282 Accepted Submission(s): 359 Problem Description The Power Cube is used as a stash of Exotic Power. There are n cities numbered 1,2,…,n where allowed to trade it. The trading price of the Power Cube in the i-th city is ai dollars per cube. Noswal is a foxy businessman and wants to quietly make a fortune by buying and reselling Power Cubes. To avoid being discovered by the police, Noswal will go to the i-th city and choose exactly one of the following three options on the i-th day: spend ai dollars to buy a Power Cube resell a Power Cube and get ai dollars if he has at least one Power Cube do nothing Obviously, Noswal can own more than one Power Cubes at the same time. After going to the n cities, he will go back home and stay away from the cops. He wants to know the maximum profit he can earn. In the meanwhile, to lower the risks, he wants to minimize the times of trading (include buy and sell) to get the maximum profit. Noswal is a foxy and successful businessman so you can assume that he has infinity money at the beginning. Input There are multiple test cases. The first line of input contains a positive integer T (T≤250), indicating the number of test cases. For each test case:The first line has an integer n. (1≤n≤105)The second line has n integers a1,a2,…,an where ai means the trading price (buy or sell) of the Power Cube in the i-th city. (1≤ai≤109)It is guaranteed that the sum of all n is no more than 5×105. Output For each case, print one line with two integers —— the maximum profit and the minimum times of trading to get the maximum profit. Sample Input 341 2 10 959 5 9 10 522 1 Sample Output 16 45 20 0 题意有n个位置，每个位置有一个价格a[i]，按从1-n顺序经过每个位置，每个位置都可以进行三种操作之一且只能进行一次：1) 花a[i]元购买一个物品；2）卖掉一个手上的物品得到a[i]元； 3）什么也不做。假设金钱无限，初始没物品，身上可以装无限个物品，求走完所有城市后所能得到的最大利润和得到该最大利润所需的最少操作数。 题解低买高卖，此题可应用贪心的思想，每次遇到一个价格时，总是与前面的最低价进行“抵消”，这样利润最大。但是也许后面还有比这个价格更高的，所以需要“反悔”的机会，把错误时机卖出的损失挽回。因此优先队列（价格低标记值大先出队）代表已有物品，每到一个城市，先判断此地价格是不是比队列的最低价格高，是的话就可以将最低价格的物品卖掉了，再把差值加到利润上。然后最低价弹出，在队列里插入此地价格两个，分别以1和0标记（已经卖过一次，尚未卖过）。如此循环，假如后面有更高价想反悔，就把标记为1的错误卖出值弹出，队中标记为0的代表这个值现在是未被使用，可参与买卖。举个例子：样例中有“1 2 10 9”这个情况，首先花1元买物品，遇到2时我会把1给卖出，队里插入“2 1”“2 0”，利润为-1+2=1。后来又遇到10，2就属于贱卖当然不行，此时队里有两个2，让标记为1的出队，剩下的2的标记为0，代表没有被使用过，插入“10 1”“10 0”，此时利润值为1-2+10=9（跟1买10卖的利润是一样的）。下一个遇到9，此时队中最小为2，消之，利润计算为9-2+9=16。至于操作次数计算就简单了，只需要每次在标记为0的价格出队时总次数+2即可。以下为代码：12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;struct node&#123; int v, s; //v--价格，s--状态 node(int a, int b):v(a), s(b)&#123;&#125; //重载&lt;运算符，使优先队列让v小的先出队，v相同则s大的先出队 //优先队列默认把结构体按从大到小排序，重载&lt;运算符使其按照自定义顺序排序 bool operator&lt;(const node &amp;a) const&#123; if( v==a.v ) return s&lt;a.s; return v&gt;a.v; &#125;&#125;;int main() &#123; int t; while( t-- )&#123; int n; LL profit=0, cnt=0; scanf("%d", &amp;n); priority_queue&lt;node&gt; que; for( int i=0; i&lt;n; i++ )&#123; int c; scanf("%d", &amp;c); if( !que.empty() &amp;&amp; que.top().v&lt;c )&#123; node tmp=que.top(); profit=profit-tmp.v+c; if( tmp.s==0 ) cnt+=2; //当前最小值之前没有买过，次数加2(以最小值买，以最大值卖) que.pop(); que.push(node(c, 1)); que.push(node(c, 0)); &#125; else&#123; que.push(node(c, 0)); &#125; &#125; printf("%lld %lld\n", profit, cnt); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>队列</tag>
        <tag>贪心</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(HDU)2018CCPC - 网络赛 1004 Find Integer]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%2F%E6%95%B0%E8%AE%BA%2F(HDU)2018CCPC-%E7%BD%91%E7%BB%9C%E8%B5%9B%201004%20Find%20Integer%2F</url>
    <content type="text"><![CDATA[Find Integer Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others)Total Submission(s): 0 Accepted Submission(s): 0Special Judge Problem Description people in USSS love math very much, and there is a famous math problem .give you two integers n,a,you are required to find 2 integers b,c such that an+bn=cn. Input one line contains one integer T;(1≤T≤1000000)next T lines contains two integers n,a;(0≤n≤1000,000,000,3≤a≤40000) Output print two integers b,c if b,c exits;(1≤b,c≤1000,000,000);else print two integers -1 -1 instead. Sample Input 1 2 3 Sample Output 4 5 题解本题给出一个费马大定理的表达式 —— $a^n+b^n=c^n,(a,b,c) \in Z$。 题目意思是给定该公式中的a和n，求满足公式的b和c并输出，若不存在满足公式的b和c，则输出”-1 -1”。所以当n&gt;2或n==0时输出”-1 -1”；当n=1时输出满足方程的第一组解：1 a+1；当n=2时输出勾股数。求勾股数：这种前n项固定的情况一般可以采用打表法。三层循环肯定是不行的，这么大数据量肯定tle。$a^2=c^2-b^2=(c+b)(c-b)$。令$x=c+b,y=c-b$，于是$a^2=xy$。从x着手，当满足a2可以整除x时就可以求出符合条件的b，c。代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longstruct node&#123; ll b,c;&#125;gg[40007];void init()&#123; memset(gg, 0, sizeof(gg)); for( ll i=3; i&lt;=40000; i++ )&#123; for( ll j=1; j&lt;i; j++ )&#123; if( i*i%j==0 )&#123; //若a^2可以整除(c+b),则此式成立 ll x = j; ll y = i*i/j; if( (y-x)%2==0 )&#123; //若b为整数,则c也是整数 gg[i].c=(x+y)/2; gg[i].b=(y-x)/2; break; &#125; &#125; &#125; &#125;&#125;int main()&#123; init(); int t; scanf("%d", &amp;t); while( t-- )&#123; ll a, n; scanf("%lld%lld", &amp;n, &amp;a); if( n&gt;2 || n==0 )&#123; printf("-1 -1\n"); continue; &#125; else if( n==1 )&#123; printf("1 %lld\n", a+1); continue; &#125; else&#123; if( gg[a].b )&#123; printf("%lld %lld\n", gg[a].b, gg[a].c); &#125; else printf("-1 -1\n"); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C/C++</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT L2-019. 悄悄关注]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2FSTL%2FPAT%20L2-019%20%E6%82%84%E6%82%84%E5%85%B3%E6%B3%A8%2F</url>
    <content type="text"><![CDATA[一道水题 题目 新浪微博上有个“悄悄关注”，一个用户悄悄关注的人，不出现在这个用户的关注列表上，但系统会推送其悄悄关注的人发表的微博给该用户。现在我们来做一回网络侦探，根据某人的关注列表和其对其他用户的点赞情况，扒出有可能被其悄悄关注的人。 输入格式： 输入首先在第一行给出某用户的关注列表，格式如下： 人数N 用户1 用户2 …… 用户N 其中N是不超过5000的正整数，每个“用户i”（i=1, …, N）是被其关注的用户的ID，是长度为4位的由数字和英文字母组成的字符串，各项间以空格分隔。 之后给出该用户点赞的信息：首先给出一个不超过10000的正整数M，随后M行，每行给出一个被其点赞的用户ID和对该用户的点赞次数（不超过1000），以空格分隔。注意：用户ID是一个用户的唯一身份标识。题目保证在关注列表中没有重复用户，在点赞信息中也没有重复用户。 输出格式： 我们认为被该用户点赞次数大于其点赞平均数、且不在其关注列表上的人，很可能是其悄悄关注的人。根据这个假设，请你按用户ID字母序的升序输出可能是其悄悄关注的人，每行1个ID。如果其实并没有这样的人，则输出“Bing Mei You”。 输入样例1： 10 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao8Magi 50Pota 30LLao 3Ammy 48Dave 15GAO3 31Zoro 1Cath 60 输出样例1： AmmyCathPota 输入样例2： 11 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao Pota7Magi 50Pota 30LLao 48Ammy 3Dave 15GAO3 31Zoro 29 输出样例2： Bing Mei You 题目比较简单，就是找出点赞数大于均值且名字不在关注列表里的人，排个序就好了。总结下： 用set存储元素时自动升序排序。set存储字符串用string； 存储数组一般开大些，’\0’会占位。如存储4个字母数组不能只开char[4]。 以下为代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;typedef struct &#123; char name[10]; int num;&#125;zan; //点赞信息zan a[10010];int main()&#123; set&lt;string&gt; men; //存储关注列表 set&lt;string&gt; se; //存储悄悄关注的人 set&lt;string&gt;::iterator it; int n; cin &gt;&gt;n; for( int i=0; i&lt;n; i++ )&#123; string s; cin &gt;&gt;s; men.insert(s); &#125; int m; double sum = 0; cin &gt;&gt;m; for( int i=0; i&lt;m; i++ )&#123; cin &gt;&gt;a[i].name &gt;&gt;a[i].num; sum += a[i].num; &#125; sum /= (m*1.0);//寻找符合条件的人 for( int i=0; i&lt;m; i++ )&#123; if( a[i].num &gt; sum )&#123; if( men.count(a[i].name) == 0 )&#123; se.insert(a[i].name); &#125; &#125; &#125; //结果列表空则输出没有，有则遍历输出 if( se.size() == 0 )&#123; printf("Bing Mei You\n"); &#125; else&#123; for( it=se.begin(); it!=se.end(); it++ )&#123; cout &lt;&lt;*it &lt;&lt;endl; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>STL</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello]]></title>
    <url>%2Funcategorized%2Fhello%2F</url>
    <content type="text"><![CDATA[Hello 嗯…花费了大概一天的时间才搭好这个基于Github+Hexo的博客，对于啥经验都没有的我来说，已经很满足了。参考了不少网上大佬的教程，遇到了很多百度也没有解答的问题(比如git bash不识别nodejs…)，但在完成后看到首页的瞬间还是很有成就感的。为什么要建博客呢，原因无外乎那几种，但最主要的还是想有个属于自己的地方，存放一些文章，记录学习、生活的历程，起个日记本的作用。 那么，就从今天开始吧。]]></content>
  </entry>
</search>
