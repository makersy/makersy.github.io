<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[jQuery和ajax使用.md]]></title>
    <url>%2Funcategorized%2FjQuery%E5%92%8Cajax%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[JSP FileUpload实现文件上传]]></title>
    <url>%2FJava%2FWeb%2FJSP-FileUpload%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%2F</url>
    <content type="text"><![CDATA[文件上传的条件 表单必须是post提交方式 表单中必须有文件上传项，文件上传项必须有name属性和值 表单的enctype属性必须设置为multipart/form-data 文件上传基本操作数据接收：通过使用fileupload jar包的Common-FileUpload组件完成文件上传基本步骤： 创建一个 磁盘文件项工厂 的对象DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory(); 创建一个核心解析类ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory ); 解析request请求 —— parseRequest，返回一个List集合，List集合中存放的是FileItem对象（每一个表单项都是一个FileItem对象）List&lt;FileItem&gt; list = servletFileUpload.parseRequest(request); 遍历集合，获得每个FileItem，判断是表单项还是文件上传项fileItem.isFormField(): 返回是普通的文件表单项还是文件上传项fileItem.getFieldName(): 获得表单项的name属性值fileItem.getString(“UTF-8”): 获取表单的文本值，可设置UTF-8解决中文乱码 获得文件名：String filename = fileItem.getName(); 通过自定义工具类获得唯一文件名：String uuidfilename = UploadUtils.getUUIDFileName(filename);注：UploadUtils类是自定义工具类，具体实现是： 123456789101112131415public class UploadUtils &#123; /* * 生成唯一文件名 * */ public static String getUUIDFileName(String fileName) &#123; int idx = fileName.lastIndexOf("."); String extention = fileName.substring(idx);//扩展名 String uuidFileName = UUID.randomUUID().toString().replace("-", "")+extention; return uuidFileName; &#125; public static void main(String[] args) &#123; System.out.println(getUUIDFileName("1.jpg")); &#125;&#125; 输入流获得文件上传的数据：InputStream is = fileItem.getInputStream(); 得到文件要上传的路径url = this.getServletContext().getRealPath(&quot;/upload&quot;)+&quot;//&quot;+uuidfilename; 输入流对接输出流123456789OutputStream os = new FileOutStream(url);//输出流目标为urlint len = 0;byte[] b = new byte[1024];while((len=is.read(b)) != -1)&#123;//读取输入流到b中os.write(b,0,len);//将b写入输出流中&#125;is.close();//关闭输入流os.close();//关闭输出流&#125;]]></content>
      <categories>
        <category>Java</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 0050 Pow(x,n)]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%2FLeetCode%200050%20Pow(x%2Cn)%2F</url>
    <content type="text"><![CDATA[题目实现 pow(x, n) ，即计算 x 的 n 次幂函数。 示例 1: 输入: 2.00000, 10输出: 1024.00000 示例 2: 输入: 2.10000, 3输出: 9.26100 示例 3: 输入: 2.00000, -2输出: 0.25000 解释: 2-2 = 1/22 = 1/4 = 0.25说明: -100.0 &lt; x &lt; 100.0 n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。 题解用的递归法，log n123456789101112131415161718192021222324252627class Solution &#123; public double myPow(double x, int n) &#123; boolean isNagetive = false; if( n&lt;0 ) &#123; n = -n; isNagetive = true; &#125; if( isNagetive ) &#123; return 1/pow(x, n); &#125;else &#123; return pow(x, n); &#125; &#125; public static double pow(double x, int n) &#123; double res = 1.0; if( n==0 ) &#123; return 1.0; &#125;else if( n==1 ) &#123; return x; &#125;else if( n%2==0 ) &#123; res = pow(x*x, n/2); &#125;else&#123; res = pow(x*x, n/2) * x; &#125; return res; &#125;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 0109 有序链表转换二叉搜索树]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E4%BA%8C%E5%8F%89%E6%A0%91%2FLeetCode%200109%20%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%2F</url>
    <content type="text"><![CDATA[题目给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。示例： 给定的有序链表： [-10, -3, 0, 5, 9], 一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：123456&gt; 0&gt; / \&gt; -3 9&gt; / /&gt; -10 5&gt; 题解这道题类似归并排序，需要每次都把链表分为尽可能等长的两部分，然后分别对这两部分再进行生成二叉树的操作。可以用快慢指针，具体实现是：设置快慢指针各一个，慢指针步进为1，快指针步进为2，循环条件是快指针不为空且其子节点不为空。这样快指针走的长度是慢的2倍，可以保证每次循环都找到了链表的中心节点（平衡二叉树需要找中心节点）。每次循环后链表被分为： 0-premid、slow、slow.next-最后一个 这三部分。Java代码如下：123456789101112131415161718192021222324252627282930313233343536/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; *//** * Definition for a binary tree node. * public class TreeNode &#123; * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public TreeNode sortedListToBST(ListNode head) &#123; if( head==null ) return null; if( head.next==null ) return new TreeNode(head.val); ListNode slow = head; ListNode fast = head; ListNode premid = null; while( fast!=null &amp;&amp; fast.next!=null ) &#123; premid = slow; slow = slow.next; fast = fast.next.next; &#125; premid.next = null; TreeNode root = new TreeNode(slow.val); root.left = sortedListToBST(head); root.right = sortedListToBST(slow.next); return root; &#125;&#125;]]></content>
      <categories>
        <category>数据结构</category>
        <category>二叉树</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[eclipse建立web项目时忘了生成xml文件的解决办法]]></title>
    <url>%2F%E5%8F%91%E7%8E%B0%2Feclipse%E5%BB%BA%E7%AB%8Bweb%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%BF%98%E4%BA%86%E7%94%9F%E6%88%90xml%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[刚学web没多久，建立项目时忘了去勾选建立web.xml文件的选项。当我写了好多代码，接下来需要修改这个文件的时候才发现，我没有生成它…接下来在摸索中找到了解决办法。首先在创建的项目上右键，找到Java EE Tools，然后点击Generate Deployment Descriptor Stub，如下图（我的已经生成了所以是灰色）。完了之后会发现，web.xml躺在WEB-INF文件夹下~ （完）]]></content>
      <categories>
        <category>发现</category>
      </categories>
      <tags>
        <tag>eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java-EL表达式和JSTL标签库]]></title>
    <url>%2FJava%2FWeb%2FJava-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[关于EL表达式EL表达式全名为Expression Language，是一种为了在JSP中计算和输出Java对象的简单语言。基本语法： ${expression}以上语句中，expression为有效的表达式。该表达式可以和静态文本混合，还可以与其他表达式结合成为更大的表达式。 EL四个作用域对象如果我们在jsp页面调用Servlet的数据信息时，不写这个范围，那么EL就会从在小到大的范围内依次去寻找我们调用的这些数据。（因此最好写上） EL表达式输出语法：${[作用域.]属性名[.子属性]}EL支持绝大多数对象输出，本质是执行toString方法例： ${title}${requestScope.student.name}${emp.salary + 300}${ 1&lt;=3 &amp;&amp; 2&gt;4 } 获取数据：我们可以使用EL的内置对象param来简化获取url或者请求体中的数据语法：${param.参数名}例如当url是 https://class.makersy.com/lesson?mid=17331在Servlet中，我们用request.getParameter(“mid”)获取而现在可以用${param.mid}获取了其实，${param.参数名}就是request.getParameter（“参数名”);的简化形式 JSTL标签库使用JSTL表达式JSTL是JSP标准标签库的简称，它提供的标签能一定程度上代替Java代码，例如&lt;c:forEach/&gt;标签能实现Java语言中的循环功能。 使用前：1.下载jstl.jar和standard.jar包 2将这两个包复制到web-inf\lib 目录下 3.在JSP页面中添加指令，例如： 核心标签库初始化&lt;%@ taglib uri = &quot;http://java.sun.com/jsp/jstl/core&quot; prefix = &quot;c&quot; %&gt;或格式标签库初始化&lt;%@ taglib uri = &quot;http://java.sun.com/jsp/jstl/fmt&quot; prefix = &quot;fmt&quot; %&gt; JSTL标签库JSTL有五个标签库，分别是：核心标签库、格式标签库、函数标签库、SQL标签库、XML标签库。主要用前两者。 核心标签库主要完成JSP页面常用功能，包括JSTL表达式标签、URL标签、流程控制标签和循环标签等。其中，表达式标签有 和显示操作有关的&lt;c:out value=&quot; ${ news.title }&quot;/&gt;输出属性的值 数据库中给出的标签可以显示；&lt;c:set var=&quot;uid&quot; value=&quot;admin&quot; scope=&quot;request&quot;/&gt; 存入变量,把uid的变量存入request中;&lt;c:remove var=&quot;uid&quot; value=&quot;admin&quot; scope=&quot;request&quot;/&gt;移除变量 把request中的uid的变量移除. 实现程序逻辑相关的c:foreach标签&lt;c:forEach var=&quot;对象&quot; items=”保存在request中的数组&quot; varStatus=&quot;status&quot;&gt;循环的的变量&lt;c:forEach /&gt;&lt;c:forEach&gt;标签具有以下一些属性： var：迭代参数的名称。在迭代体中可以使用的变量的名称，用来表示每一个迭代变量。类型为String。 items：要进行迭代的集合。对于它所支持的类型将在下面进行讲解。 varStatus：迭代变量的名称，用来表示迭代的状态，可以访问到迭代自身的信息。 begin：如果指定了items，那么迭代就从items[begin]开始进行迭代；如果没有指定items，那么就从begin开始迭代。它的类型为整数。 end：如果指定了items，那么就在items[end]结束迭代；如果没有指定items，那么就在end结束迭代。它的类型也为整数。 step：迭代的步长。 &lt;c:forEach&gt;标签的items属性支持Java平台所提供的所有标准集合类型。此外，您可以使用该操作来迭代数组（包括基本类型数组）中的元素。它所支持的集合类型以及迭代的元素如下所示：​ java.util.Collection：调用iterator()来获得的元素。 java.util.Map：通过java.util.Map.Entry所获得的实例。​ java.util.Iterator：迭代器元素。​ java.util.Enumeration：枚举元素。​ Object实例数组：数组元素。​ 基本类型值数组：经过包装的数组元素。​ 用逗号定界的String：分割后的子字符串。​ javax.servlet.jsp.jstl.sql.Result：SQL查询所获得的行。​ 不论是对整数还是对集合进行迭代， &lt;c:forEach&gt;的varStatus属性所起的作用相同。和var属性一样，varStatus用于创建限定了作用域的变量（改变量只在当前标签体内起作用）。不过，由varStatus属性命名的变量并不存储当前索引值或当前元素，而是赋予javax.servlet.jsp.jstl.core.LoopTagStatus类的实例。该类包含了一系列的特性，它们描述了迭代的当前状态，如下这些属性的含义如下所示：​ current：当前这次迭代的（集合中的）项。​ index：当前这次迭代从0开始的迭代索引。​ count：当前这次迭代从1开始的迭代计数。​ first：用来表明当前这轮迭代是否为第一次迭代，该属性为boolean类型。​ last：用来表明当前这轮迭代是否为最后一次迭代，该属性为boolean类型。​ begin：begin属性的值。​ end：end属性的值​ step：step属性的值​下面是一个使用的小例子，判断x的值并输出他所在的区间。123456789101112131415161718192021222324&lt;%@ page language="java" contentType="text/html; charset=UTF-8"pageEncoding="UTF-8"%&gt;&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%request.setAttribute("x", "11");%&gt;&lt;c:choose&gt;&lt;c:when test="$&#123;x&gt;0 &amp;&amp; x&lt;=10 &#125;"&gt;&lt;h1 style="color:blue"&gt;1-10之间的整数&lt;/h1&gt;&lt;/c:when&gt;&lt;c:when test="$&#123;x&gt;10 &amp;&amp; x&lt;=20 &#125;"&gt;&lt;h1 style="color:lightcoral"&gt;11-20之间的整数&lt;/h1&gt;&lt;/c:when&gt;&lt;/c:choose&gt;&lt;/body&gt;&lt;/html&gt; 格式化日期1234567891011121314151617181920212223242526272829303132333435jstl日期格式化代码&lt;%@page import="java.util.Date"%&gt;&lt;%@ page language="java" contentType="text/html; charset=UTF-8"pageEncoding="UTF-8"%&gt;&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/fmt" prefix="fmt"%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%request.setAttribute("amt", "1898923.234");request.setAttribute("now", new Date());request.setAttribute("html", "&lt;a href='index.html'&gt;index&lt;/a&gt;");request.setAttribute("nothing", null);%&gt;&lt;!-- formatDate pattternyyyy - 四位年MM = 两位月dd = 两位日HH - 24小时制hh - 12小时制mm - 分钟ss - 秒数SSS - 毫秒--&gt;&lt;h2&gt;&lt;fmt:formatDate value="$&#123;requestScope.now &#125;" pattern="yyyy年MM月dd日HH时mm分ss秒SSS毫秒" /&gt; &lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>Java</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>EL表达式</tag>
        <tag>JSTL标签库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Servlet和JSP]]></title>
    <url>%2FJava%2FWeb%2F%E5%85%B3%E4%BA%8EServlet%2F</url>
    <content type="text"><![CDATA[请求转发和响应重定向 请求转发： 是服务器跳转，只产生一次请求request.getRequestDispatcher(url).forward(request,response） 响应重定向： 是浏览器端跳转，会产生两次请求地址栏会变成最后的url （处理完成第一个请求之后返回一个特殊的响应给浏览器由浏览器重新发起另一个请求到新的资源）response.sendRedirect(url);HTTP状态码打开网页可根据出现的状态码来判断处于什么状态。 ContentType的作用ContentType决定浏览器采用何种方式对相应体进行处理 CookieCookie是浏览器保存在本地的文本内容Cookie常用于保存登录状态、用户资料等小文本Cookie具有时效性，Cookie内容会伴随请求发送给Tomcat1234567891011121314151617181920212223242526272829//Cookie部分doGet函数protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; System.out.println("用户登录成功！"); Cookie cookie = new Cookie("user", "admin"); cookie.setMaxAge(60*60*24*7);//有效期七天内有效 response.addCookie(cookie); response.getWriter().println("login success");&#125;//使用cookie的函数protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; Cookie[] cookies = request.getCookies(); if( cookies==null ) &#123; response.getWriter().println("user not login"); &#125; String user = null; for( Cookie cookie : cookies ) &#123; System.out.println(cookie.getName() + ":" + cookie.getValue()); if( cookie.getName().equals("user") ) &#123; user = cookie.getValue(); break; &#125; &#125; if( user == null ) &#123; response.getWriter().println("user not login"); &#125;else &#123; response.getWriter().println("user : " + user); &#125;&#125; SessionSession(用户会话)： 用于保存于“浏览器窗口”对应的数据。它与Cookie的不同是：Cookie保存的数据在客户端，二Session保存的数据在服务器。 session是与窗口绑定的，保存在tomcat服务器的数据是30分钟. Session通过浏览器Cookie的SessionId提取对应用户的数据 浏览器第一次向服务器发送请求时，服务器在内存中开辟一块儿空间用于存放这个会话的信息，并把这块空间的id（sessionId）返回给浏览器。浏览器将sessionId存放在cookie中，之后每次向服务器发起请求都会携带这个cookie，告知服务器当前的会话。 JavaWeb三大作用域对象 HttpServletRequest – 请求响应完毕就消失了。 HttpSession – 第一次请求被创建，默认30分钟没有被访问就被销毁。此时把浏览器关掉其实是将存储在cookie中的sessionid抛弃，并没有被销毁。 ServletContext web – 应用启动时被创建，重启或关闭时被销毁。 程序开发时，为了便于维护，能用小作用域对象就用小作用域对象。 JSP九大内置对象 更新中，未完待续…]]></content>
      <categories>
        <category>Java</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Web</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 951 翻转二叉树]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E4%BA%8C%E5%8F%89%E6%A0%91%2FLeetCode-951-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[题目我们可以为二叉树 T 定义一个翻转操作，如下所示：选择任意节点，然后交换它的左子树和右子树。 只要经过一定次数的翻转操作后，能使 X 等于 Y，我们就称二叉树 X 翻转等价于二叉树 Y。 编写一个判断两个二叉树是否是翻转等价的函数。这些树由根节点 root1 和 root2 给出。 示例： 输入：root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]输出：true解释：We flipped at nodes with values 1, 3, and 5. 提示：每棵树最多有 100 个节点。每棵树中的每个值都是唯一的、在 [0, 99] 范围内的整数。 题解先说一句，我没写出来。看到这个题我首先想的是怎么实现将某些节点交换左右子节点，而某些不换，从而判断两棵树是否相等。于是写了交换子节点的函数和判断两棵树是否相等的函数。且不说可行性，光O(n)就够我喝一壶的。然后我看了下网上大佬的题解才懂。我的代码理解都写在注释里。。 1234567891011121314151617181920212223242526272829/** * Definition for a binary tree node. * public class TreeNode &#123; * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public boolean flipEquiv(TreeNode root1, TreeNode root2) &#123; //若有一个或两个为空，返回两节点是否相等。具体结果是：若均为空，返回true；若一个为空，返回false if(root1 == null || root2 == null)&#123; return root1 == root2; &#125; //若两节点的值都不相等，那么自然树也不相等 if(root1.val != root2.val)&#123; return false; &#125; /* 分别比较root1和root2的：左左、右右、左右、右左。 若是可以通过交换子节点来使两根节点下的树相等， 那么将这两个根节点的四个子节点顺序进行排列组合， 若有一种情况下是两边相等,那么就可以通过交换而得；否则就不可以。 */ return flipEquiv(root1.left, root2.left) &amp;&amp; flipEquiv(root1.right, root2.right) || flipEquiv(root1.left, root2.right) &amp;&amp; flipEquiv(root1.right, root2.left); &#125;&#125;]]></content>
      <categories>
        <category>数据结构</category>
        <category>二叉树</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 0102-二叉树的层次遍历]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F%E4%BA%8C%E5%8F%89%E6%A0%91%2FLeetCode-0102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86%2F</url>
    <content type="text"><![CDATA[题目给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。例如:给定二叉树: [3,9,20,null,null,15,7],​ 返回其层次遍历结果：[ [3], [9,20], [15,7]] 题解我的思路是每行的节点都从左到右用一个队列或链表来存储，每次取队列头部并弹出。如果该节点有非空的后代节点则再加入队列，直到队列为空时停止。代码如下:12345678910111213141516171819202122232425262728293031/** * Definition for a binary tree node. * public class TreeNode &#123; * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123; List&lt;List&lt;Integer&gt;&gt; res=new LinkedList&lt;&gt;(); LinkedList&lt;TreeNode&gt; queue=new LinkedList&lt;TreeNode&gt;(); if(root==null) return res; queue.offer(root); while(!queue.isEmpty())&#123; int size=queue.size(); List&lt;Integer&gt; subres=new LinkedList&lt;&gt;(); for(int i=0;i&lt;size;i++)&#123; TreeNode tmp=queue.pop(); subres.add(tmp.val); if(tmp.left!=null) queue.offer(tmp.left); if(tmp.right!=null) queue.offer(tmp.right); &#125; res.add(subres); &#125; return res; &#125;&#125; 耗时最少的是用递归法做的123456789101112131415161718192021222324252627282930/** * Definition for a binary tree node. * public class TreeNode &#123; * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; //递归实现 public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123; List&lt;List&lt;Integer&gt;&gt; res=new ArrayList&lt;&gt;(); if(root==null) return res; recursionLevelOrder(root,0,res); return res; &#125; private void recursionLevelOrder(TreeNode root,int level,List&lt;List&lt;Integer&gt;&gt; res)&#123; if(root==null) return; if(res.size()==level)&#123; List&lt;Integer&gt; subres=new ArrayList&lt;&gt;(); subres.add(root.val); res.add(subres); &#125;else&#123; res.get(level).add(root.val); &#125; recursionLevelOrder(root.left,level+1,res); recursionLevelOrder(root.right,level+1,res); &#125;&#125;]]></content>
      <categories>
        <category>数据结构</category>
        <category>二叉树</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>LeetCode</tag>
        <tag>二叉树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[类型修饰符volatile]]></title>
    <url>%2F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%2FJava%2F%E7%B1%BB%E5%9E%8B%E4%BF%AE%E9%A5%B0%E7%AC%A6volatile%2F</url>
    <content type="text"><![CDATA[今天看Java并发时，看到了一个新的关键字volatile，觉得有必要记一下。 基础概念​ 先补充一下概念：Java 内存模型中的可见性、原子性和有序性。可见性： 可见性是一种复杂的属性，因为可见性中的错误总是会违背我们的直觉。通常，我们无法确保执行读操作的线程能适时地看到其他线程写入的值，有时甚至是根本不可能的事情。为了确保多个线程之间对内存写入操作的可见性，必须使用同步机制。 可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果。另一个线程马上就能看到。比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。所以对其他线程是可见的。但是这里需要注意一个问题，volatile只能让被他修饰内容具有可见性，但不能保证它具有原子性。比如 volatile int a = 0；之后有一个操作 a++；这个变量a具有可见性，但是a++ 依然是一个非原子操作，也就是这个操作同样存在线程安全问题。 在 Java 中 volatile、synchronized 和 final 实现可见性。 原子性： 原子是世界上的最小单位，具有不可分割性。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作时原子操作。再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。一个操作是原子操作，那么我们称它具有原子性。java的concurrent包下提供了一些原子类，我们可以通过阅读API来了解这些原子类的用法。比如：AtomicInteger、AtomicLong、AtomicReference等。 在 Java 中 synchronized 和在 lock、unlock 中操作保证原子性。 有序性： ​ Java 语言提供了 volatile 和 synchronized 两个关键字来保证线程之间操作的有序性，volatile 是因为其本身包含“禁止指令重排序”的语义，synchronized 是由“一个变量在同一个时刻只允许一条线程对其进行 lock 操作”这条规则获得的，此规则决定了持有同一个对象锁的两个同步块只能串行执行。 volatile原理 百度该字条，其内容是： volatile是一个类型修饰符（type specifier）.volatile的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。volatile的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。 ​ 如果查阅一下英文字典，有关volatile的解释，你会得到最常用的解释是“易变的，不稳定的”。这也是volatile关键字的含义。 ​ Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。 在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。 ​ 当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的 CPU cache 中。 而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过 CPU cache 这一步。 ​ 当一个变量定义为 volatile 之后，将具备两种特性： 1.保证此变量对所有的线程的可见性，这里的“可见性”，如本文开头所述，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存（详见：Java内存模型）来完成。 2.禁止指令重排序优化。有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个内存屏障（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；（什么是指令重排序：是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）。 volatile 性能： volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XML文档编写及XPath表达式使用]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%2FXML%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E5%8F%8AXPath%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[XML简介XML是可扩展标记语言(Extensible Markup Language，XML)缩写，用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。可以用于Java程序配置描述文件、保存产生的数据、网络间数据传输等。 XML语法&amp;结构XML文档结构 第一行需是XML文档声明 有且只有一个根节点 书写规则与HTML相同 标签名使用小写英文, 单词间用-分隔多级标签之间不要存在重名 对特殊符号使用实体引用或CDATA标签5种实体引用12345&amp;lt; &lt;&amp;gt; &gt;&amp;amp; &amp;&amp;apos; '&amp;quot; " CDATA标签:&lt;![CDATA[不希望由XML解析的文本数据]]&gt; XML语义约束语义约束的两种定义方式:DTD与XML SchemaDTD利用DTD中的&lt;！ELEMENT&gt;标签定义XML文档中允许出现的节点及数量例: &lt;!ELEMENT hr (employee)&gt;&lt;!ELMENT name(#PCDATA)&gt; 定义name标签体只能是文本使用描述符表达子节点数量+ 至少出现1个子节点* 可出现0…n个子节点?最多出现1个子节点在XML中使用&lt;!DOCTYPE&gt;标签来引用DTD文件。书写格式:&lt;!DOCTYPE 根节点 SYSTEM &quot;dtd文件路径&quot;&gt; Schema比DTD更复杂XML Schema提供了数据类型、格式限定、数据范围等特性&lt;schema xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;声明文本是Schema&lt;element&gt;代表标签节点&lt;complexType&gt;复杂节点, 标签包含子节点时使用&lt;sequence&gt;子标签按顺序排列&lt;attribute&gt;设置属性标签属性:name= 属性名称type= 属性值类型use=”required” 属性必须存在minOccurs=”n” 最小出现次数maxOccurs=”n” 最大出现次数&lt;simpleType&gt;简单类型。 代替属性:type使用&lt;restriction&gt;限定数据类型base=”xx” 基本类型&lt;minInclusive value=&quot;&quot;&gt;最小数据范围&lt;maxInclusive value=&quot;&quot;&gt;最大数据范围在XML文本的根节点添加1xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;Schema文件路径&quot; 属性来关联schema文本 Dom4jDom4j是java用来读取和操作xml文档的一种方式。DOM(Document Object Model) 文档对象模型把xml文档看做一个树结构Dom4j的含义和作用 将xml文件视为Document对象 将xml文件中的标签视为Element对象使用时需下载dom4j的jar包并导入。 XPath基本表达式nodename: 选取此节点的所有子节点/ 从根节点选取// 从匹配选择的当前节点选择文档中的节点. 当前节点.. 当前节点的父节点@ 选取属性谓语表达式[1] 第一个匹配的元素[last()] 最后一个匹配的元素[last()-1] 倒数第二个匹配的元素[position()&lt;3] 最前面两个匹配的元素[@lang] 选取所有拥有lang属性的元素[@lang=&#39;value&#39;] 选取所有包含lang属性且属性值为value的元素[price&gt;35.00] 选取price元素值大于35.00的元素 总结下面是我写的一个例子：XML文件1234567891011121314151617181920212223242526272829303132333435&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!-- &lt;!DOCTYPE hr SYSTEM "NewFile.dtd"&gt; --&gt;&lt;!-- 人力资源管理系统 --&gt;&lt;hr xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="hr.xsd"&gt; //xml schema文件名为hr.xsd &lt;employee no="3309"&gt; &lt;name&gt;张三&lt;/name&gt; &lt;age&gt;31&lt;/age&gt; &lt;salary&gt;4000&lt;/salary&gt; &lt;department&gt; &lt;dname&gt;会计部&lt;/dname&gt; &lt;address&gt;b103&lt;/address&gt; &lt;/department&gt; &lt;/employee&gt; &lt;employee no="3310"&gt; &lt;name&gt;李四&lt;/name&gt; &lt;age&gt;22&lt;/age&gt; &lt;salary&gt;4000&lt;/salary&gt; &lt;department&gt; &lt;dname&gt;会计部&lt;/dname&gt; &lt;address&gt;b103&lt;/address&gt; &lt;/department&gt; &lt;/employee&gt; &lt;employee no="3311"&gt; &lt;name&gt;张无忌&lt;/name&gt; &lt;age&gt;30&lt;/age&gt; &lt;salary&gt;3600&lt;/salary&gt; &lt;department&gt; &lt;department /&gt; &lt;dname&gt;人事部&lt;/dname&gt; &lt;address&gt;XX大厦-B105&lt;/address&gt; &lt;/department&gt; &lt;/employee&gt;&lt;/hr&gt; xml语义约束–xml schema文件(.xsd)12345678910111213141516171819202122232425262728293031323334&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.example.org/hr" xmlns:tns="http://www.example.org/hr" elementFormDefault="qualified"&gt; &lt;element name="hr"&gt; &lt;complexType&gt; &lt;sequence&gt; &lt;element name="employee" minOccurs="1" maxOccurs="9999"&gt; &lt;complexType&gt; &lt;sequence&gt; &lt;element name="name" type="string"&gt;&lt;/element&gt; &lt;element name="age"&gt; &lt;simpleType&gt; &lt;restriction base="integer"&gt; &lt;minInclusive value="18"&gt;&lt;/minInclusive&gt; &lt;maxInclusive value="60"&gt;&lt;/maxInclusive&gt; &lt;/restriction&gt; &lt;/simpleType&gt; &lt;/element&gt; &lt;element name="salary" type="integer"&gt;&lt;/element&gt; &lt;element name="department"&gt; &lt;complexType&gt; &lt;sequence&gt; &lt;element name="dname" type="string"&gt;&lt;/element&gt; &lt;element name="address" type="string"&gt;&lt;/element&gt; &lt;/sequence&gt; &lt;/complexType&gt; &lt;/element&gt; &lt;/sequence&gt; &lt;attribute name="no" type="string" use="required"&gt;&lt;/attribute&gt; &lt;/complexType&gt; &lt;/element&gt; &lt;/sequence&gt; &lt;/complexType&gt; &lt;/element&gt;&lt;/schema&gt; 读xml1234567891011121314151617181920212223242526272829303132333435package hr;import java.util.List;import org.dom4j.Document;import org.dom4j.DocumentException;import org.dom4j.Element;import org.dom4j.io.SAXReader;public class Hrreader &#123; void readXml() &#123; String file = "d:/Eclipse/workplace/calculator/src/NewFile.xml"; SAXReader reader = new SAXReader(); try &#123; Document document = reader.read(file); //获取文档根节点，即hr标签 Element root = document.getRootElement(); List&lt;Element&gt; employees = root.elements("employee"); for( Element employee : employees ) &#123; Element name = employee.element("name"); String empName = name.getText(); System.out.println(empName); System.out.println(employee.elementText("age")); System.out.println(employee.elementText("salary")); &#125; &#125; catch (DocumentException e) &#123; // TODO 自动生成的 catch 块 e.printStackTrace(); &#125; &#125; public static void main(String[] args) &#123; Hrreader reader = new Hrreader(); reader.readXml(); &#125;&#125; 写xml12345678910111213141516171819202122232425262728293031323334353637383940414243package hr;import java.io.FileOutputStream;import java.io.OutputStreamWriter;import java.io.Writer;import org.dom4j.Document;import org.dom4j.Element;import org.dom4j.io.SAXReader;public class HrWriter &#123; public void WriteXml()&#123; String file = "d:/Eclipse/workplace/calculator/src/NewFile.xml"; SAXReader reader = new SAXReader(); try &#123; Document document = reader.read(file); Element root = document.getRootElement(); Element employee = root.addElement("employee"); employee.addAttribute("no", "3311");// Element name = employee.addElement("name");// name.setText("李想"); employee.addElement("name").setText("张无忌"); employee.addElement("age").setText("30"); employee.addElement("salary").setText("3600"); Element department = employee.addElement("department"); department.addElement("department"); department.addElement("dname").setText("人事部"); department.addElement("address").setText("XX大厦-B105"); Writer writer = new OutputStreamWriter(new FileOutputStream(file), "UTF-8"); document.write(writer); writer.close(); &#125; catch (Exception e) &#123; // TODO: handl exception e.printStackTrace(); &#125; &#125; public static void main(String[] args) &#123; HrWriter hrWriter = new HrWriter(); hrWriter.WriteXml(); &#125;&#125; 利用xpath进行xml文件的各种查找，类似数据库的查找语句12345678910111213141516171819202122232425262728293031323334353637383940package hr;import java.util.List;import org.dom4j.Document;import org.dom4j.Element;import org.dom4j.Node;import org.dom4j.io.SAXReader;public class XPathTestor &#123; public void xpath(String xpathExp) &#123; String file = "d:/Eclipse/workplace/calculator/src/NewFile.xml"; SAXReader reader = new SAXReader(); try &#123; Document document = reader.read(file); List&lt;Node&gt; nodes = document.selectNodes(xpathExp); for( Node node : nodes ) &#123; Element emp = (Element)node; System.out.println(emp.attributeValue("no")); System.out.println(emp.elementText("name")); System.out.println(emp.elementText("age")); System.out.println(emp.elementText("salary")); System.out.println("==========================="); &#125; &#125; catch (Exception e) &#123; // TODO: handle exception e.printStackTrace(); &#125; &#125; public static void main(String[] args) &#123; XPathTestor testor = new XPathTestor(); // 查询 斜杠/代表根节点// testor.xpath("/hr/employee");// testor.xpath("//employee[@no=3311]");// testor.xpath("//employee[1]");// testor.xpath("//employee[last()]"); testor.xpath("//employee[position()&lt;3]");// testor.xpath("//employee[1] | //employee[2]"); &#125;&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode 002-两数相加]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%2F%E6%95%B0%E8%AE%BA%2FLeetCode%20002%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[一道很简单的题，但是因为空指针的判别耗了很长时间… 题目 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0 开头。 示例 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807 代码我的代码(虽然过了但是耗时多)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123; ListNode now = new ListNode(0); ListNode res = now; while( l1!=null || l2!=null )&#123; boolean flag=false; int sum = 0; if(l1==null)&#123; sum += 0; &#125; else&#123; sum += l1.val; if( l1.next==null ) l1=null; else &#123; l1=l1.next; flag=true; &#125; &#125; if(l2==null)&#123; sum += 0; &#125; else &#123; sum += l2.val; if( l2.next==null) l2=null; else &#123; l2=l2.next; flag=true; &#125; &#125; now.val += sum; if( now.val&lt;10 )&#123; if( flag ) now.next = new ListNode(0); &#125; else&#123; now.next = new ListNode(now.val/10); now.val %= 10; &#125; now = now.next; &#125; return res; &#125;&#125; 官方题解12345678910111213141516171819public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123; ListNode dummyHead = new ListNode(0); ListNode p = l1, q = l2, curr = dummyHead; int carry = 0; while (p != null || q != null) &#123; int x = (p != null) ? p.val : 0; int y = (q != null) ? q.val : 0; int sum = carry + x + y; carry = sum / 10; curr.next = new ListNode(sum % 10); curr = curr.next; if (p != null) p = p.next; if (q != null) q = q.next; &#125; if (carry &gt; 0) &#123; curr.next = new ListNode(carry); &#125; return dummyHead.next;&#125; 我没想到一个carry用两次，可以放在下一个循环继续用。]]></content>
      <categories>
        <category>算法</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Java</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS小记]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%2FCSS%2FCSS%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[以下是CSS的一些知识及语法。 什么是CSScss指层叠样式表（Cascading Style Sheets)样式通常存储在样式表中css可以统一不同浏览器显示的内容样式 CSS使用目的定义如何显示html元素解决内容（html元素）与表现（浏览器中的呈现）分离的问题 CSS基础语法 CSS声明： 样式属性：background-color 操作符: : 样式值：#FFFFFF 分隔符： ； 声明块：同时使用多个声明语句 1234&#123; background-color:#FFFFFF;color:#000000;&#125; CSS规则：1.选择器：定位页面中的元素2.声明块：由多个CSS声明组成，最外层{}，可以使用多个声明内容 定义CSS的两种方式：内联样式方式、外联样式方式 内联样式方式：&lt;p style=&quot;color:lightcoral;font-weight:bolder;&quot; &gt;&lt;/p&gt;内联方式设置样式只对当前标签有效 外联样式方式：在style内通过元素选择器 设置元素的声明块。此时相当于将CSS嵌入到HTML文件中。123456789101112131415161718&lt;!DOCSTYLE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta lang="en"/&gt;&lt;title&gt;定义CSS的样式&lt;/title&gt;&lt;style&gt;p&#123;color:lightcoral;font-weight:bolder;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p style="font-weight:bolder;color:red;"&gt; 这是内联样式1.&lt;/p&gt;&lt;p style="size:small;color:yellow;"&gt; 这是内联样式2.&lt;/p&gt;&lt;p&gt;这是外联样式&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 注：若进行了内联样式，则其优先级更高。即外联样式声明了元素样式后，若该元素同时进行了内联样式声明，则依照内联样式显示。 CSS选择器： ID选择器（ # +id值） 元素选择器（直接使用元素名称） 类（class）选择器（ . + class名称） 属性选择器（中括号里面写属性名称，如[title]） 后代元素选择器A E : 指定需要修改的元素E与A为祖先和后代关系A&gt;E : 指定需要修改的元素E与A为父元素和子元素关系B+E : 指定需要修改的元素E为B的下一个兄弟元素伪类：主要用于&lt;a&gt;标签。a:link – 链接的样式a:hover – 鼠标悬停时的样式a:active – 点击时的样式a:visited – 访问过后的样式伪元素::before – 为当前元素创建一个排在第一位的子元素。例q::before{ content:”&lt;”;}，会把页面中的引用标签&lt;q&gt;创建伪元素，把默认加的双引号变为&lt;;::after – 为当前元素创建一个排在最后一位的子元素。例q::after {content:”&gt;”;}，会把页面中的引用标签&lt;q&gt;创建伪元素，把默认加的双引号变为&gt;.CSS选择器优先级别1、内联&gt;外联2、内联：id&gt;类选择器&gt;元素/伪类3、在属性后加上：空格+!important让该属性升级为最高级别(会打乱默认的次序，少用) 背景属性background:简写属性，作用是将背景属性设置在一个声明中background-color：设置元素的背景颜色background-image:把图像设置为背景（通过url定位文件中的图片路径，将图片设置为背景）background-position：设置背景图像的起始位置background-repeat:设置背景图像是否及如何重复因为p元素作为一个块级元素出现，它默认占到页面的整个宽度，即使文本内容很少，但它依旧会占到页面的整个宽度，所以背景图片会重复显示以填充所有区域内容background-repeat:设置背景图像是否及如何重复repeat:表示水平和垂直方向都是重复显示的no-repeat:表示水平和垂直方向都是不重复显示的 Tips： 无文本信息仅插入图片时，无法正常显示图片。这是由于未显示文本，导致分配的大小为：0，无法正常显示。此时需要手动设置 高height和宽width； 需要显示部分图片时，可以通过更改 高height和宽width来调节显示图片的大小。高和宽的数值正负代表图片的移动方向，即：需要显示图片中某一块时，高和宽都是负值。 CSS文本样式color：设置字体颜色text-align：文本水平对齐text-decoration：向文本添加修饰text-indent：文本首行缩进vertical-align：文本垂直对齐 关于文本水平、垂直居中： 字体font-family 指定文本的字体系列font-size 指定文本的字体大小font-style 指定文本的字体样式font-weight 指定字体的粗细 列表与表格列表list-style 用于把所有用于列表的属性设置于一个声明中list-style-image 把图像设置为列表项标志list-style -type 设置列表项标志的类型 表格border 设置表格边框border-collapse 设置边框是否被折叠成单个或隔开width 定义表格的宽度text-align 表格中文本对齐padding 设置表格的填充(内边距) CSS盒子模型 内边距paddingpadding： 使用缩写属性设置在一个声明中的所有填充属性padding-bottom: 设置元素的底部填充padding-left： 设置元素的左部填充padding-right： 设置元素的右部填充padding-top: 设置元素的顶部填充注：padding：全部padding:上下 左右padding：上 左右 下padding：上 右 下 左 外边距margin类似。 边框 border:10px black solid;三个属性意思是：边框宽度 颜色 实/虚线 Tips：1.内外边距和边框的使用会使当前盒子变大2.内边距享有当前盒子背景色 CSS定位机制普通流(标准流):默认状态,从左往右, 从上到下排列块元素： 独占一行 可以设置宽、高 如果不设置宽度，宽度默认为容器的100% div、p、h1-h6、ul、ol、li、dl、dt、dd(定义列表) 行内元素 与其他元素同行显示 不可以设置宽、高 宽高就是文字或图片的宽高 span、a、b、i、u、em…… 浮动 只能使元素向左或向右移动, 不能上下移动 浮动元素碰到包含框 或另一个浮动框, 浮动停止 浮动元素之后的元素将围绕它, 之前的不受影响 浮动会脱离标准流浮动的基础语法float:leftfloat:rightfloat:nonefloat:inherit 继承父类的浮动效果 浮动的理解浮动可以实现块级元素在一行中横向排列。浮动的原理是：当前的块从当前的容器里面脱离出来，虽然浮动后脱离了文档流（容器）但是文本流还在，还是会占据文本空间（这里带来的问题是：原来下一个块的内容可能会被浮动的内容占满 使该块本身的内容溢出）清除浮动是把浮动元素回归文档流, 撑起重启高度。 清除浮动语法clear:none | left | right |both;none: 不清除浮动left: 清除该元素左边的浮动right: 清除该元素右边的浮动both: 清除所有浮动inherit: 继承父类清除浮动的值 清除浮动常用的方法 方法一：在浮动元素后使用一个空元素。例如：&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt; 方法二：给浮动元素的容器添加overflow：hidden;可同时添加 *zoom:1 /*触发hasLayout 兼容IE6、7*/ 方法三：使用CSS3的:after伪元素 12345678.clearfix:after&#123;content: ".";display: block;height: 0;visibility: hidden;clear: both;&#125;.clearfix&#123;*zoom:1; /*触发hasLayout 兼容IE6、7*/&#125; 方法四：通过父级元素清除浮动 (较少使用) 父级元素定义height。只适用于高度固定的布局。 父级元素也一起浮动。不推荐, 会产生新的浮动问题。 CSS定位position:既是一个定位布局模块（提供与元素定位和层叠相关功能，是一个核心模块，又是一个属性模块内包含： 盒子模型的类型和尺寸 布局模型 元素之间的关系 视口大小、图像大小等其他相关方面 重要的定位模型：static ：静态模型/自然模型relative：相对定位模型absolute：绝对定位模型fixed：固定定位模型sticky：磁铁定位模型 static：作用：使元素定位于 常规/自然流 中特点： 忽略 top/bottom/left/right 或者z-inherit声明 两个相邻的元素如果都设置外边距，最终外边距=两者外边距中最大的那个 具有固定width和height值的元素，若把左右外边距设置为auto，则左右外边距会自动扩大占满剩余宽度。造成水平居中效果。 relative：作用: 使元素成为可定位的祖先元素特点： 可以使用top/right/bottom/left/z-index相对于该元素的原位置进行偏移 相对定位的元素，原来在标准流中的位置依旧保留，后面元素接在元素原位置之后 任何元素都可设置relative, 它绝对定位的后代都可以相对它进行绝对定位 可以使的浮动元素发生偏移，并控制它们的堆叠顺序 absolute：作用：使元素脱离常规流特点： 脱离常规流 设置尺寸要注意：百分比比的是最近定位祖先元素 若没有最近定位祖先元素，会以&lt;body&gt;为祖先元素 left/right/top/bottom若设置为0，它将对齐到最近定位祖先元素的各边，居中效果。 若left/right/top/bottom设置为auto，它将会回归到常规流 fixed ：作用: 同absolute相同，使元素脱离常规流特点： fixed相对于视口(用户当前可见界面)做绝对定位 固定定位元素不会随着视口滚动而滚动 继承absolute特点 （left/right/top/bottom若设置为0，它将对齐到最近定位祖先元素的各边，居中效果。 若left/right/top/bottom设置为auto，它将会回归到常规流） sticky磁铁定位/粘性定位/吸附定位作用：relavtive+fixed的完美结合，制造出吸附效果特点： 如果产生偏移原位置还是会在常规流中，一亩三分地留着。 如果它的最近祖元素有滚动，那么它的偏移标尺就是最近祖先元素 如果最近祖先元素没有滚动 那么它的偏移标尺是视口。 上下左右的偏移规则 总结盒子模型: 通过改变元素的margin和padding来控制元素的移动。定位: 通过元素的位置移动改变出现在网页的相对位置。先通过定位调整元素的大体位置, 再用盒子模型调整元素最后的位置]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML小记]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%2FHTML%2FHTML%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[由于要学习Java Web开发，先学习一下HTML。下面是一些基础知识。 标题标签标题标签共有六级：&lt;h1,2,3,4,5,6&gt;&lt;/……&gt;如：1&lt;h1&gt;一级标题&lt;/h1&gt; 对应大小：h1,2,3,4,5,6–32px,24px,18px,16px,14px,12px1em=16px 段落1&lt;p&gt;段落内容&lt;/p&gt; 默认浏览器样式，空标签也会占位置（本来是空的，但由于浏览器可能默认设置为固定大小，因此需要自定义）； 标签的默认浏览器可能造成部分问题，建议自定义； 设置段落标签的属性:在head内的style中设置123456&lt;style&gt;p&#123; margin: 0; padding: 0;&#125;&lt;/style&gt; 如此，内外边距为0。 字体基本不用，一般在css中设置。1&lt;font&gt;字体内容&lt;/font&gt; size: 字体大小face：字体集color：颜色，三种表示法——名称，16进制，rgb坐标 链接123&lt;a&gt;HTML链接&lt;/a&gt;&lt;a href="http://www.makersy.top" target="_blank"&gt;博客&lt;/a&gt; (新建一个窗口)&lt;a href="http://www.makersy.top" target="_self"&gt;博客&lt;/a&gt; （在当前页面打开） 页面锚点123&lt;a href="#xxx"&gt;页面内锚点&lt;/a&gt;（跳转到id为xxx的地方）&lt;h3 id="xxx"&gt; 你好&lt;/h3&gt; 禁止跳转1&lt;a href="javascript:; / javascript:void(0);"&gt;死链接&lt;/a&gt; ---这是一个死链接 去掉下划线、去掉指向链接时光标的手形1234a&#123;text-decoration: none;cursor: none;&#125; 列表 无序列表 1&lt;ul&gt;&lt;li&gt;内容&lt;/li&gt;&lt;/ul&gt; 有序列表 1&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt; 定义列表 1234&lt;dl&gt; &lt;dt&gt;定义概念的名字&lt;/dt&gt; &lt;dd&gt;概念的解释 主体&lt;/dd&gt;&lt;/dl&gt; 贴士： type属性项目符号样式&lt;ul type=&quot;&quot;&gt;&lt;/ul&gt;（disc（实心圆）,circle（空心圆）,square(实心方形)，none表示不去设置它的项目符号样式，但会保留项目符号所在的位置）不建议使用！有序标签ol无法设置项目符号，独具特色的顺序就是他的项目符号定义列表也无法设置其项目符号 只用&lt;ul&gt;&lt;/ul&gt;无序列表就好了以后看到样式，都不要通过html（或者元素本身属性）去设置，通过css。 图像 标签 作用 插入图像 属性 src（src这个属性是图片的地址，有这个属性才能实现图像效果。） 支持格式： PNG、JPEG、GIF、PDF（引入的PDF必须是单页的） 非标签方式：background alt：在图片无法显示比如地址写错时，提示用户这里本来放的是什么 class:标识，用来指定标签的类名例：12345678910&lt;img alt="logo" src="https://img1.mukewang.com/5b8cef4200019d9a02000200-140-140.jpg"&gt;&lt;!-- 非标签方式 --&gt;&lt;style&gt;.logo&#123;background: url(https://img1.mukewang.com/5b8cef4200019d9a02000200-140-140.jpg);width: 140px;height: 150px;&#125;&lt;/style&gt;&lt;p class="logo"&gt;&lt;/p&gt; 插入本地图像路径：绝对路径– C:\html\logo.jpg，相对路径– 与文件同级目录下– ./img/logo.png 或者 ../logo.png div&lt;div&gt;&lt;/div&gt; 万能标签 无语义标签作用：布局贴士：非常常用且重要 现代布局常用 块级元素与行内元素块级元素垂直分段排列。行内元素水平一行内一个挨着一个。&lt;span&gt;包裹一行内容&lt;/span&gt;块级元素大小取决于开发者的设置，行内元素大小取决于内容 注释单行注释：&lt;!--注释文本--&gt;多行注释：&lt;!--注释开始--&gt;...&lt;!--注释结束--&gt;，这里，多行注释不会隐藏注释间的内容，只是开发时的提示。条件注释：&lt;!--[if IE 6]&gt;注释内容&lt;![endif]--&gt;，这里，条件注释主要用于浏览器兼容性。条件注释只在IE10以下版本的浏览器中生效。提示浏览器较旧。 一些不常用的标签以下标签一般都不用！！！文本格式化标签（为避免浏览器差异，一般不用，多用css设置） 12345678&lt;b&gt;加粗&lt;/b&gt;&lt;strong&gt;加粗2&lt;/strong&gt;&lt;big&gt;大号字体&lt;/big&gt;&lt;em&gt;强调字体(斜体)&lt;/em&gt;&lt;i&gt;斜体/图标&lt;/i&gt;&lt;small&gt;小号字体&lt;/small&gt;&lt;sub&gt;下标&lt;/sub&gt;&lt;sup&gt;上标&lt;/sup&gt; 预格式文本标签：&lt;pre&gt;一般这里是预览的代码&lt;/pre&gt;引用标签：&lt;blockquote&gt;引用来的&lt;/blockquote&gt;删除线标签：&lt;del&gt;删除的内容&lt;/del&gt;下划线标签:&lt;ins&gt;下划线的内容&lt;/ins&gt; 表格12345678910111213141516&lt;!-- 无序列表 --&gt;野生动物&lt;ul type="circle"&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;栗子&lt;/li&gt;&lt;/ul&gt;&lt;!-- 有序列表 --&gt;&lt;ol&gt; &lt;li&gt;煎饼果子&lt;/li&gt; &lt;li&gt;台湾饭团&lt;/li&gt;&lt;/ol&gt;&lt;!-- 定义列表 --&gt;&lt;dl&gt; &lt;dt&gt;正数&lt;/dt&gt; &lt;dd&gt;大于0的自然数&lt;/dd&gt;&lt;/dl&gt; 表单标签&lt;form&gt; &lt;/form&gt;作用：手机用户输入的内容（文本、文件）属性：（1）action：提交到的服务端地址（2）method：指定提交时用哪种HTTP方法：POST/GET（3）name:标识（4）autocomplete:浏览器是否可以填充（5）enctype:指定表单内容编码input:文本、密码、单选、多选、按钮、数字、日期、颜色、范围、邮件、URL、文件select:下拉列表textarea:文本域button:按钮inout(单尖括号标签)文本：&lt;input type=&quot;text&quot;maxlength=&quot;&quot;(最大输入框长度)value=&quot;&quot;/&gt;密码：&lt;input type=&quot;password&quot;value=&quot;&quot;/&gt;单选：&lt;input type=&quot;radio&quot; name=&quot;&quot;vaule=&quot;&quot;/&gt;做单选操作，name要相同多选:&lt;input type=&quot;checkbox&quot;name=&quot;&quot;value=&quot;checked&quot;/&gt;(checked)默认选中按钮：&lt;input type=&quot;button&quot;value=&quot;&quot;/&gt;数字:&lt;input type=&quot;number&quot;/&gt;日期：&lt;input type=&quot;date&quot;/&gt;颜色：&lt;input type=&quot;color&quot;/&gt;(由于兼容性问题不是很常用)范围:&lt;input type=&quot;range&quot;min=&quot;&quot; max=&quot;&quot;/&gt;邮件:&lt;input type=&quot;email&quot;/&gt;提交按钮:&lt;input type=&quot;submit&quot;value=&quot;提交&quot;/&gt;URL:&lt;input type=&quot;url&quot;/&gt;(和邮件一样自带格式校验)文件：&lt;input type=&quot;file&quot;mulitple=&quot;multiple&quot;(多个文件)&gt;select：下拉列表如果&lt;select&gt;标签中设置了multiple或size属性的话,那么select就是列表了，不是下拉菜单；不设置是下拉菜单，所以代码实现了一个列表。multiple多选，size显示可见选项数目。12345678910111213&lt;select name="" id=""&gt;&lt;option value="" selected(设置默认值)&gt; &lt;/option&gt;&lt;option value="" &gt; &lt;/option&gt;&lt;option value="" &gt; &lt;/option&gt;&lt;/select&gt;textarea：文本域&lt;style&gt;textarea&#123;resize:none;(使其没有可拖拽能力）&#125;&lt;textarea rows=""(决定有几行高) cols=""(决定有多宽）&gt; 。。。。。（默认值） &lt;/textarea&gt;button：按钮&lt;button type=""(可以指明三个值 1、button 普通按钮 2、submit 带提交行为 3、reset 重置） form="(此处应该是表单的name) "&gt;提交（设置名字）&lt;/button&gt; 总结]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬虫笔记]]></title>
    <url>%2Fpython%2F%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[python爬虫笔记 判断请求是否成功1assert response.status_code==200 字符串格式化的一种方式1"你&#123;&#125;好".format(1) 使用代理ip 准备一堆ip地址，组成ip池，随机选择一个ip来使用 如何随机选择代理ip {“ip”:ip,”times”:0} [{},{},{},{},{}],对这个ip的列表进行排序，按照使用次数进行排序 选择使用次数较少的10个ip，从中随机选择一个 检查ip的可用性 可以使用requests添加超时参数，判断ip地址的质量 在线代理ip质量检测网站 携带cookie请求 尽量不使用cookie 携带一堆cookie进行请求，把cookie组成cookie池 请求登陆之后的网站的思路 实例化session 先使用session发送请求，登陆对网站，把cookie保存在session中 再使用session请求登录之后才能访问的网站，sesssion能够自动携带登陆成功时保存在其中的cookie，进行请求 不发送post请求，使用cookie获取登陆后的页面 cookie过期时间很长的网站 在cookie过期之前能够拿到所有的数据，比较麻烦 配合其他程序一起使用，其他程序专门其获取cookie，当前程序专门请求页面 字典推导式，列表推导式12cookies = "uuid_tt_dd=10_18697420810-1541514998525-406120; dc_session_id=10_1541514998525.130001; c_adb=1; smidV2=2018110622540004c9a404e4b4418224a1bc1f0afbaf24004db7a451c1dc9c0; UN=makersy; TY_SESSION_ID=bcb2fab5-1594-432f-b08b-77ff1c25478c; SESSION=04780891-f506-4bae-9eb9-7bee9b0f01b6; UserName=makersy; UserInfo=TY72nyXcSQ4kxcpYdP3noqwQsV904wqUfUrjssi1EYiqf77of1nXIX31igaPjkMfWt%2FBg37Ty5yCAFxluyxuwvK%2BjTb8WKRG2o8PpCGW7eCE5ImRX5bUUNkAvcYMhTjY; UserNick=makersy; AU=7FA; BT=1541516799322; UserToken=TY72nyXcSQ4kxcpYdP3noqwQsV904wqUfUrjssi1EYiqf77of1nXIX31igaPjkMfWt%2FBg37Ty5yCAFxluyxuwvK%2BjTb8WKRG2o8PpCGW7eAvjKefqLie1zAAltRYdzP1Sk%2Bfm7yuJ%2FP%2Fbsd6wSQVGMnSmTWc8bbv2HgJOkqFDhc%3D; ARK_ID=JSc5d36a4d0c44c361b2667ed6147b5607c5d3; dc_tos=phs2bi"cookies = &#123;i.split("=")[0]:i.split("=")[1] for i in cookies.split("; ")&#125; 获取登陆后的页面的三种方式 实例化session，使用session发送post请求，在使用他获取登陆后的页面 headers中添加cookie键，值为cookie字符串 在请求方法中添加cookie参数，接受字典形式的cookie，字典形式的cookie中的键是cookie的name对应的值，值是cookie的value对应的值]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java连接高版本mysql数据库(8.0)的坑]]></title>
    <url>%2F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%2FJava%2Fjava%E8%BF%9E%E6%8E%A5%E9%AB%98%E7%89%88%E6%9C%ACmysql%E6%95%B0%E6%8D%AE%E5%BA%93-8-0-%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[今天在写java连接mysql数据库时，遇到了无法连接的问题。报错信息如下: Loading class ‘com.mysql.jdbc.Driver’. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver’. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary. Sat Sep 22 16:28:36 GMT+08:00 2018 WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification. java.sql.SQLException: The server time zone value ‘???ú±ê×??±??’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support. 这三段意思是说： 驱动不再是之前的com.mysql.jdbc.Driver而是’com.mysql.cj.jdbc.Driver’； mysql8.0不需要使用ssl连接，因此需要设置手动设置useSSL=false； mysql返回的时间与实际不一样，需要设置在jdbc连接的url后面加上serverTimezone=GMT(即时区)。 因此应该这么写：1234 Class.forName("com.mysql.cj.jdbc.Driver");// Class.forName("com.mysql.jdbc.Driver"); conn = DriverManager.getConnection("jdbc:mysql://localhost/EXAMPLE?useSSL=false&amp;serverTimezone=GMT","root","password");// conn = DriverManager.getConnection("jdbc:mysql://localhost/EXAMPLE","root","password"); 注释里是之前的写法。]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[String&StringBuffer]]></title>
    <url>%2F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%2FJava%2FString-StringBuffer%2F</url>
    <content type="text"><![CDATA[String介绍 String是Java中很常见的类，是一个final修饰的不可变的数组，用来存放字符的容器。不可变是什么意思呢，意思是被赋值后就不能被改变了，如果再进行修改的话实质上是创建一个新对象，并将引用指向新对象，原来的对象被当做垃圾回收掉了。这是效率很低的。 用法1.求字符串某一位置字符 1char charAt(int index)//返回字符串中指定位置的字符；注意字符串中第一个字符索引是0，最后一个是length()-1。 1String str = new String("asdfzxc"); 2获取角标 1Int indexOf(char c) 例如： 1String s=”Java”; Int a=s.indexOf(a); 3判断 字符串是否包含某个字符串 1boolean contains(str)//判断源字符串是否包含str字符串并返回boolean值 例如：String str=”My love Java”; Boolean b=str.contains(love); 结果：true 字符串是否有内容 1boolean isEmpty() 例如：booleanb=str.isEmpty(); 字符串是否以指定内容开始 1boolean startsWith(str) 例如：booleanb=str.startsWith(“My”); 字符串是否以指定内容结束 1boolean endsWith(str); 用法如上 判断内容是否相同 1boolean equals(str) //String类重写了Object类中的equals方法，该方法用于判断字符串内容是否相同而非判断地址 例如: 12345String str1=”Java”;String str2=”love”;boolean s=str1.equals(str2); 判断内容是否相同，并忽略大小写 1Boolean equalsIngoreCase(str) 用法同上 4提取子串用String类的substring方法可以提取字符串中的子串，该方法有两种常用参数: public String substring(int beginIndex) //该方法从beginIndex位置起，从当前字符串中取出剩余的字符作为一个新的字符串返回。 public String substring(int beginIndex, int endIndex) //该方法从beginIndex位置起，从当前字符串中取出到endIndex-1位置的字符作为一个新的字符串返回 1231 String str1 = new String("asdfzxc");2 String str2 = str1.substring(2);//str2 = "dfzxc"3 String str3 = str1.substring(2,5);//str3 = "dfz" 5字符串比较 public int compareTo(StringanotherString) //该方法是对字符串内容按字典顺序进行大小比较，通过返回的整数值指明当前字符串与参数字符串的大小关系。若当前对象比参数大则返回正整数，反之返回负整数，相等返回0。 public int compareToIgnore(StringanotherString) //与compareTo方法相似，但忽略大小写。 public boolean equals(ObjectanotherObject) //比较当前字符串和参数字符串，在两个字符串相等的时候返回true，否则返回false。 6字符串中字符的大小写转换 public String toLowerCase() //返回将当前字符串中所有字符转换成小写后的新串 public String toUpperCase() //返回将当前字符串中所有字符转换成大写后的新串 1231 String str = new String("asDF");2 String str1 = str.toLowerCase();//str1 = "asdf"3 String str2 = str.toUpperCase();//str2 = "ASDF" 7字符串中字符的替换 public String replace(char oldChar, charnewChar) //用字符newChar替换当前字符串中所有的oldChar字符，并返回一个新的字符串。 public String replaceFirst(String regex,String replacement) //该方法用字符replacement的内容替换当前字符串中遇到的第一个和字符串regex相匹配的子串，应将新的字符串返回。 public String replaceAll(String regex,String replacement) //该方法用字符replacement的内容替换当前字符串中遇到的所有和字符串regex相匹配的子串，应将新的字符串返回。 1234567891 String str = "asdzxcasd";2 String str1 = str.replace('a','g');//str1 = "gsdzxcgsd"3 String str2 = str.replace("asd","fgh");//str2 = "fghzxcfgh"4 String str3 = str.replaceFirst("asd","fgh");//str3 = "fghzxcasd"5 String str4 = str.replaceAll("asd","fgh");//str4 = "fghzxcfgh"字符串分隔String[] split(String str)//将str作为分隔符进行字符串分解，分解后的字字符串在字符串数组中返回。1 String str = "asd!qwe|zxc#";2 String[] str1 = str.split("!|#");//str1[0] = "asd";str1[1] = "qwe";str1[2] = "zxc"; 8字符串与基本类型的转换 字符串转换为基本类型java.lang包中有Byte、Short、Integer、Float、Double类的调用方法: public static byte parseByte(String s) public static short parseShort(String s) public static short parseInt(String s) public static long parseLong(String s) public static float parseFloat(String s) public static double parseDouble(String s) 字符串基本类型时，如int short dobule字符串中的数据一定要是数字，否则会出现异常。 例如： 1231 int n = Integer.parseInt("12");2 float f = Float.parseFloat("12.34");3 double d = Double.parseDouble("1.124"); 9基本类型转换为字符串类型 String类中提供了String valueOf()放法，用作基本类型转换为字符串类型。 static String valueOf(char data[]) static String valueOf(char data[], intoffset, int count) static String valueOf(boolean b) static String valueOf(char c) static String valueOf(int i) static String valueOf(long l) static String valueOf(float f) static String valueOf(double d) 例如： 121 String s1 = String.valueOf(12);2 String s1 = String.valueOf(12.34); 10和数组有关的方法 返回类型 方法名 作用 byte[] getBytes() 将一个字符串转换成字节数组 String[] split(String) 将一个字符串按照指定内容劈开 char[] toCharArray() 将一个字符串转换成字符数组 11判断是否为空 public boolean isEmpty() 当且仅当 length()为 0 时返回 true。 String Buffer常用方法 public StringBuffer append(boolean b) 该方法的作用是追加内容到当前StringBuffer对象的末尾，类似于字符串的连接。调用该方法以后，StringBuffer对象的内容也发生改变， public StringBuffer deleteCharAt(int index) 该方法的作用是删除指定位置的字符，然后将剩余的内容形成新的字符串。 public StringBuffer deleteCharAt(int index) 该方法的作用是删除指定位置的字符，然后将剩余的内容形成新的字符串。 public StringBuffer insert(int offset, boolean b) 该方法的作用是在StringBuffer对象中插入内容，然后形成新的字符串。 public StringBuffer reverse() 该方法的作用是将StringBuffer对象中的内容反转，然后形成新的字符串。 public void setCharAt(int index, char ch) 该方法的作用是修改对象中索引值为index位置的字符为新的字符ch。]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java大数基本用法]]></title>
    <url>%2F%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%2FJava%2FJava%E5%A4%A7%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[最近学Java有接触到大数运算，感觉比用c++自己写个算法方便太多，在此记录下代码。java中用于操作大数的类主要有两个，一个是BigInteger，代表大整数类，用于对大整数进行操作；另一个是BigDecimal，代表高精度类，用于对比较大或精度比较高的浮点型数据进行操作。两个比较像。 基本用法1、新建一个值为123的大整数对象12BigInteger a=new BigInteger(“123”); //第一种，参数是字符串 BigInteger a=BigInteger.valueOf(123); //第二种，参数可以是int、long 2、大整数的四则运算1234a. add(b); //a,b均为BigInteger类型，加法 a.subtract(b); //减 法 a.divide(b); //除法 a.multiply(b); //乘法 3、大整数比较大小12a.equals(b); //如果a、b相等返回true否则返回false a.compareTo(b); //a小于b返回-1，等于返回0，大于返回1 4、常用方法1234a.mod(b); //求余 a.gcd(b); //求最大公约数 a.max(b); //求最大值 a.min(b); //求最小值 例子HDU1002 a+b 12345678910111213141516171819import java.util.*;import java.math.*;public class Main &#123; public static void main(String[] args) &#123; Scanner sc = new Scanner(System.in); int t = sc.nextInt(); BigInteger a, b, c; for( int i=1; i&lt;=t; i++ ) &#123; System.out.println("Case " + i + ":"); a = sc.nextBigInteger(); b = sc.nextBigInteger(); System.out.println(a + " + " + b + " = " + a.add(b)); if( i!=t ) &#123; System.out.println(); &#125; &#125; &#125; &#125;]]></content>
      <categories>
        <category>编程语言</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018CCPC-网络赛 1001 Buy and Resell]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%2F%E8%B4%AA%E5%BF%83%2F(HDU)2018CCPC-%E7%BD%91%E7%BB%9C%E8%B5%9B%201001%20Buy%20and%20Resell%2F</url>
    <content type="text"><![CDATA[Buy and Resell Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others)Total Submission(s): 2282 Accepted Submission(s): 359 Problem Description The Power Cube is used as a stash of Exotic Power. There are n cities numbered 1,2,…,n where allowed to trade it. The trading price of the Power Cube in the i-th city is ai dollars per cube. Noswal is a foxy businessman and wants to quietly make a fortune by buying and reselling Power Cubes. To avoid being discovered by the police, Noswal will go to the i-th city and choose exactly one of the following three options on the i-th day: spend ai dollars to buy a Power Cube resell a Power Cube and get ai dollars if he has at least one Power Cube do nothing Obviously, Noswal can own more than one Power Cubes at the same time. After going to the n cities, he will go back home and stay away from the cops. He wants to know the maximum profit he can earn. In the meanwhile, to lower the risks, he wants to minimize the times of trading (include buy and sell) to get the maximum profit. Noswal is a foxy and successful businessman so you can assume that he has infinity money at the beginning. Input There are multiple test cases. The first line of input contains a positive integer T (T≤250), indicating the number of test cases. For each test case:The first line has an integer n. (1≤n≤105)The second line has n integers a1,a2,…,an where ai means the trading price (buy or sell) of the Power Cube in the i-th city. (1≤ai≤109)It is guaranteed that the sum of all n is no more than 5×105. Output For each case, print one line with two integers —— the maximum profit and the minimum times of trading to get the maximum profit. Sample Input 341 2 10 959 5 9 10 522 1 Sample Output 16 45 20 0 题意有n个位置，每个位置有一个价格a[i]，按从1-n顺序经过每个位置，每个位置都可以进行三种操作之一且只能进行一次：1) 花a[i]元购买一个物品；2）卖掉一个手上的物品得到a[i]元； 3）什么也不做。假设金钱无限，初始没物品，身上可以装无限个物品，求走完所有城市后所能得到的最大利润和得到该最大利润所需的最少操作数。 题解低买高卖，此题可应用贪心的思想，每次遇到一个价格时，总是与前面的最低价进行“抵消”，这样利润最大。但是也许后面还有比这个价格更高的，所以需要“反悔”的机会，把错误时机卖出的损失挽回。因此优先队列（价格低标记值大先出队）代表已有物品，每到一个城市，先判断此地价格是不是比队列的最低价格高，是的话就可以将最低价格的物品卖掉了，再把差值加到利润上。然后最低价弹出，在队列里插入此地价格两个，分别以1和0标记（已经卖过一次，尚未卖过）。如此循环，假如后面有更高价想反悔，就把标记为1的错误卖出值弹出，队中标记为0的代表这个值现在是未被使用，可参与买卖。举个例子：样例中有“1 2 10 9”这个情况，首先花1元买物品，遇到2时我会把1给卖出，队里插入“2 1”“2 0”，利润为-1+2=1。后来又遇到10，2就属于贱卖当然不行，此时队里有两个2，让标记为1的出队，剩下的2的标记为0，代表没有被使用过，插入“10 1”“10 0”，此时利润值为1-2+10=9（跟1买10卖的利润是一样的）。下一个遇到9，此时队中最小为2，消之，利润计算为9-2+9=16。至于操作次数计算就简单了，只需要每次在标记为0的价格出队时总次数+2即可。以下为代码：12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;struct node&#123; int v, s; //v--价格，s--状态 node(int a, int b):v(a), s(b)&#123;&#125; //重载&lt;运算符，使优先队列让v小的先出队，v相同则s大的先出队 //优先队列默认把结构体按从大到小排序，重载&lt;运算符使其按照自定义顺序排序 bool operator&lt;(const node &amp;a) const&#123; if( v==a.v ) return s&lt;a.s; return v&gt;a.v; &#125;&#125;;int main() &#123; int t; while( t-- )&#123; int n; LL profit=0, cnt=0; scanf("%d", &amp;n); priority_queue&lt;node&gt; que; for( int i=0; i&lt;n; i++ )&#123; int c; scanf("%d", &amp;c); if( !que.empty() &amp;&amp; que.top().v&lt;c )&#123; node tmp=que.top(); profit=profit-tmp.v+c; if( tmp.s==0 ) cnt+=2; //当前最小值之前没有买过，次数加2(以最小值买，以最大值卖) que.pop(); que.push(node(c, 1)); que.push(node(c, 0)); &#125; else&#123; que.push(node(c, 0)); &#125; &#125; printf("%lld %lld\n", profit, cnt); &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>队列</tag>
        <tag>贪心</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(HDU)2018CCPC - 网络赛 1004 Find Integer]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%2F%E6%95%B0%E8%AE%BA%2F(HDU)2018CCPC-%E7%BD%91%E7%BB%9C%E8%B5%9B%201004%20Find%20Integer%2F</url>
    <content type="text"><![CDATA[Find Integer Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others)Total Submission(s): 0 Accepted Submission(s): 0Special Judge Problem Description people in USSS love math very much, and there is a famous math problem .give you two integers n,a,you are required to find 2 integers b,c such that an+bn=cn. Input one line contains one integer T;(1≤T≤1000000)next T lines contains two integers n,a;(0≤n≤1000,000,000,3≤a≤40000) Output print two integers b,c if b,c exits;(1≤b,c≤1000,000,000);else print two integers -1 -1 instead. Sample Input 1 2 3 Sample Output 4 5 题解本题给出一个费马大定理的表达式 —— $a^n+b^n=c^n,(a,b,c) \in Z$。 题目意思是给定该公式中的a和n，求满足公式的b和c并输出，若不存在满足公式的b和c，则输出”-1 -1”。所以当n&gt;2或n==0时输出”-1 -1”；当n=1时输出满足方程的第一组解：1 a+1；当n=2时输出勾股数。求勾股数：这种前n项固定的情况一般可以采用打表法。三层循环肯定是不行的，这么大数据量肯定tle。$a^2=c^2-b^2=(c+b)(c-b)$。令$x=c+b,y=c-b$，于是$a^2=xy$。从x着手，当满足a2可以整除x时就可以求出符合条件的b，c。代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longstruct node&#123; ll b,c;&#125;gg[40007];void init()&#123; memset(gg, 0, sizeof(gg)); for( ll i=3; i&lt;=40000; i++ )&#123; for( ll j=1; j&lt;i; j++ )&#123; if( i*i%j==0 )&#123; //若a^2可以整除(c+b),则此式成立 ll x = j; ll y = i*i/j; if( (y-x)%2==0 )&#123; //若b为整数,则c也是整数 gg[i].c=(x+y)/2; gg[i].b=(y-x)/2; break; &#125; &#125; &#125; &#125;&#125;int main()&#123; init(); int t; scanf("%d", &amp;t); while( t-- )&#123; ll a, n; scanf("%lld%lld", &amp;n, &amp;a); if( n&gt;2 || n==0 )&#123; printf("-1 -1\n"); continue; &#125; else if( n==1 )&#123; printf("1 %lld\n", a+1); continue; &#125; else&#123; if( gg[a].b )&#123; printf("%lld %lld\n", gg[a].b, gg[a].c); &#125; else printf("-1 -1\n"); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>算法</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>C/C++</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT L2-019. 悄悄关注]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2FSTL%2FPAT%20L2-019%20%E6%82%84%E6%82%84%E5%85%B3%E6%B3%A8%2F</url>
    <content type="text"><![CDATA[一道水题 题目 新浪微博上有个“悄悄关注”，一个用户悄悄关注的人，不出现在这个用户的关注列表上，但系统会推送其悄悄关注的人发表的微博给该用户。现在我们来做一回网络侦探，根据某人的关注列表和其对其他用户的点赞情况，扒出有可能被其悄悄关注的人。 输入格式： 输入首先在第一行给出某用户的关注列表，格式如下： 人数N 用户1 用户2 …… 用户N 其中N是不超过5000的正整数，每个“用户i”（i=1, …, N）是被其关注的用户的ID，是长度为4位的由数字和英文字母组成的字符串，各项间以空格分隔。 之后给出该用户点赞的信息：首先给出一个不超过10000的正整数M，随后M行，每行给出一个被其点赞的用户ID和对该用户的点赞次数（不超过1000），以空格分隔。注意：用户ID是一个用户的唯一身份标识。题目保证在关注列表中没有重复用户，在点赞信息中也没有重复用户。 输出格式： 我们认为被该用户点赞次数大于其点赞平均数、且不在其关注列表上的人，很可能是其悄悄关注的人。根据这个假设，请你按用户ID字母序的升序输出可能是其悄悄关注的人，每行1个ID。如果其实并没有这样的人，则输出“Bing Mei You”。 输入样例1： 10 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao8Magi 50Pota 30LLao 3Ammy 48Dave 15GAO3 31Zoro 1Cath 60 输出样例1： AmmyCathPota 输入样例2： 11 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao Pota7Magi 50Pota 30LLao 48Ammy 3Dave 15GAO3 31Zoro 29 输出样例2： Bing Mei You 题目比较简单，就是找出点赞数大于均值且名字不在关注列表里的人，排个序就好了。总结下： 用set存储元素时自动升序排序。set存储字符串用string； 存储数组一般开大些，’\0’会占位。如存储4个字母数组不能只开char[4]。 以下为代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;typedef struct &#123; char name[10]; int num;&#125;zan; //点赞信息zan a[10010];int main()&#123; set&lt;string&gt; men; //存储关注列表 set&lt;string&gt; se; //存储悄悄关注的人 set&lt;string&gt;::iterator it; int n; cin &gt;&gt;n; for( int i=0; i&lt;n; i++ )&#123; string s; cin &gt;&gt;s; men.insert(s); &#125; int m; double sum = 0; cin &gt;&gt;m; for( int i=0; i&lt;m; i++ )&#123; cin &gt;&gt;a[i].name &gt;&gt;a[i].num; sum += a[i].num; &#125; sum /= (m*1.0);//寻找符合条件的人 for( int i=0; i&lt;m; i++ )&#123; if( a[i].num &gt; sum )&#123; if( men.count(a[i].name) == 0 )&#123; se.insert(a[i].name); &#125; &#125; &#125; //结果列表空则输出没有，有则遍历输出 if( se.size() == 0 )&#123; printf("Bing Mei You\n"); &#125; else&#123; for( it=se.begin(); it!=se.end(); it++ )&#123; cout &lt;&lt;*it &lt;&lt;endl; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>数据结构</category>
        <category>STL</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>数据结构</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello]]></title>
    <url>%2Funcategorized%2Fhello%2F</url>
    <content type="text"><![CDATA[Hello 嗯…花费了大概一天的时间才搭好这个基于Github+Hexo的博客，对于啥经验都没有的我来说，已经很满足了。参考了不少网上大佬的教程，遇到了很多百度也没有解答的问题(比如git bash不识别nodejs…)，但在完成后看到首页的瞬间还是很有成就感的。为什么要建博客呢，原因无外乎那几种，但最主要的还是想有个属于自己的地方，存放一些文章，记录学习、生活的历程，起个日记本的作用。 那么，就从今天开始吧。]]></content>
  </entry>
</search>
