<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2018CCPC-网络赛 1001 Buy and Resell]]></title>
    <url>%2FACM%2F%E8%B4%AA%E5%BF%83%2F(HDU)2018CCPC-%E7%BD%91%E7%BB%9C%E8%B5%9B%201001%20Buy%20and%20Resell%2F</url>
    <content type="text"><![CDATA[Buy and Resell Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others)Total Submission(s): 2282 Accepted Submission(s): 359 Problem Description The Power Cube is used as a stash of Exotic Power. There are n cities numbered 1,2,…,n where allowed to trade it. The trading price of the Power Cube in the i-th city is ai dollars per cube. Noswal is a foxy businessman and wants to quietly make a fortune by buying and reselling Power Cubes. To avoid being discovered by the police, Noswal will go to the i-th city and choose exactly one of the following three options on the i-th day: spend ai dollars to buy a Power Cube resell a Power Cube and get ai dollars if he has at least one Power Cube do nothing Obviously, Noswal can own more than one Power Cubes at the same time. After going to the n cities, he will go back home and stay away from the cops. He wants to know the maximum profit he can earn. In the meanwhile, to lower the risks, he wants to minimize the times of trading (include buy and sell) to get the maximum profit. Noswal is a foxy and successful businessman so you can assume that he has infinity money at the beginning. Input There are multiple test cases. The first line of input contains a positive integer T (T≤250), indicating the number of test cases. For each test case:The first line has an integer n. (1≤n≤105)The second line has n integers a1,a2,…,an where ai means the trading price (buy or sell) of the Power Cube in the i-th city. (1≤ai≤109)It is guaranteed that the sum of all n is no more than 5×105. Output For each case, print one line with two integers —— the maximum profit and the minimum times of trading to get the maximum profit. Sample Input 341 2 10 959 5 9 10 522 1 Sample Output 16 45 20 0 题意有n个位置，每个位置有一个价格a[i]，按从1-n顺序经过每个位置，每个位置都可以进行三种操作之一且只能进行一次：1) 花a[i]元购买一个物品；2）卖掉一个手上的物品得到a[i]元； 3）什么也不做。假设金钱无限，初始没物品，身上可以装无限个物品，求走完所有城市后所能得到的最大利润和得到该最大利润所需的最少操作数。 题解低买高卖，此题可应用贪心的思想，每次遇到一个价格时，总是与前面的最低价进行“抵消”，这样利润最大。但是也许后面还有比这个价格更高的，所以需要“反悔”的机会，把错误时机卖出的损失挽回。因此优先队列（价格低标记值大先出队）代表已有物品，每到一个城市，先判断此地价格是不是比队列的最低价格高，是的话就可以将最低价格的物品卖掉了，再把差值加到利润上。然后最低价弹出，在队列里插入此地价格两个，分别以1和0标记（已经卖过一次，尚未卖过）。如此循环，假如后面有更高价想反悔，就把标记为1的错误卖出值弹出，队中标记为0的代表这个值现在是未被使用，可参与买卖。举个例子：样例中有“1 2 10 9”这个情况，首先花1元买物品，遇到2时我会把1给卖出，队里插入“2 1”“2 0”，利润为-1+2=1。后来又遇到10，2就属于贱卖当然不行，此时队里有两个2，让标记为1的出队，剩下的2的标记为0，代表没有被使用过，插入“10 1”“10 0”，此时利润值为1-2+10=9（跟1买10卖的利润是一样的）。下一个遇到9，此时队中最小为2，消之，利润计算为9-2+9=16。至于操作次数计算就简单了，只需要每次在标记为0的价格出队时总次数+2即可。以下为代码：12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long LL;struct node&#123; int v, s; //v--价格，s--状态 node(int a, int b):v(a), s(b)&#123;&#125; //重载&lt;运算符，使优先队列让v小的先出队，v相同则s大的先出队 //优先队列默认把结构体按从大到小排序，重载&lt;运算符使其按照自定义顺序排序 bool operator&lt;(const node &amp;a) const&#123; if( v==a.v ) return s&lt;a.s; return v&gt;a.v; &#125;&#125;;int main() &#123; int t; while( t-- )&#123; int n; LL profit=0, cnt=0; scanf("%d", &amp;n); priority_queue&lt;node&gt; que; for( int i=0; i&lt;n; i++ )&#123; int c; scanf("%d", &amp;c); if( !que.empty() &amp;&amp; que.top().v&lt;c )&#123; node tmp=que.top(); profit=profit-tmp.v+c; if( tmp.s==0 ) cnt+=2; //当前最小值之前没有买过，次数加2(以最小值买，以最大值卖) que.pop(); que.push(node(c, 1)); que.push(node(c, 0)); &#125; else&#123; que.push(node(c, 0)); &#125; &#125; printf("%lld %lld\n", profit, cnt); &#125; return 0;&#125;]]></content>
      <categories>
        <category>ACM</category>
        <category>贪心</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>队列</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(HDU)2018CCPC - 网络赛 1004 Find Integer]]></title>
    <url>%2FACM%2F%E6%95%B0%E8%AE%BA%2F(HDU)2018CCPC-%E7%BD%91%E7%BB%9C%E8%B5%9B%201004%20Find%20Integer%2F</url>
    <content type="text"><![CDATA[Find Integer Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others)Total Submission(s): 0 Accepted Submission(s): 0Special Judge Problem Description people in USSS love math very much, and there is a famous math problem .give you two integers n,a,you are required to find 2 integers b,c such that an+bn=cn. Input one line contains one integer T;(1≤T≤1000000)next T lines contains two integers n,a;(0≤n≤1000,000,000,3≤a≤40000) Output print two integers b,c if b,c exits;(1≤b,c≤1000,000,000);else print two integers -1 -1 instead. Sample Input 1 2 3 Sample Output 4 5 题解本题给出一个费马大定理的表达式 —— $a^n+b^n=c^n,(a,b,c) \in Z$。 题目意思是给定该公式中的a和n，求满足公式的b和c并输出，若不存在满足公式的b和c，则输出”-1 -1”。所以当n&gt;2或n==0时输出”-1 -1”；当n=1时输出满足方程的第一组解：1 a+1；当n=2时输出勾股数。求勾股数：这种前n项固定的情况一般可以采用打表法。三层循环肯定是不行的，这么大数据量肯定tle。$a^2=c^2-b^2=(c+b)(c-b)$。令$x=c+b,y=c-b$，于是$a^2=xy$。从x着手，当满足a2可以整除x时就可以求出符合条件的b，c。代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longstruct node&#123; ll b,c;&#125;gg[40007];void init()&#123; memset(gg, 0, sizeof(gg)); for( ll i=3; i&lt;=40000; i++ )&#123; for( ll j=1; j&lt;i; j++ )&#123; if( i*i%j==0 )&#123; //若a^2可以整除(c+b),则此式成立 ll x = j; ll y = i*i/j; if( (y-x)%2==0 )&#123; //若b为整数,则c也是整数 gg[i].c=(x+y)/2; gg[i].b=(y-x)/2; break; &#125; &#125; &#125; &#125;&#125;int main()&#123; init(); int t; scanf(&quot;%d&quot;, &amp;t); while( t-- )&#123; ll a, n; scanf(&quot;%lld%lld&quot;, &amp;n, &amp;a); if( n&gt;2 || n==0 )&#123; printf(&quot;-1 -1\n&quot;); continue; &#125; else if( n==1 )&#123; printf(&quot;1 %lld\n&quot;, a+1); continue; &#125; else&#123; if( gg[a].b )&#123; printf(&quot;%lld %lld\n&quot;, gg[a].b, gg[a].c); &#125; else printf(&quot;-1 -1\n&quot;); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>ACM</category>
        <category>数论</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT L2-019. 悄悄关注]]></title>
    <url>%2FACM%2FSTL%2FPAT%20L2-019%20%E6%82%84%E6%82%84%E5%85%B3%E6%B3%A8%2F</url>
    <content type="text"><![CDATA[一道水题 题目 新浪微博上有个“悄悄关注”，一个用户悄悄关注的人，不出现在这个用户的关注列表上，但系统会推送其悄悄关注的人发表的微博给该用户。现在我们来做一回网络侦探，根据某人的关注列表和其对其他用户的点赞情况，扒出有可能被其悄悄关注的人。 输入格式： 输入首先在第一行给出某用户的关注列表，格式如下： 人数N 用户1 用户2 …… 用户N 其中N是不超过5000的正整数，每个“用户i”（i=1, …, N）是被其关注的用户的ID，是长度为4位的由数字和英文字母组成的字符串，各项间以空格分隔。 之后给出该用户点赞的信息：首先给出一个不超过10000的正整数M，随后M行，每行给出一个被其点赞的用户ID和对该用户的点赞次数（不超过1000），以空格分隔。注意：用户ID是一个用户的唯一身份标识。题目保证在关注列表中没有重复用户，在点赞信息中也没有重复用户。 输出格式： 我们认为被该用户点赞次数大于其点赞平均数、且不在其关注列表上的人，很可能是其悄悄关注的人。根据这个假设，请你按用户ID字母序的升序输出可能是其悄悄关注的人，每行1个ID。如果其实并没有这样的人，则输出“Bing Mei You”。 输入样例1： 10 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao8Magi 50Pota 30LLao 3Ammy 48Dave 15GAO3 31Zoro 1Cath 60 输出样例1： AmmyCathPota 输入样例2： 11 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao Pota7Magi 50Pota 30LLao 48Ammy 3Dave 15GAO3 31Zoro 29 输出样例2： Bing Mei You 题目比较简单，就是找出点赞数大于均值且名字不在关注列表里的人，排个序就好了。总结下： 用set存储元素时自动升序排序。set存储字符串用string； 存储数组一般开大些，’\0’会占位。如存储4个字母数组不能只开char[4]。 以下为代码:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;iostream&gt;#include &lt;set&gt;using namespace std;typedef struct &#123; char name[10]; int num;&#125;zan; //点赞信息zan a[10010];int main()&#123; set&lt;string&gt; men; //存储关注列表 set&lt;string&gt; se; //存储悄悄关注的人 set&lt;string&gt;::iterator it; int n; cin &gt;&gt;n; for( int i=0; i&lt;n; i++ )&#123; string s; cin &gt;&gt;s; men.insert(s); &#125; int m; double sum = 0; cin &gt;&gt;m; for( int i=0; i&lt;m; i++ )&#123; cin &gt;&gt;a[i].name &gt;&gt;a[i].num; sum += a[i].num; &#125; sum /= (m*1.0);//寻找符合条件的人 for( int i=0; i&lt;m; i++ )&#123; if( a[i].num &gt; sum )&#123; if( men.count(a[i].name) == 0 )&#123; se.insert(a[i].name); &#125; &#125; &#125; //结果列表空则输出没有，有则遍历输出 if( se.size() == 0 )&#123; printf("Bing Mei You\n"); &#125; else&#123; for( it=se.begin(); it!=se.end(); it++ )&#123; cout &lt;&lt;*it &lt;&lt;endl; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>ACM</category>
        <category>STL</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>STL</tag>
        <tag>C/C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello]]></title>
    <url>%2Funcategorized%2Fhello%2F</url>
    <content type="text"><![CDATA[Hello 嗯…花费了大概一天的时间才搭好这个基于Github+Hexo的博客，对于啥经验都没有的我来说，已经很满足了。参考了不少网上大佬的教程，遇到了很多百度也没有解答的问题(比如git bash不识别nodejs…)，但在完成后看到首页的瞬间还是很有成就感的。为什么要建博客呢，原因无外乎那几种，但最主要的还是想有个属于自己的地方，存放一些文章，记录学习、生活的历程，起个日记本的作用。 那么，就从今天开始吧。]]></content>
  </entry>
</search>
