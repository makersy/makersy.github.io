<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>TCP流量控制与拥塞控制原理分析</title>
      <link href="/%E7%BD%91%E7%BB%9C/TCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>/%E7%BD%91%E7%BB%9C/TCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h3 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h3><h4 id="使用滑动窗口进行流量控制"><a href="#使用滑动窗口进行流量控制" class="headerlink" title="使用滑动窗口进行流量控制"></a>使用滑动窗口进行流量控制</h4><p>所谓的流量控制，就是让<strong>发送方的发送速率不要太快，让接收方来得及接收</strong>。利用滑动窗口机制可以很方便的在TCP连接上实现对发送方的流量控制。</p><a id="more"></a><p>如图说明了如何利用滑动窗口机制进行流量控制。</p><p><img src="https://img-blog.csdnimg.cn/20190508203505829.jpg" alt="在这里插入图片描述"></p><p>设主机A向主机B发送数据。假设B发送给A的rwnd (receiver window，窗口值) 是400，<strong>发送方的发送窗口不能超过接收方给出的接收窗口的数值</strong>。TCP的窗口单位是字节，不是报文段，请注意。</p><p>再设每一个报文段为100字节长，序号的初始值为seq=1。注意图中的大写ACK表示首部中的确认位ACK，小写ack表示确认字段的值。</p><p>接收方的主机B进行了三次流量控制。第一次把窗口设置为rwnd=300，第二次减小到rwnd=100，最后减到rwnd=0，即不允许发送方再发送数据了。这种使发送方暂停发送的状态将持续到主机B重新发出一个新的窗口值为止。另外B向A发送的三个报文段都设置ACK=1，可以看出只有在ACK=1时确认号字段才有意义。</p><p>假如，B向A发送了零窗口的报文段后不久，B的接收缓存又有了一些存储空间。于是B向A发送了rwnd=400的报文段，然而这个报文段在传送中丢失了。A一直等待收到B发送的非零窗口的通知，而B也一直等待A发送的数据。这样就死锁了。</p><p>为了解决这种死锁状态，TCP为每个连接设有一个<strong>持续计时器</strong>。只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器，若持续计时器设置的时间到期，就发送一个零窗口<strong>探测报文段</strong>（仅携带1字节的数据），而对方就在确认这个探测报文段时给出了现在的窗口值。如果窗口仍然是零，那么收到这个报文段的一方重设持续计时器；如果窗口不是零，那么死锁就不会发生了。</p><p><strong>注意</strong>：即使是零窗口，也必须接收这几个报文段：零窗口探测报文段、确认报文段和携带紧急数据的报文段。因此上述的零窗口探测报文段也是可以被接收到的。</p><h4 id="TCP报文段发送时机的控制"><a href="#TCP报文段发送时机的控制" class="headerlink" title="TCP报文段发送时机的控制"></a>TCP报文段发送时机的控制</h4><p>控制TCP报文的发送时机主要有以下几种机制。<br>1）TCP维持一个变量，它等于最大报文段长度MSS，只要缓存中存放的数据达到MSS字节就组装成一个TCP报文段发送出去。<br>2）由发送方的应用程序指明要求发送报文段，即TCP支持的<strong>推送</strong>(push)操作<br>3）发送方的一个计时器期限到了，这时就把当前已有的缓存数据装入报文段（长度不超过MSS）发送出去。</p><h5 id="Nagle算法"><a href="#Nagle算法" class="headerlink" title="Nagle算法"></a>Nagle算法</h5><p>在TCP实现中广泛使用Nagle算法。算法是这样的：若发送应用进程把要发送的数据逐个字节地送到TCP的发送缓存，也就是说数据从进程到发送缓存是挤牙膏似的一点点的发送，那么就先把第一个字节发出去，等发送方收到对第一个数据字符的确认后，把数据积攒成一个大的数据块（报文段）发送出去，继续对随后到达的数据进行缓存。发送方每次只有收到接受方对前一个报文段的确认后才发送下一个报文段。</p><p>当数据到达较快而网络速率较慢时，用这样的方式可以明显的减少所用的网络带宽。</p><p>该算法还规定，当到达的数据已达到发送窗口大小的一般或已达到报文段的最大长度时，就立即发送一个报文段，这样做可以有效地提高网络的吞吐量。（吞吐量：单位时间从网络从网络输出的分组数目）</p><p>总体来说，目的是使得在发送方不发送很小的报文段的同时，接受方也不要在缓存刚刚有了一点小的空间就急忙把这个很小的窗口大小信息发送给对方。</p><h3 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h3><h4 id="拥塞控制的原理"><a href="#拥塞控制的原理" class="headerlink" title="拥塞控制的原理"></a>拥塞控制的原理</h4><h6 id="拥塞控制的产生"><a href="#拥塞控制的产生" class="headerlink" title="拥塞控制的产生"></a>拥塞控制的产生</h6><p>在某段时间，若对网络中的某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变差，这种情况叫做<strong>拥塞</strong>。也就是说：<br>$$ \sum对资源的需求 &gt; 可用资源 $$</p><p>网络拥塞往往是由许多因素引起的，简单的提高节点处理机的运算速度，或者扩大结点缓存的存储空间，在很多时候并不能解决拥塞问题。例如<br>1）当某个结点缓存容量扩展到非常大，于是凡到达该结点的分组均可在结点的缓存队列中排队，不受任何限制。由于输出链路的容量和处理机的速度并未提高，因此在这队列中的绝大多数的分组在排队等待时间会大大增加，结果上层软件只好把他们进行重传（因为已超时）。</p><p>因此，问题的实质往往是整个系统的各个部分不匹配，只有各个部分平衡了，问题才会得到解决。</p><h6 id="拥塞控制和流量控制的不同"><a href="#拥塞控制和流量控制的不同" class="headerlink" title="拥塞控制和流量控制的不同"></a>拥塞控制和流量控制的不同</h6><p>所谓<strong>拥塞控制</strong>就是<strong>防止过多的数据注入到网络中</strong>，<strong>这样可以使网络中的路由器或链路不致过载</strong>。拥塞控制所要做的都有一个前提，就是<strong>网络能承受现有的网络负荷</strong>。它是一个<strong>全局性</strong>的过程，涉及到所有的主机、所有的服务器，以及与降低网络传输性能有关的所有因素。<br>相反，<strong>流量控制往往指的是点对点通信量的控制</strong>，是个<strong>端到端</strong>的问题。流量控制所要做的就是控制发送端发送数据的速率，以便使接收端来得及接受。</p><h6 id="拥塞控制设计"><a href="#拥塞控制设计" class="headerlink" title="拥塞控制设计"></a>拥塞控制设计</h6><p>拥塞控制是很难设计的，因为它是一个动态的问题，许多情况下，甚至正是<strong>拥塞控制机制本身</strong>成为引起网络性能恶化甚至死锁的原因。从控制理论的角度来看拥塞控制这个问题，可以分为开环控制和闭环控制两种方法。开环控制就是在设计网络时事先将有关拥塞发生的所有因素考虑周到，一旦系统运行起来就不能在中途改正。<br>闭环控制是基于反馈环路的概念，包括如下措施：<br>1）监测网路系统以便检测拥塞在何时何地发生<br>2）把拥塞发生的信息传送到可采取行动的地方<br>3）调整网络系统的行动以解决出现的问题。</p><h4 id="拥塞控制方法"><a href="#拥塞控制方法" class="headerlink" title="拥塞控制方法"></a>拥塞控制方法</h4><p>因特网建议标准RFC2581定义了进行拥塞控制的四种算法，即慢开始（Slow-start)、拥塞避免（Congestion Avoidance)、快重传（Fast Retransmit）和快恢复（Fast Recovery）。我们假定：<br>1）数据是单方向传送，对方只传送确认报文。<br>2）接收方总是有足够大的缓存空间，因而发送窗口的大小由网络的拥塞程度来决定。</p><h5 id="1-慢开始和拥塞避免"><a href="#1-慢开始和拥塞避免" class="headerlink" title="1. 慢开始和拥塞避免"></a>1. 慢开始和拥塞避免</h5><p>发送报文段速率的确定，既要根据接收端的接收能力，又要从全局考虑不要使网络发生拥塞，这由接收窗口和拥塞窗口两个状态量确定。<br>接收端窗口（Reciver Window)又称通知窗口（Advertised Window)，是接收端根据目前的接收缓存大小所许诺的最新窗口值，是来自接收端的流量控制。<br><strong>拥塞窗口</strong> cwnd（Congestion Window）由发送端维持，是发送端根据自己估计的网络拥塞程度而设置的窗口值（发送窗口=拥塞窗口），是来自发送端的流量控制。</p><p><strong>慢开始算法</strong>：<br>1）当主机开始发送数据时，如果立即将较大的发送窗口的全部数据字节都注入到网络中，那么由于不清楚网络的情况，有可能引起网络拥塞<br>2）比较好的方法是试探一下，即<strong>从小到达逐渐增大发送窗口，也就是由小到大逐渐增大拥塞控制窗口</strong>。可以这么理解，每经过一个传输轮次，拥塞窗口cwnd就加倍。一个传输轮次意思是：把拥塞窗口cwnd所允许发送的报文段都连续发送出去，并收到了对已发送的最后一个字节的确认。由此可以看出：<strong>慢开始算法的拥塞窗口的增长速度是指数级的</strong>。<br>3）通常在刚刚开始发送报文段时可先将拥塞窗口cwnd设置为一个最大报文段的MSS的数值。在每收到一个对新报文段确认后，将拥塞窗口增加至多一个MSS的数值，当rwind足够大的时候，为了防止拥塞窗口cwind的增长引起网络拥塞，还需要另外一个变量–慢开始门限ssthresh<br>用法：</p><blockquote><p>cwnd &lt; ssthresh 时，使用慢开始算法；<br>cwnd &gt; ssthresh 时，停止使用慢开始算法而改用拥塞避免算法；<br>cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞避免算法。</p></blockquote><p><strong>拥塞避免算法</strong>：<br>1）TCP连接初始化，将拥塞窗口设置为1<br>2）执行<strong>慢开始算法</strong>，cwind按<strong>指数规律</strong>增长，直到cwind == ssthress开始执行<strong>拥塞避免算法</strong>，cwnd按<strong>线性规律</strong>增长<br>3）当网络发生拥塞，把ssthresh值更新为拥塞前ssthresh值的一半，cwnd重新设置为1，按照步骤（2）执行。</p><h5 id="2-快重传和快恢复"><a href="#2-快重传和快恢复" class="headerlink" title="2. 快重传和快恢复"></a>2. 快重传和快恢复</h5><p>一条TCP连接有时会因等待重传计时器的超时而空闲较长的时间，慢开始和拥塞避免无法很好的解决这类问题，因此提出了快重传和快恢复的拥塞控制方法。</p><h6 id="快重传算法"><a href="#快重传算法" class="headerlink" title="快重传算法"></a>快重传算法</h6><p>首先要说明快重传算法的目的是让发送方<strong>尽早知道发生了个别报文段的丢失</strong>。快重传算法首先要求接收方不要等待自己发送数据时才进行捎带确认，而是要<strong>立即发送确认</strong>。即使收到了失序的报文段也要立即发出<strong>对已经收到的报文段的重复确认</strong>。如果当发送端接收到三个重复的确认ACK时，则断定分组丢失，立即重传丢失的报文段，而不必等待重传计时器超时。</p><p>慢开始算法只是在TCP建立时才使用。</p><h6 id="快恢复算法"><a href="#快恢复算法" class="headerlink" title="快恢复算法"></a>快恢复算法</h6><p>1）当发送方连续收到三个重复ACK时，就执行 <strong>“乘法减小”</strong> 算法，<strong>把慢开始门限设置为拥塞窗口的一半</strong>，这是为了预防网络发生拥塞<br>2）由于发送方现在认为网络很可能没有发生拥塞，因此现在不执行慢开始算法，而是把<strong>cwnd值设置为慢开始门限减半后的值</strong>，然后开始执行<strong>拥塞避免算法</strong>，拥塞窗口<strong>线性增大</strong>。</p><p>由此总结：在拥塞避免阶段，拥塞窗口是按照线性规律增大的，这常称为加法增大AI(Additice Increase)。而一旦出现超时或3个重复的确认，就要把门限值设置为当前拥塞窗口值的一半，并大大减小拥塞窗口的数值，这常称为“乘法减小”MD(Multiplication Decrease)。二者合在一起就是所谓的AIMD算法。</p><p><strong>题外话</strong>：<br>在我看到快恢复算法的时候，产生了这样一个疑问：仅仅是丢失了一个报文段，为什么需要降低门限值、拥塞窗口值，而不是按照当前的进度、速度继续传呢？</p><p>经过反复看书思考，我得出的结论是：丢失了一个报文段意味着即将发生拥塞，但是当前还没有拥塞。为了避免发送方错误地开启慢开始算法，拥塞窗口cwnd的值又设置为1，进而降低传输效率，于是采用快恢复算法调整门限值，使用拥塞避免算法来尽可能规避拥塞，达到兼顾效率和拥塞控制的目的。<br>不知道想的对不对。</p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>传输控制协议TCP概述</title>
      <link href="/%E7%BD%91%E7%BB%9C/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AETCP%E6%A6%82%E8%BF%B0/"/>
      <url>/%E7%BD%91%E7%BB%9C/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AETCP%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>最近在看《计算机网络》这本书，感觉写的挺好的。现在学到了TCP部分，我对TCP部分做了笔记，记录了一些重点，也记录了一些自己的想法，在此分享。<br><a id="more"></a></p><hr><h3 id="TCP最主要的特点"><a href="#TCP最主要的特点" class="headerlink" title="TCP最主要的特点"></a>TCP最主要的特点</h3><ol><li>TCP是面向连接的<strong>运输层</strong>协议。</li><li>每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的。</li><li>TCP提供可靠交付的服务。无差错、不丢失、不重复，并且按序到达。</li><li>TCP提供全双工通信。TCP允许双方的应用进程在任何时候都能发送数据。TCP连接的两端都设有发送缓存和接受缓存，用来临时存放双向通信的数据。在发送时，应用程序在把数据传送给TCP缓存后，就可以做自己的事，而TCP在合适的时候把数据发送出去。在接收时，TCP把收到的数据放入缓存，上层的应用进程在合适的时候读取缓存中的数据。</li><li>TCP是面向字节流的。这点不像UDP那样面向报文，对应用层交下来的报文 “既不合并，也不拆分” 。TCP只是把它们都看作是一连串<strong>无结构的字节流</strong>，并不了解所传送的字节流的含义，接收时的数据块跟发送时数据块数量可能不一样，但是总数据不会缺失。例如可能发送方应用程序交个发送方TCP有10个数据块，但接收方TCP可能只用了5个数据块就把收到的字节流交付上层的应用程序，虽然总共的字节流是一样的。将字节流还原成有意义的数据的任务，就交给应用层来完成。</li></ol><h3 id="套接字socket"><a href="#套接字socket" class="headerlink" title="套接字socket"></a>套接字socket</h3><p>TCP把<strong>连接</strong>作为最基本的抽象。</p><p>TCP连接的端点叫做套接字(socket)或插口。根据RFC 793的定义：端口号<u>拼接到</u>IP地址即构成了套接字。因此，套接字的表示方法是在点分十进制的IP地址后面写上端口号，中间用冒号或逗号隔开。即：</p><blockquote><p>套接字socket  = (IP地址 : 端口号)</p></blockquote><p>每一条TCP连接唯一的被通信两端的两个端点（即两个套接字）所确定。即：</p><blockquote><p>TCP连接 ::= {socket1, socket2} = {IP1:port1}, {IP2:port2}</p></blockquote><p>需要注意的是，同一个名词socket可能有不同的意思，此处的socket仅仅是TCP连接的端点。</p><h3 id="TCP报文段的首部格式"><a href="#TCP报文段的首部格式" class="headerlink" title="TCP报文段的首部格式"></a>TCP报文段的首部格式</h3><p><img src="https://img-blog.csdnimg.cn/20190508191114793.jpg" alt="在这里插入图片描述"><br>如图为TCP报文段的首部格式。</p><p>首部固定部分各字段意义如下：</p><p>1）<strong>源端口</strong>和<strong>目的端口</strong><br>各占2个字节，分别写入源端口和目的端口。</p><p>2） <strong>序号</strong><br>占4字节。序号范围是[0，2<sup>32</sup> - 1]，共2<sup>32</sup>（即4294967296）个序号。序号增加到2<sup>32</sup>-1后，下一个序号就又回到0。也就是说，序号使用mod 2<sup>32</sup>运算。TCP是面向字节流的。在一个TCP连接中传送的字节流中的每一个字节都按顺序编号。整个要传送的字节流的起始序号必须在连接建立时设置。首部中的序号字段值则是指的是本报文段所发送的数据的第一个字节的序号。例如，一报文段的序号是301，而接待的数据共有100字节。这就表明：本报文段的数据的第一个字节的序号是301，最后一个字节的序号是400。显然，下一个报文段（如果还有的话）的数据序号应当从401开始，即下一个报文段的序号字段值应为401。这个字段的序号也叫“报文段序号”。</p><p>3） <strong>确认号</strong><br>占4字节，是期望收到对方下一个报文段的第一个数据字节的序号。例如，B正确收到了A发送过来的一个报文段，其序号字段值是501，而数据长度是200字节（序号501~700），这表明B正确收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701。注意，现在确认号不是501，也不是700，而是701。</p><p>总之：<font color="red">若确认号 = N，则表明：到序号N-1为止的所有数据都已正确收到。</font></p><p>4） <strong>数据偏移</strong><br>占4位，它指出TCP报文段的数据起始处距离TCP报文段的起始处有多远。这个字段实际上是指出TCP报文段的首部长度。由于首部中还有长度不确定的选项字段，因此数据偏移字段是必要的，但应注意，“数据偏移”的单位是32位字（即以4字节的字为计算单位）。由于4位二进制数能表示的最大十进制数字是15，因此数据偏移的最大值是60字节，这也是TCP首部的最大字节（即选项长度不能超过40字节）。</p><p>5） <strong>保留</strong><br>占6位，保留为今后使用，但目前应置为0 。<br>下面有6个控制位，用来说明本报文段的性质。</p><p>6） <strong>紧急URG（URGent）</strong><br>当URG=1时，表明紧急指针字段有效。它告诉系统此报文段中有紧急数据，应尽快发送（相当于高优先级的数据），而不要按原来的排队顺序来传送。例如，已经发送了很长的一个程序要在远地的主机上运行。但后来发现了一些问题，需要取消该程序的运行，因此用户从键盘发出中断命令。如果不使用紧急数据，那么这两个字符将存储在接收TCP的缓存末尾。只有在所有的数据被处理完毕后这两个字符才被交付接收方的应用进程。这样做就浪费了很多时间。</p><p>当URG置为1时，发送应用进程就告诉发送方的TCP有紧急数据要传送。于是发送方TCP就把紧急数据插入到本报文段数据的最前面，而在紧急数据后面的数据仍然是普通数据。这时要与首部中紧急指针（Urgent Pointer）字段配合使用。</p><p>7） <strong>确认ACK</strong>（ACKnowledgment）<br>仅当ACK = 1时确认号字段才有效，当ACK = 0时确认号无效。TCP规定，在连接建立后所有的传送的报文段都必须把ACK置为1。</p><p>8） <strong>推送 PSH</strong>（PuSH）<br>当两个应用进程进行交互式的通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应。在这种情况下，TCP就可以使用推送（push）操作。这时，发送方TCP把PSH置为1，并立即创建一个报文段发送出去。接收方TCP收到PSH=1的报文段，就尽快地（即“推送”向前）交付接收应用进程。而不用再等到整个缓存都填满了后再向上交付。</p><p>9） <strong>复位RST</strong>（ReSeT）<br>当RST=1时，表名TCP连接中出现了严重错误（如由于主机崩溃或其他原因），必须释放连接，然后再重新建立传输连接。RST置为1还用来拒绝一个非法的报文段或拒绝打开一个连接。</p><p>10） <strong>同步SYN</strong>（SYNchronization）<br>在连接建立时用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文段。对方若同意建立连接，则应在响应的报文段中使SYN=1和ACK=1，因此SYN置为1就表示这是一个连接请求或连接接受报文。</p><p>11） <strong>终止FIN</strong>（FINis，意思是“完”、“终”）<br>用来释放一个连接。当FIN=1时，表明此报文段的发送发的数据已发送完毕，并要求释放运输连接。</p><p>12） <strong>窗口</strong><br>占2字节。窗口值是[0，2<sup>16</sup>-1]之间的整数。窗口指的是发送本报文段的一方的<strong>接受窗口</strong>（而不是自己的发送窗口）。窗口值告诉对方：从本报文段首部中的确认号算起，接收方目前允许对方发送的数据量（以字节为单位）。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。总之，<strong>窗口值被视为接收方让发送方设置其发送窗口的依据</strong>。</p><p>例如，发送了一个报文段，其确认号是701，窗口字段是1000.这就是告诉对方：“从701算起，我（即发送方报文段的一方）的接收缓存空间还可接受1000个字节数据（字节序号是701~1700），你在给我发数据时，必须考虑到这一点。”</p><p>总之：<font color="red">窗口字段明确指出了现在允许对方发送的数据量。窗口值经常在动态变化。</font></p><p>13） <strong>检验和</strong><br>占2字节。检验和字段检验的范围包括首部和数据这两部分。和UDP用户数据报一样，在计算检验和时，要在TCP报文段的前面加上12字节的伪首部。伪首部的格式和UDP用户数据报的伪首部一样。但应把伪首部第4个字段中的17改为6（TCP的协议号是6）；把第5字段中的UDP中的长度改为TCP长度。接收方收到此报文段后，仍要加上这个伪首部来计算检验和。若使用IPv6,则相应的伪首部也要改变。</p><p>14） <strong>紧急指针</strong><br>占2字节。紧急指针仅在URG=1时才有意义，它指出本报文段中的紧急数据的字节数（紧急数据结束后就是普通数据） 。因此，在紧急指针指出了紧急数据的末尾在报文段中的位置。当所有紧急数据都处理完时，TCP就告诉应用程序恢复到正常操作。值得注意的是，即使窗口为0时也可以发送紧急数据。</p><p>15） <strong>选项</strong><br>长度可变，最长可达40字节。当没有使用“选项”时，TCP的首部长度是20字节。</p><p>TCP最初只规定了一种选项，即最大报文段长度MSS（Maximum Segment Size）。注意MSS这个名词含义。MSS是<strong>每一个</strong> TCP报文段中的<strong>数据字段的最大长度</strong>。数据字段加上TCP首部才等于整个的TCP报文段。所以MSS并不是整个TCP报文段的最大长度，而是“TCP报文段长度减去TCP首部长度”。</p><p>为什么要规定一个最大报文长度MSS呢？这并不是考虑接受方的接收缓存可能存放不下TCP报文段中的数据。实际上，MSS与接收窗口值没有关系。我们知道，TCP报文段的数据部分，至少要加上40字节的首部（TCP首部20字节和IP首部20字节，这里还没有考虑首部中的可选部分）才能组装成一个IP数据报。若选择较小的MSS长度，网络的利用率就降低。设想在极端情况下，当TCP报文段只含有1字节的数据时，在IP层传输的数据报的开销至少有40字节（包括TCP报文段的首部和IP数据报的首部）。这样，对网络的利用率就不会超过1/41。到了数据链路层还要加上一些开销。但反过来，若TCP报文段非常长，那么在IP层传输时就有可能要分解成多个短数据报片。在终点要把收到的各个短数据报片组成成原来的TCP报文段，当传输出错时还要进行重传，这些也都会使开销增大。</p><p>因此，MSS应尽可能大些，只要在IP层传输时不需要分片就行。由于IP数据报所经历的路径是动态变化的，因此在这条路径上确定的不需要的分片的MSS，如果改走另一条路径就可能需要进行分片。因此最佳的MSS是很难确定的。在连接过程中，双方都把自己能够支持的MSS写入这一字段，以后就按照这个数值传输数据，两个传送方向可以有不同的MSS值。若主机未填写这一项，则MSS的默认值是536字节长。因此，所有在互联网上的主机都应该接受的报文段长度是536+20（固定首部长度）=556字节。</p><p>后来又增加了几个选项如<strong>窗口扩大选项</strong>、<strong>时间戳选项</strong>、<strong>选择确认选项</strong>等。</p><p>窗口扩大选项是为了扩大窗口。我们知道，TCP首部中窗口字段长度是16位，因此最大的窗口大小为64K字节。虽然这对早期的网络是足够用的，但对于包含卫星信道的网络，传播时延和宽带都很大，要获得高吞吐量需要更大的窗口大小。</p><p>窗口扩大选项占3字节，其中有一个字节表示移位值S。新的窗口值等于TCP首部中的窗口位数从16增大到（16+S）。移位值允许使用的最大值是14，相当于窗口最大值增大到2<sup>(16+14)</sup>-1=2<sup>30</sup>-1。<br>窗口扩大选项可以在双方初始建立TCP连接时进行协商。如果连接的某一端实现了窗口扩大，当它不再需要扩大其窗口时，可发送S=0选项，使窗口大小回到16。</p><p>时间戳选项占10字节，其中最主要的字段是时间戳字段（4字节）和时间戳回送回答字段（4字节）。时间戳选项有以下两个概念：</p><p>第一、 用来计算往返时间<strong>RTT</strong>。发送方在发送报文段时把当前时钟的时间值放入时间戳字段，接收方在确认该报文段时把时间戳字段复制到时间戳回送回答字段。因此，发送方在收到确认报文后，可以准确地计算出RTT来。</p><p>第二、 用于处理TCP序号超过 2<sup>32</sup> 的情况，这又称为防止序号绕回PAWS。我们知道，TCP报文段的序号只有32位，而每增加 2<sup>32</sup>个序号就会重复使用原来用过的序号。当使用高速网络时，在一次TCP连接的数据传送中序号很可能被重复使用。例如，当使用1.5Mbit/s的速度发送报文段时，序号重复要6小时以上。但若用2.5Gbit/s的速率发送报文段，则不到14秒钟序号就会重复。为了使接收方能够把新的报文段和迟到很久的报文段区分开，则可以在报文段中加上这种时间戳。</p><h3 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h3><p>TCP发送的报文段是交给IP层传送的，但IP层只能提供尽最大努力交付，也就是说，TCP下面的网络提供的是不可靠的传输。因此TCP必须采取适当的措施才能使得两个运输层之间的通信变得可靠。为此就有下面的协议。</p><h4 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h4><ul><li><p>无差错情况</p><p> A发送分组给B，发完暂停发送，等待B的确认。B收到了就向A发送确认，A在收到了B的确认后，就再发送下一个分组。</p></li><li><p>出现差错情况</p><p> B在接收时出了差错，就丢弃掉出错部分，或许分组在传输中丢失掉了，这时B不会发送任何信息。可靠传输协议设计为：A只要超过了一段时间仍然没有收到确认，就认为刚才发送的分组丢了，因而重传前面发送过的分组。这叫做超时重传。要实现超时重传，就要在每发送完一个分组时设置一个<strong>超时计时器</strong>。如果在超时计时器到期之前收到了对方的确认，就撤销已设置的超时计时器。</p><p>  应注意：</p><ul><li>A在发送完一个分组后，必须暂时保留已发送分组的副本（在发生超时重传时使用）。只有在收到相应的确认后才能清楚暂时保留的分组副本；</li><li>分组和确认分组必须编号。如此才能明确是哪一个发送出去的分组收到了确认，而哪一个分组还没有收到确认；</li><li>超时计数器设置的重传时间应当比数据在分组传输的平均往返时间更长一些。</li></ul></li><li><p>确认丢失和确认迟到</p><ul><li><p>确认丢失<br>A在设定的超时重传时间内没有收到确认，并无法知道是自己发送的分组出错、丢失，或者是B发送的确认丢失了。因此A在超时计时器到期后就要重传分组。此时B又收到了A发来的重复分组，这时应采取两个行动：<br>第一，丢弃这个重复的分组，不用向上交付；<br>第二，向A发送确认。</p><ul><li>确认迟到<br>B对分组的确认迟到了，A会收到重复的确认，对重复的确认的处理是：收下后就丢弃。B同样要丢弃重复的分组，并重传确认分组。</li></ul></li></ul></li></ul><p>A最终总会收到对所有发出的分组的确认。如果A不断重传分组但总是收不到确认，就说明通信线路太差，不能进行通信。</p><p>向上述的确认和重传机制，我们就可以<strong>在不可靠的传输网络上实现可靠的通信</strong>。像上述的这种可靠传输协议常称为<strong>自动重传请求ARQ</strong>(Automatic Repeat Request)。意思是重传的请求是自动进行的。接受方不需要请求发送方重传某个出错的分组。</p><p>为了提高传输效率，发送方可以不使用低效率的停止等待协议，而是采用<strong>流水线传输</strong>。流水线传输就是发送方可连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认。这样可使信道上一直有数据不间断的传送。</p><p>当使用流水线传输，就要使用下面的<strong>连续ARQ协议</strong>和<strong>滑动窗口协议</strong>。</p><h4 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h4><p>发送方维持一个<strong>发送窗口</strong>，一次把窗口内所有分组全部发送出去，不必收到确认后再发送下一个。每收到一个确认，发送窗口就往前移动一个分组。</p><p>接受方一般是<strong>累计确认</strong>的方式。在收到几个分组后，<strong>对按序到达的最后一个分组发送确认</strong>，表示到这个分组为止的所有分组都已经正确收到了。</p><p>累计确认的优点是：容易实现，即使确认丢失也不用重传；</p><p>缺点是：不能向发送方反映出接收方已经正确接收到的<strong>所有分组</strong>的信息。例如，如果一共发送了5个分组，由于某些原因第3个分组丢失了，这时接收方只能发送到第2个分组的确认信息，发送方无法得知后三个分组是否送达，于是只好把这三个重传一次，称为 <strong>Go-back-N（回退N）</strong>。可见当通信质量不好的时候，会出现重传很多次的情况，带来不好的影响。</p><h4 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a>滑动窗口协议</h4><p>TCP的滑动窗口协议以字节为单位。若假定A收到了B发来的确认报文段，其中窗口是20字节，确认号是31（这表明B期望收到的下一个序号为31，而序号30为止的数据已经收到了）。根据这两个数据，A构造出自己的发送窗口，即从31到50的窗口。</p><p>发送窗口是什么？它表示，在未收到B的确认的情况下，A可以连续把窗口内的数据发送出去。凡是已经发送过的数据，在未收到确认之前都必须暂时保留，以便在超时重传时使用。</p><p>假设缓存窗口序号是从左到右依次增大的，那么左边设为窗口后沿，右边为窗口前沿，那么窗口后沿后边的部分表示已发送且已确认，前沿前边的部分表示不允许发送，因为接受方窗口不包括这里，没有生成对此的缓存。 </p><p>发送窗口的位置由窗口前沿和后沿共同确认。其<strong>后沿</strong>变化有两种情况，即不动（没有收到新的确认）和前移（收到了新的确认）。后沿不可能向后端移动，因为后沿之后的数据均已经被确认过了。<strong>前沿</strong>一般是不断向前移动的，但也有可能不动，比如：一种是没有收到新的确认，对方通知的窗口大小不变；第二种是收到了新的确认，同时对方通知的窗口也缩小了，恰好保持前沿不动。前沿也有可能向后收缩（对方通知的窗口缩小了），但是TCP标准不推荐这么做，前面发送过，再进行取消，会产生一些错误。</p><p>发送窗口始终进行“发送-接收确认-调整窗口-发送“的过程。但是存在一些特殊情况，如：A发送窗口所有数据都发送给了B，B也返回了确认，但是所有确认都滞留在网络中。A没有收到确认一段时间后，就只好重传这些数据，即超时重传，直到收到B的确认为止。</p><h3 id="TCP的流量控制与拥塞控制"><a href="#TCP的流量控制与拥塞控制" class="headerlink" title="TCP的流量控制与拥塞控制"></a>TCP的流量控制与拥塞控制</h3><p>可以参考我的另一篇文章：<a href="https://blog.csdn.net/makersy/article/details/89972088" target="_blank" rel="noopener">TCP流量控制与拥塞控制原理分析</a></p><h3 id="TCP的连接与连接释放"><a href="#TCP的连接与连接释放" class="headerlink" title="TCP的连接与连接释放"></a>TCP的连接与连接释放</h3><p>可以参考我的另一篇文章：<a href="https://blog.csdn.net/makersy/article/details/88586049" target="_blank" rel="noopener">TCP知识点总结</a></p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于TCP的学习总结</title>
      <link href="/%E7%BD%91%E7%BB%9C/TCP%E3%80%81UDP%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/%E7%BD%91%E7%BB%9C/TCP%E3%80%81UDP%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h3 id="1、TCP和UDP的区别"><a href="#1、TCP和UDP的区别" class="headerlink" title="1、TCP和UDP的区别"></a>1、TCP和UDP的区别</h3><p>（1）TCP面向连接，UDP无连接；<br>（2）TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证；<br>（3）TCP传输速度慢；UDP速度快<br>（4）每一条TCP连接只能是点到点的；UDP支持一对一，一对多，多对一和多对多的交互通信<br>（5）TCP对系统资源要求较多，UDP对系统资源要求较少。<br>（6）TCP的逻辑通信信道是全双工的可靠信道，UDP是不可靠信道。<br>（7）UDP没有拥塞机制，因此网络出现拥塞不会使源主机的发送速率降低。<br>（8）TCP首部开销20字节；UDP的首部开销小，只有8个字节；<br>（9）UDP面向报文。</p><a id="more"></a><ul><li><strong>什么时候应该使用TCP</strong>： 当对网络通讯质量有要求的时候，比如：整个数据要准确无误的传递给对方，这往往用于一些要求可靠的应用，比如HTTP、HTTPS、FTP等传输文件的协议，POP、SMTP等邮件传输的协议。 在日常生活中，常见使用TCP协议的应用如下： <strong>浏览器，用的HTTP； FlashFXP，用的FTP； Outlook，用的POP、SMTP； Putty，用的Telnet、SSH； QQ文件传输</strong> …</li><li><strong>什么时候应该使用UDP</strong>： 当对网络通讯质量要求不高的时候，要求网络通讯速度能尽量的快，这时就可以使用UDP。 比如，日常生活中，常见使用UDP协议的应用如下： QQ语音 QQ视频…<br>有些应用场景对可靠性要求不高会用到UDP，比如长视频，要求速率  </li></ul><h3 id="2、TCP三次握手四次挥手"><a href="#2、TCP三次握手四次挥手" class="headerlink" title="2、TCP三次握手四次挥手"></a>2、TCP三次握手四次挥手</h3><h4 id="2-1-建立连接协议（三次握手）"><a href="#2-1-建立连接协议（三次握手）" class="headerlink" title="2.1 建立连接协议（三次握手）"></a>2.1 建立连接协议（三次握手）</h4><p>（1）客户端发送一个带SYN标志位、seq的TCP报文到server。这是三次握手过程中的报文1。此时client进入<em>SYN_SEND</em>状态。<br>（2） server端回应client的报文，是三次握手中的第2个报文。这个报文同时带ACK（确认字符）标志、SYN标志、ack（=收到来自客户端的seq+1）、seq（server自己的）。因此它表示对刚才client SYN报文的回应。此时server进入<em>SYN_RECV</em>状态。<br>（3） 客户必须再次回应服务段一个包括ACK、ack（=来自server的seq+1）、seq（第一次握手的seq+1）的报文，这是报文段3。此时双方进入<em>ESTABLISHED</em>状态。<br>名词解释：</p><ul><li>序列号seq：占4个字节，用来标记数据段的顺序，TCP把连接中发送的所有数据字节都编上一个序号，第一个字节的编号由本地随机产生；给字节编上序号后，就给每一个报文段指派一个序号；序列号seq就是这个报文段中的<strong>第一个</strong>字节的数据编号。  </li><li>确认号ack：占4个字节，期待收到对方下一个报文段的第一个数据字节的序号；序列号表示报文段携带数据的第一个字节的编号；而确认号指的是期望接收到下一个字节的编号；因此当前报文段<strong>最后</strong>一个字节的编号+1即为确认号。  </li><li>SYN：属于一个标志位，为1时代表这是一个连接请求（当ACK=0）或连接接受响应（当ACK=1）报文；SYN这个标志位只有在TCP建立连接时才会被置1，握手完成后SYN标志位被置0。  </li><li>ACK：只在响应中出现。占1位，仅当ACK=1时，ack才有效。ACK=0时，ack无效。  </li></ul><h4 id="2-2-连接终止协议（四次挥手）"><a href="#2-2-连接终止协议（四次挥手）" class="headerlink" title="2.2 连接终止协议（四次挥手）"></a>2.2 连接终止协议（四次挥手）</h4><p>因为TCP连接是全双工的，因此每一个方向都必须单独进行关闭。这原则是当一方完毕它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个FIN仅仅意味着这一方向上没有数据流动。一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将运行主动关闭。而还有一方运行被动关闭。<br>流程：<br>　（1） 主机1发送FIN和seq。请求关闭主机1到主机2的数据传送（报文段4）。此时状态变化： 1：FIN_WAIT1<br>　（2） 主机2收到这个FIN。它发回一个ACK、ack（收到的seq加1）、seq（报文段5）。<br>这一步代表主机2同意关闭连接，但连接并没有关闭，因为主机2可能还有数据没发完，为此需要等待。此时状态变化：2：CLOSE_WAIT | 1：FIN_WAIT2<br>　（3） 主机2发完剩余数据，准备关闭与主机1的连接，并发送一个FIN给主机1（报文段6）。进入LAST-ACK（最后确认）状态。如果没收到主机1的回复，会进行超时重传的。<br>　（4） 主机1收到主机2回复，知道它的数据发送完了。于是发回ACK报文确认收到，告诉主机2你可以关了。并将ack设置为收到序号加1（报文段7）。这样一来主机2收到后就安心关闭连接了。此时状态变化： 1：TIME_WAIT | 2：CLOSED。<br>　这样四次挥手就完成了。不过别忘了，主机1还在TIME_WAIT状态。他需要等待2MSL的时间，如果在这段时间又收到来自主机2的FIN+ACK报文（报文段6），就会再发送ACK报文回去，直至过了2MSL且再无回音，就关掉。所谓的2MSL是两倍的MSL(Maximum Segment Lifetime)。MSL指任何IP数据报能够在因特网上存活的最长时间，2MSL就是一个发送和一个回复所需的最大时间。<br><img src="https://images0.cnblogs.com/i/273314/201403/092149483783253.png" alt=""><br>　<br>名词解释：</p><ul><li>FIN：用来释放一个连接。FIN=1表示：此报文段的发送方的数据已经发送完毕，并要求释放运输连接</li></ul><h3 id="3-一些常见的问题"><a href="#3-一些常见的问题" class="headerlink" title="3. 一些常见的问题"></a>3. 一些常见的问题</h3><ol><li><strong>为什么要进行time wait，为什么要等2MSL？</strong><br>为了保证A发送的最后一个ACK报文能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认。没收到确认的话，B是会超时重传这个FIN+ACK报文段的，而A就能在2MSL时间内收到这个重传的FIN+ACK报文段。如果A在TIME-WAIT状态不等待一段时间，而是在发送完ACK报文段后就立即释放连接，就无法收到B重传的FIN+ACK报文段，因而也不会再发送一次确认报文段。这样，B就无法按照正常的步骤进入CLOSED状态。 </li><li><strong>为什么连接的时候是三次握手，关闭的时候却是四次握手？</strong><br>因为当Server端收到Client端的SYN连接请求报文后，可以直接发送<strong>SYN+ACK</strong>报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，可能还有数据要传，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，是不能一起发送的。故需要四步握手。</li><li><strong>为什么要三次握手？</strong><br>不行。因为握手是为了确认双方收发功能均正常，进而确认可以同步序列号。第一次client -&gt; server，server可以确认client发是好的；第二次server -&gt; client，client可以确认自己收发是好的，对方收发也是好的；第三次client -&gt; server，server可以确认自己收发是好的，对方也是。<br>为什么可以这么确认？是因为这收发之间都存在着校验。第一次server收到client的连接请求，推测其可能要发起连接，于是按规定返回了client要求的ack（收到的seq+1），并且发了自己的seq，看对方是不是真想连接；第三次client收到并返回的过程类似第二步。如此，就完成了对接。<br><font color="red">为了实现可靠数据传输， TCP 协议的通信双方， 都必须<u>维护一个序列号</u>， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤。<br>如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认。<font></font></font></li></ol>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP协议基础</title>
      <link href="/%E7%BD%91%E7%BB%9C/HTTP%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/"/>
      <url>/%E7%BD%91%E7%BB%9C/HTTP%E5%8D%8F%E8%AE%AE%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h3 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h3><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写。HTTP协议工作于客户端-服务端架构之上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器在接收到的请求后，向客户端发送响应信息。<br><a id="more"></a></p><h3 id="HTTP特点"><a href="#HTTP特点" class="headerlink" title="HTTP特点"></a>HTTP特点</h3><ul><li>无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 </li><li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须<strong>重传</strong>，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。 </li><li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。</li><li>灵活：HTTP允许传输<strong>任意类型</strong>的数据对象。传输的类型由<em>Content-Type</em>加以标记。<h3 id="常用的请求方法"><a href="#常用的请求方法" class="headerlink" title="常用的请求方法"></a>常用的请求方法</h3></li><li>GET: 向指定的资源请求数据。</li><li>POST: 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和或已有资源的修改。</li><li>HEAD: 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</li><li>PUT: 从客户端向服务器传送的数据取代指定的文档的内容。</li><li>DELETE: 请求服务器删除指定的页面。</li></ul><p>post和get的区别：都包含请求头请求行，post相比之下多了请求body。get多用来查询，请求参数放在url中，不会对服务器上的内容产生作用。post用来提交，如把账号密码放入body中。GET是直接添加到URL后面的，直接就可以在URL中看到内容，而POST是放在报文内部的，用户无法直接看到。GET提交的数据长度是有限制的，因为URL长度有限制，具体的长度限制视浏览器而定。而POST没有。</p><h3 id="报文构成"><a href="#报文构成" class="headerlink" title="报文构成"></a>报文构成</h3><h5 id="请求报文构成"><a href="#请求报文构成" class="headerlink" title="请求报文构成"></a>请求报文构成</h5><p>http请求由<strong>请求行</strong>（request line）、<strong>请求头部</strong>（header）、<strong>空行</strong>和<strong>请求数据</strong>构成。<br><strong>请求行</strong>以请求方法开头，后面跟着请求的<strong>URL</strong>和<strong>协议的版本</strong>，均以空格分开。</p><h5 id="响应报文构成"><a href="#响应报文构成" class="headerlink" title="响应报文构成"></a>响应报文构成</h5><p>HTTP响应也由<strong>状态行</strong>、<strong>消息报头</strong>、<strong>空行</strong>和<strong>响应正文</strong>构成。<br><img src="http://www.runoob.com/wp-content/uploads/2013/11/2012072810301161.png" alt="http响应"> </p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>响应状态码：访问一个网页时，浏览器会向web服务器发出请求。此网页所在的服务器会返回一个包含HTTP状态码的信息头用以响应浏览器的请求。</p><h5 id="状态码分类"><a href="#状态码分类" class="headerlink" title="状态码分类"></a>状态码分类</h5><p>以下是状态码的分类。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1XX- 信息型，服务器收到请求，需要请求者继续操作。</span><br><span class="line">2XX- 成功型，请求成功收到，理解并处理。</span><br><span class="line">3XX - 重定向，需要进一步的操作以完成请求。</span><br><span class="line">4XX - 客户端错误，请求包含语法错误或无法完成请求。</span><br><span class="line">5XX - 服务器错误，服务器在处理请求的过程中发生了错误。</span><br></pre></td></tr></table></figure></p><h5 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">200 - OK  客户端请求成功</span><br><span class="line">301 - 资源（网页等）被永久转移到其它URL</span><br><span class="line">302 - 临时跳转</span><br><span class="line">400 Bad Request - 客户端请求有语法错误，不能被服务器所理解</span><br><span class="line">401 Unauthorized - 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用</span><br><span class="line">404 - 请求资源不存在，可能是输入了错误的URL</span><br><span class="line">500 - 服务器内部发生了不可预期的错误</span><br><span class="line">503 Server Unavailable - 服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</span><br></pre></td></tr></table></figure><h3 id="客户端浏览器如何解析HTML内容"><a href="#客户端浏览器如何解析HTML内容" class="headerlink" title="客户端浏览器如何解析HTML内容"></a>客户端浏览器如何解析HTML内容</h3><p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。<br>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：<br>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;<br>2、解析出 IP 地址后，若有端口号则解析出端口号，无则根据该 IP 地址和默认端口 80，和服务器建立TCP连接;<br>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;<br>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;<br>5、释放 TCP连接;<br>6、浏览器将该 html 文本并显示内容。</p><h3 id="几个概念"><a href="#几个概念" class="headerlink" title="几个概念"></a>几个概念</h3><p><strong>DNS</strong><br>域名解析服务。将主机名转换为IP地址。<br><strong>端口号</strong><br><a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 8080就是端口号。HTTP的URL中没有端口号时，可以假设默认端口号时80。有了IP地址和端口号，客户端就可以很方便地通过TCP/IP进行通信了。<br><strong>代理</strong><br>代理是位于客户端和服务器之间的HTTP中间实体。接收所有客户端的HTTP请求，并将这些请求转发给服务器（可能会对请求进行修改之后转发）。<br><strong>缓存</strong><br>缓存HTTP的仓库，使常用页面的副本可以保存在离客户端更近的地方。<br><strong>隧道</strong><br>隧道是建立起来之后，就会在两条连接之间对原始数据进行盲转发的HTTP应用程序。常见用途是通过HTTP连接承载加密的安全套接字层（SSL）流量，这样SSL流量就可以穿过只允许Web流量通过的防火墙了。</p><h3 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h3><p>HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。<br>HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。<br>HTTPS和HTTP的区别主要如下：<br>1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。<br>2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。<br>3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。<br>4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p><p>参考文章：<br><a href="https://blog.csdn.net/weixin_41835916/article/details/81590826" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41835916/article/details/81590826</a> </p>]]></content>
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常见七大排序的Java实现</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%9A%84Java%E5%AE%9E%E7%8E%B0(%E6%8F%92%E5%85%A5+%E5%B8%8C%E5%B0%94+%E5%86%92%E6%B3%A1+%E5%BF%AB%E9%80%9F+%E9%80%89%E6%8B%A9+%E5%BD%92%E5%B9%B6)/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%9A%84Java%E5%AE%9E%E7%8E%B0(%E6%8F%92%E5%85%A5+%E5%B8%8C%E5%B0%94+%E5%86%92%E6%B3%A1+%E5%BF%AB%E9%80%9F+%E9%80%89%E6%8B%A9+%E5%BD%92%E5%B9%B6)/</url>
      <content type="html"><![CDATA[<p>之前学习C语言时学过各类基础排序，现在用Java来再回顾一遍。这一篇主要是写一下规范的代码。</p><a id="more"></a><h4 id="一、排序相关的基本概念"><a href="#一、排序相关的基本概念" class="headerlink" title="一、排序相关的基本概念"></a>一、排序相关的基本概念</h4><p>  排序其实是一个相当大的概念，主要分为两类：内部排序和外部排序。而我们通常所说的各种排序算法其实指的是内部排序算法。内部排序是基于内存的，整个排序过程都是在内存中完成的，而外部排序指的是由于数据量太大，内存不能完全容纳，排序的时候需要借助外存才能完成（常常是某一部分已经计算过的数据移出内存让另一部分未被计算的数据进入内存）。而本篇文章将主要介绍内部排序中的几种常用排序算法：<br><img src="https://img-blog.csdnimg.cn/20190403193941184.png" alt="在这里插入图片描述"><br>为了测试方便，我定义了生成随机数组的Const类和打印输出的print函数。Const类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Const</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a.length; i++ )&#123;</span><br><span class="line">            a[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、插入类排序"><a href="#二、插入类排序" class="headerlink" title="二、插入类排序"></a>二、插入类排序</h4><h5 id="1-直接插入"><a href="#1-直接插入" class="headerlink" title="1.直接插入"></a>1.直接插入</h5><p>插入类排序算法的核心思想是，在一个有序的集合中，我们将当前值插入到适合位置上，使得插入结束之后整个集合依然是有序的。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i, j, key;</span><br><span class="line">        <span class="keyword">for</span>( i=<span class="number">1</span>; i&lt;array.length; i++ )&#123;</span><br><span class="line">            key = array[i];</span><br><span class="line">            j = i - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//取当前位置值，与已经排序好的那一部分由大到小进行比较，将其挪到正确的位置</span></span><br><span class="line">            <span class="keyword">while</span> ( j&gt;=<span class="number">0</span> &amp;&amp; key&lt;array[j] )&#123;</span><br><span class="line">                array[j+<span class="number">1</span>] = array[j];</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            array[j+<span class="number">1</span>] = key;<span class="comment">//在正确的位置插入key值</span></span><br><span class="line">        &#125;</span><br><span class="line">        print(array);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h5 id="2、二分插入"><a href="#2、二分插入" class="headerlink" title="2、二分插入"></a>2、二分插入</h5><p>原理是二分查找到合适位置再进行插入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二分插入排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">halfInsertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;array.length; i++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> mid, low, high, key;</span><br><span class="line">            low = <span class="number">0</span>;  high = i-<span class="number">1</span>;</span><br><span class="line">            key = array[i];</span><br><span class="line">            <span class="comment">//这个循环之后，要插入的地方为low</span></span><br><span class="line">            <span class="keyword">while</span> ( low&lt;=high )&#123;</span><br><span class="line">                mid = (low+high)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>( key==array[mid] )&#123;</span><br><span class="line">                    low = mid;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>( key&gt;array[mid] )&#123;</span><br><span class="line">                    low = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    high = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将已排序部分low之后的都向后移动一位</span></span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> k=i-<span class="number">1</span>; k&gt;=low; k-- )&#123;</span><br><span class="line">                array[k+<span class="number">1</span>] = array[k];</span><br><span class="line">            &#125;</span><br><span class="line">            array[low] = key;</span><br><span class="line">        &#125;</span><br><span class="line">        print(array);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h5 id="3、希尔排序"><a href="#3、希尔排序" class="headerlink" title="3、希尔排序"></a>3、希尔排序</h5><p>希尔排序算法使用一个距离增量来切分子序列，使每个子序列都有序。当距离增量变小的时候，序列的个数也会变少，但是这些子序列的内部都基本有序，当对他们进行直接插入排序的时候会使得效率变高。一旦距离增量减少为1，那么子序列的个数也将减少为1，也就是我们的原序列，而此时的序列内部基本有序，最后执行一次直接插入排序完成整个排序操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 希尔排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = array.length;</span><br><span class="line">        <span class="keyword">int</span> step = len/<span class="number">2</span>;<span class="comment">//步长</span></span><br><span class="line">        <span class="keyword">while</span>( step&gt;<span class="number">0</span> )&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i=step; i&lt;len; i++ )&#123;</span><br><span class="line">                <span class="keyword">int</span> j = i;</span><br><span class="line">                <span class="comment">//while循环 --对由步长分成的各数组进行直接插入排序</span></span><br><span class="line">                <span class="keyword">while</span> ( j&gt;=step &amp;&amp; array[j]&lt;array[j-step] )&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = array[j];</span><br><span class="line">                    array[j] = array[j-step];</span><br><span class="line">                    array[j-step] = temp;</span><br><span class="line">                    j -= step;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            step /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        print(array);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="三、交换类排序"><a href="#三、交换类排序" class="headerlink" title="三、交换类排序"></a>三、交换类排序</h4><h5 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h5><p>冒泡排序通过两两比较，每次将最大或者最小的元素移动到整个序列的一端。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//每次将最大的放到最后，需要进行length-1次</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.length-<span class="number">1</span>; i++ )&#123;</span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j=<span class="number">1</span>; j&lt;array.length-<span class="number">1</span>-i; j++ )&#123;</span><br><span class="line">                <span class="keyword">if</span>( array[j]&lt;array[j-<span class="number">1</span>] )&#123;</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j-<span class="number">1</span>];</span><br><span class="line">                    array[j-<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print(array);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h5 id="2、快速排序"><a href="#2、快速排序" class="headerlink" title="2、快速排序"></a>2、快速排序</h5><p>快速排序的基本思想是，从序列中任选一个元素，但通常会直接选择序列的第一个元素作为一个标准，所有比该元素值小的元素全部移动到他的左边，比他大的都移动到他的右边。该排序算法是目前为止，内部排序中效率最高的排序算法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> high = array.length-<span class="number">1</span>;</span><br><span class="line">        qSort(array, low, high);</span><br><span class="line">        print(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">qSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( low&lt;high )&#123;</span><br><span class="line">            <span class="keyword">int</span> pos = oneQuickSort(array, low, high);</span><br><span class="line">            qSort(array, low, pos-<span class="number">1</span>);</span><br><span class="line">            qSort(array, pos+<span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">oneQuickSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> key = array[low];</span><br><span class="line">        <span class="keyword">while</span> ( low&lt;high )&#123;</span><br><span class="line">            <span class="keyword">while</span> ( low&lt;high &amp;&amp; array[high]&gt;=key )&#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            array[low] = array[high];</span><br><span class="line">            <span class="keyword">while</span> ( low&lt;high &amp;&amp; array[low]&lt;=key )&#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            array[high] = array[low];</span><br><span class="line">        &#125;</span><br><span class="line">        array[low] = key;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="四、选择类排序"><a href="#四、选择类排序" class="headerlink" title="四、选择类排序"></a>四、选择类排序</h4><p>选择类排序的基本思想是，每一趟会在n个元素中比较n-1次，选择出最大或者最小的一个元素放在整个序列的端点处。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接选择排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.length; i++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> minIdx = i; <span class="comment">//记录最小值的位置</span></span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;array.length; j++ )&#123;</span><br><span class="line">                <span class="keyword">if</span>( array[j]&lt;array[minIdx] )&#123;</span><br><span class="line">                    minIdx = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( minIdx!=i )&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = array[i];</span><br><span class="line">                array[i] = array[minIdx];</span><br><span class="line">                array[minIdx] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        print(array);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="五、归并类排序算法"><a href="#五、归并类排序算法" class="headerlink" title="五、归并类排序算法"></a>五、归并类排序算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 归并排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = array.length;</span><br><span class="line">        <span class="keyword">int</span>[] arrayTemp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        mSort(array, <span class="number">0</span>, len-<span class="number">1</span>, arrayTemp);</span><br><span class="line">        print(array);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span>[] arrayTemp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( low &lt; high ) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = low + (high-low)/<span class="number">2</span>;  <span class="comment">//分界</span></span><br><span class="line">            mSort(array, low, mid, arrayTemp);</span><br><span class="line">            mSort(array, mid+<span class="number">1</span>, high, arrayTemp);</span><br><span class="line">            mergeTwoArray(array, low, mid, high, arrayTemp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeTwoArray</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high, <span class="keyword">int</span>[] arrayTemp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i=low, j=mid+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> current = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ( i&lt;=mid &amp;&amp; j&lt;=high )&#123;</span><br><span class="line">            <span class="keyword">if</span>( array[i]&lt;array[j] )&#123;</span><br><span class="line">                arrayTemp[current++] = array[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                arrayTemp[current++] = array[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>( i&lt;=mid )&#123;</span><br><span class="line">            arrayTemp[current++] = array[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( j&lt;=high )&#123;</span><br><span class="line">            arrayTemp[current++] = array[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        System.arraycopy(arrayTemp,<span class="number">0</span>,array,low,current);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery和ajax使用.md</title>
      <link href="/uncategorized/jQuery%E5%92%8Cajax%E4%BD%BF%E7%94%A8/"/>
      <url>/uncategorized/jQuery%E5%92%8Cajax%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>JSP FileUpload实现文件上传</title>
      <link href="/Java/Web/JSP-FileUpload%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/Java/Web/JSP-FileUpload%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<h4 id="文件上传的条件"><a href="#文件上传的条件" class="headerlink" title="文件上传的条件"></a>文件上传的条件</h4><ul><li>表单必须是post提交方式</li><li>表单中必须有文件上传项，文件上传项必须有name属性和值</li><li>表单的enctype属性必须设置为multipart/form-data</li></ul><a id="more"></a><h4 id="文件上传基本操作"><a href="#文件上传基本操作" class="headerlink" title="文件上传基本操作"></a>文件上传基本操作</h4><p>数据接收：通过使用fileupload jar包的Common-FileUpload组件完成文件上传<br>基本步骤：</p><ol><li>创建一个 <strong>磁盘文件项工厂</strong> 的对象<br><code>DiskFileItemFactory diskFileItemFactory = new DiskFileItemFactory();</code></li><li>创建一个核心解析类<br><code>ServletFileUpload servletFileUpload = new ServletFileUpload(diskFileItemFactory );</code></li><li>解析request请求 —— <em>parseRequest</em>，返回一个List集合，List集合中存放的是<em>FileItem</em>对象（每一个表单项都是一个<em>FileItem</em>对象）<br><code>List&lt;FileItem&gt; list = servletFileUpload.parseRequest(request);</code></li><li>遍历集合，获得每个FileItem，判断是表单项还是文件上传项<br><em>fileItem.isFormField()</em>: 返回是普通的文件表单项还是文件上传项<br><em>fileItem.getFieldName()</em>: 获得表单项的<strong>name</strong>属性值<br><em>fileItem.getString(“UTF-8”)</em>: 获取表单的文本值，可设置UTF-8解决中文乱码</li><li>获得文件名：<br><code>String filename = fileItem.getName();</code></li><li><p>通过自定义工具类获得<strong>唯一</strong>文件名：<br><code>String uuidfilename = UploadUtils.getUUIDFileName(filename);</code>注：<em>UploadUtils</em>类是自定义工具类，具体实现是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadUtils</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 生成唯一文件名</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUUIDFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> idx = fileName.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">String extention = fileName.substring(idx);<span class="comment">//扩展名</span></span><br><span class="line">String uuidFileName = UUID.randomUUID().toString().replace(<span class="string">"-"</span>, <span class="string">""</span>)+extention;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> uuidFileName;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(getUUIDFileName(<span class="string">"1.jpg"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输入流获得文件上传的数据：<br><code>InputStream is = fileItem.getInputStream();</code></p></li><li>得到文件要上传的路径<br><code>url = this.getServletContext().getRealPath(&quot;/upload&quot;)+&quot;//&quot;+uuidfilename;</code></li><li>输入流对接输出流<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OutputStream os = <span class="keyword">new</span> FileOutStream(url);<span class="comment">//输出流目标为url</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">while</span>((len=is.read(b)) != -<span class="number">1</span>)&#123;<span class="comment">//读取输入流到b中</span></span><br><span class="line">os.write(b,<span class="number">0</span>,len);<span class="comment">//将b写入输出流中</span></span><br><span class="line">&#125;</span><br><span class="line">is.close();<span class="comment">//关闭输入流</span></span><br><span class="line">os.close();<span class="comment">//关闭输出流</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode 0050 Pow(x,n)</title>
      <link href="/%E7%AE%97%E6%B3%95/LeetCode%200050%20Pow(x,n)/"/>
      <url>/%E7%AE%97%E6%B3%95/LeetCode%200050%20Pow(x,n)/</url>
      <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>实现 pow(x, n) ，即计算 x 的 n 次幂函数。</p><a id="more"></a><p>示例 1:</p><blockquote><p>输入: 2.00000, 10<br>输出: 1024.00000</p></blockquote><p>示例 2:</p><blockquote><p>输入: 2.10000, 3<br>输出: 9.26100</p></blockquote><p>示例 3:</p><blockquote><p>输入: 2.00000, -2<br>输出: 0.25000</p></blockquote><p><strong>解释</strong>: 2<sup>-2</sup> = 1/2<sup>2</sup> = 1/4 = 0.25<br><strong>说明</strong>:</p><ul><li>-100.0 &lt; x &lt; 100.0</li><li>n 是 32 位有符号整数，其数值范围是 [−2<sup>31</sup>, 2<sup>31 </sup>− 1] 。</li></ul><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>用的递归法，log n<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isNagetive = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span>( n&lt;<span class="number">0</span> ) &#123;</span><br><span class="line">    n = -n;</span><br><span class="line">    isNagetive = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( isNagetive ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/pow(x, n);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> pow(x, n);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">if</span>( n==<span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( n==<span class="number">1</span> ) &#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( n%<span class="number">2</span>==<span class="number">0</span> ) &#123;</span><br><span class="line">res = pow(x*x, n/<span class="number">2</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">res = pow(x*x, n/<span class="number">2</span>) * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode 0109 有序链表转换二叉搜索树</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/LeetCode%200109%20%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/LeetCode%200109%20%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。<br><a id="more"></a><br>本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。<br>示例：</p><blockquote><p>给定的有序链表： [-10, -3, 0, 5, 9],</p><p>一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;     0</span><br><span class="line">&gt;    / \</span><br><span class="line">&gt;  -3   9</span><br><span class="line">&gt;  /   /</span><br><span class="line">&gt; -10  5</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>这道题类似归并排序，需要每次都把链表分为尽可能等长的两部分，然后分别对这两部分再进行生成二叉树的操作。可以用快慢指针，具体实现是：设置快慢指针各一个，慢指针步进为1，快指针步进为2，循环条件是快指针不为空且其子节点不为空。这样快指针走的长度是慢的2倍，可以保证每次循环都找到了链表的中心节点（平衡二叉树需要找中心节点）。每次循环后链表被分为： <u>0-premid</u>、<u>slow</u>、<u>slow.next-最后一个</u> 这三部分。<br>Java代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>( head==<span class="keyword">null</span> ) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">if</span>( head.next==<span class="keyword">null</span> ) <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(head.val);</span><br><span class="line"> ListNode slow = head;</span><br><span class="line"> ListNode fast = head;</span><br><span class="line"> ListNode premid = <span class="keyword">null</span>;</span><br><span class="line"> <span class="keyword">while</span>( fast!=<span class="keyword">null</span> &amp;&amp; fast.next!=<span class="keyword">null</span> ) &#123;</span><br><span class="line"> premid = slow;</span><br><span class="line"> slow = slow.next;</span><br><span class="line"> fast = fast.next.next;</span><br><span class="line"> &#125;</span><br><span class="line"> premid.next = <span class="keyword">null</span>;</span><br><span class="line"> TreeNode root = <span class="keyword">new</span> TreeNode(slow.val);</span><br><span class="line"> root.left = sortedListToBST(head);</span><br><span class="line"> root.right = sortedListToBST(slow.next);</span><br><span class="line"> <span class="keyword">return</span> root;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> 链表 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>eclipse建立web项目时忘了生成xml文件的解决办法</title>
      <link href="/%E5%8F%91%E7%8E%B0/eclipse%E5%BB%BA%E7%AB%8Bweb%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%BF%98%E4%BA%86%E7%94%9F%E6%88%90xml%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/%E5%8F%91%E7%8E%B0/eclipse%E5%BB%BA%E7%AB%8Bweb%E9%A1%B9%E7%9B%AE%E6%97%B6%E5%BF%98%E4%BA%86%E7%94%9F%E6%88%90xml%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>刚学web没多久，建立项目时忘了去勾选建立web.xml文件的选项。当我写了好多代码，接下来需要修改这个文件的时候才发现，我没有生成它…接下来在摸索中找到了解决办法。<br><a id="more"></a><br>首先在创建的项目上右键，找到Java EE Tools，然后点击Generate Deployment Descriptor Stub，如下图（我的已经生成了所以是灰色）。完了之后会发现，web.xml躺在WEB-INF文件夹下~</p><p><img src="https://img-blog.csdnimg.cn/20181213221307683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21ha2Vyc3k=,size_16,color_FFFFFF,t_70" alt="流程"></p><p>（完）</p>]]></content>
      
      <categories>
          
          <category> 发现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java-EL表达式和JSTL标签库</title>
      <link href="/Java/Web/Java-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93/"/>
      <url>/Java/Web/Java-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8CJSTL%E6%A0%87%E7%AD%BE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h4 id="关于EL表达式"><a href="#关于EL表达式" class="headerlink" title="关于EL表达式"></a>关于EL表达式</h4><p><strong>EL表达式</strong>全名为Expression Language，是一种为了在JSP中计算和输出Java对象的简单语言。<br>基本语法： <code>${expression}</code><br>以上语句中，<em>expression</em>为有效的表达式。该表达式可以和静态文本混合，还可以与其他表达式结合成为更大的表达式。<br><a id="more"></a></p><h4 id="EL四个作用域对象"><a href="#EL四个作用域对象" class="headerlink" title="EL四个作用域对象"></a>EL四个作用域对象</h4><p><img src="https://img.mukewang.com/climg/5c0dd2980001c66619201080.jpg" alt=""><br>如果我们在jsp页面调用Servlet的数据信息时，不写这个范围，那么EL就会从在小到大的范围内依次去寻找我们调用的这些数据。（因此最好写上）</p><h4 id="EL表达式输出"><a href="#EL表达式输出" class="headerlink" title="EL表达式输出"></a>EL表达式输出</h4><p>语法：<code>${[作用域.]属性名[.子属性]}</code><br>EL支持绝大多数对象输出，本质是执行<em>toString</em>方法<br>例：</p><blockquote><p>${title}<br>${requestScope.student.name}<br>${emp.salary + 300}<br>${ 1&lt;=3 &amp;&amp; 2&gt;4 }</p></blockquote><p>获取数据：<br>我们可以使用EL的内置对象<em>param</em>来简化获取<strong>url</strong>或者<strong>请求体</strong>中的数据<br>语法：<code>${param.参数名}</code><br>例如当url是 <em><a href="https://class.makersy.com/lesson?mid=17331" target="_blank" rel="noopener">https://class.makersy.com/lesson?mid=17331</a></em><br>在Servlet中，我们用request.getParameter(“mid”)获取<br>而现在可以用<code>${param.mid}</code>获取了<br>其实，<code>${param.参数名}</code>就是<code>request.getParameter（“参数名”);</code>的简化形式  </p><h4 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h4><h5 id="使用JSTL表达式"><a href="#使用JSTL表达式" class="headerlink" title="使用JSTL表达式"></a>使用JSTL表达式</h5><p>JSTL是JSP标准标签库的简称，它提供的标签能一定程度上代替Java代码，例如<code>&lt;c:forEach/&gt;</code>标签能实现Java语言中的循环功能。</p><p>使用前：<br>1.下载<em>jstl.jar</em>和<em>standard.jar</em>包</p><p>2将这两个包复制到<em>web-inf\lib</em> 目录下</p><p>3.在JSP页面中添加指令，例如：</p><p>核心标签库初始化<br><code>&lt;%@ taglib uri = &quot;http://java.sun.com/jsp/jstl/core&quot; prefix = &quot;c&quot; %&gt;</code><br>或<br>格式标签库初始化<br><code>&lt;%@ taglib uri = &quot;http://java.sun.com/jsp/jstl/fmt&quot; prefix = &quot;fmt&quot; %&gt;</code></p><h4 id="JSTL标签库-1"><a href="#JSTL标签库-1" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h4><p>JSTL有五个标签库，分别是：核心标签库、格式标签库、函数标签库、SQL标签库、XML标签库。<br>主要用<strong>前两者</strong>。</p><p>核心标签库主要完成JSP页面常用功能，包括JSTL表达式标签、URL标签、流程控制标签和循环标签等。其中，表达式标签有</p><ol><li><p>和显示操作有关的<br><code>&lt;c:out value=&quot; ${ news.title }&quot;/&gt;</code>输出属性的值 数据库中给出的标签可以显示；<br><code>&lt;c:set var=&quot;uid&quot; value=&quot;admin&quot; scope=&quot;request&quot;/&gt;</code> 存入变量,把uid的变量存入request中;<br><code>&lt;c:remove var=&quot;uid&quot; value=&quot;admin&quot; scope=&quot;request&quot;/&gt;</code>移除变量  把request中的uid的变量移除.</p></li><li><p>实现程序逻辑相关的<br><strong>c:foreach标签</strong><br><code>&lt;c:forEach var=&quot;对象&quot; items=”保存在request中的数组&quot; varStatus=&quot;status&quot;&gt;循环的的变量&lt;c:forEach /&gt;</code><br><code>&lt;c:forEach&gt;</code>标签具有以下一些属性：</p><ul><li>var：迭代参数的名称。在迭代体中可以使用的变量的名称，用来表示每一个迭代变量。类型为String。 </li><li>items：要进行迭代的集合。对于它所支持的类型将在下面进行讲解。 <ul><li>varStatus：迭代变量的名称，用来表示迭代的状态，可以访问到迭代自身的信息。 </li><li>begin：如果指定了items，那么迭代就从items[begin]开始进行迭代；如果没有指定items，那么就从begin开始迭代。它的类型为整数。 </li></ul></li><li>end：如果指定了items，那么就在items[end]结束迭代；如果没有指定items，那么就在end结束迭代。它的类型也为整数。 </li><li>step：迭代的步长。</li></ul></li></ol><p><code>&lt;c:forEach&gt;</code>标签的items属性支持Java平台所提供的所有标准集合类型。此外，您可以使用该操作来迭代数组（包括基本类型数组）中的元素。它所支持的集合类型以及迭代的元素如下所示：<br>​            java.util.Collection：调用iterator()来获得的元素。             java.util.Map：通过java.util.Map.Entry所获得的实例。<br>​            java.util.Iterator：迭代器元素。<br>​            java.util.Enumeration：枚举元素。<br>​            Object实例数组：数组元素。<br>​            基本类型值数组：经过包装的数组元素。<br>​            用逗号定界的String：分割后的子字符串。<br>​            javax.servlet.jsp.jstl.sql.Result：SQL查询所获得的行。<br>​          不论是对整数还是对集合进行迭代， <code>&lt;c:forEach&gt;</code>的varStatus属性所起的作用相同。和var属性一样，varStatus用于创建限定了作用域的变量（改变量只在当前标签体内起作用）。不过，由varStatus属性命名的变量并不存储当前索引值或当前元素，而是赋予<em>javax.servlet.jsp.jstl.core.LoopTagStatus</em>类的实例。该类包含了一系列的特性，它们描述了迭代的当前状态，如下这些属性的含义如下所示：<br>​            current：当前这次迭代的（集合中的）项。<br>​            index：当前这次迭代从0开始的迭代索引。<br>​            count：当前这次迭代从1开始的迭代计数。<br>​            first：用来表明当前这轮迭代是否为第一次迭代，该属性为boolean类型。<br>​            last：用来表明当前这轮迭代是否为最后一次迭代，该属性为boolean类型。<br>​            begin：begin属性的值。<br>​            end：end属性的值<br>​            step：step属性的值<br>​<br>下面是一个使用的小例子，判断x的值并输出他所在的区间。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">request.setAttribute</span>("<span class="attr">x</span>", "<span class="attr">11</span>");</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;x&gt;0 &amp;&amp; x&lt;=10 &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color:blue"</span>&gt;</span>1-10之间的整数<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;x&gt;10 &amp;&amp; x&lt;=20 &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color:lightcoral"</span>&gt;</span>11-20之间的整数<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>格式化日期</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">jstl日期格式化</span><br><span class="line">代码</span><br><span class="line"><span class="tag">&lt;<span class="name">%@page</span> <span class="attr">import</span>=<span class="string">"java.util.Date"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/fmt"</span> <span class="attr">prefix</span>=<span class="string">"fmt"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">request.setAttribute</span>("<span class="attr">amt</span>", "<span class="attr">1898923.234</span>");</span></span><br><span class="line"><span class="tag"><span class="attr">request.setAttribute</span>("<span class="attr">now</span>", <span class="attr">new</span> <span class="attr">Date</span>());</span></span><br><span class="line">request.setAttribute("html", "&lt;a href='index.html'&gt;index&lt;/a&gt;");</span><br><span class="line">request.setAttribute("nothing", null);</span><br><span class="line">%&gt;</span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">formatDate patttern</span></span><br><span class="line"><span class="comment">yyyy - 四位年</span></span><br><span class="line"><span class="comment">MM = 两位月</span></span><br><span class="line"><span class="comment">dd = 两位日</span></span><br><span class="line"><span class="comment">HH - 24小时制</span></span><br><span class="line"><span class="comment">hh - 12小时制</span></span><br><span class="line"><span class="comment">mm - 分钟</span></span><br><span class="line"><span class="comment">ss - 秒数</span></span><br><span class="line"><span class="comment">SSS - 毫秒</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fmt:formatDate</span> <span class="attr">value</span>=<span class="string">"$&#123;requestScope.now &#125;"</span> <span class="attr">pattern</span>=<span class="string">"yyyy年MM月dd日HH时mm分ss秒SSS毫秒"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> EL表达式 </tag>
            
            <tag> JSTL标签库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Servlet和JSP</title>
      <link href="/Java/Web/%E5%85%B3%E4%BA%8EServlet/"/>
      <url>/Java/Web/%E5%85%B3%E4%BA%8EServlet/</url>
      <content type="html"><![CDATA[<h4 id="请求转发和响应重定向"><a href="#请求转发和响应重定向" class="headerlink" title="请求转发和响应重定向"></a>请求转发和响应重定向</h4><ul><li>请求转发： 是服务器跳转，只产生一次请求<br><code>request.getRequestDispatcher(url).forward(request,response）</code></li></ul><a id="more"></a><p><img src="https://img.mukewang.com/climg/5c0b3dc60001192819201080.jpg" alt="">  </p><ul><li>响应重定向： 是浏览器端跳转，会产生两次请求<br>地址栏会变成最后的url （处理完成第一个请求之后返回一个特殊的响应给浏览器由浏览器重新发起另一个请求到新的资源）<br><code>response.sendRedirect(url);</code><br><img src="https://img.mukewang.com/climg/5c0b3e150001b54219201080.jpg" alt=""><h4 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4>打开网页可根据出现的状态码来判断处于什么状态。<br><img src="https://img.mukewang.com/climg/5c0a572d000116ba19201080.jpg" alt=""></li></ul><h4 id="ContentType的作用"><a href="#ContentType的作用" class="headerlink" title="ContentType的作用"></a>ContentType的作用</h4><p>ContentType决定浏览器采用何种方式对相应体进行处理<br><img src="https://img.mukewang.com/climg/5c0a58e00001c00019201080.jpg" alt=""></p><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>Cookie是浏览器保存在本地的文本内容<br>Cookie常用于保存登录状态、用户资料等小文本<br>Cookie具有时效性，Cookie内容会伴随请求发送给Tomcat<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cookie部分doGet函数</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"用户登录成功！"</span>);</span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"user"</span>, <span class="string">"admin"</span>);</span><br><span class="line">    cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);<span class="comment">//有效期七天内有效</span></span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    response.getWriter().println(<span class="string">"login success"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用cookie的函数</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    Cookie[] cookies = request.getCookies();</span><br><span class="line">    <span class="keyword">if</span>( cookies==<span class="keyword">null</span> ) &#123;</span><br><span class="line">    response.getWriter().println(<span class="string">"user not login"</span>);</span><br><span class="line">&#125;</span><br><span class="line">String user = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span>( Cookie cookie : cookies ) &#123;</span><br><span class="line">        System.out.println(cookie.getName() + <span class="string">":"</span> + cookie.getValue());</span><br><span class="line">        <span class="keyword">if</span>( cookie.getName().equals(<span class="string">"user"</span>) ) &#123;</span><br><span class="line">            user = cookie.getValue();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>( user == <span class="keyword">null</span> ) &#123;</span><br><span class="line">    response.getWriter().println(<span class="string">"user not login"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    response.getWriter().println(<span class="string">"user : "</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><p>Session(用户会话)： 用于保存于“浏览器窗口”对应的数据。它与Cookie的不同是：Cookie保存的数据在<strong>客户端</strong>，二Session保存的数据在<strong>服务器</strong>。</p><p>session是与<strong>窗口</strong>绑定的，保存在tomcat服务器的数据是30分钟.</p><p>Session通过浏览器Cookie的<u>SessionId</u>提取对应用户的数据</p><p>浏览器第一次向服务器发送请求时，服务器在内存中开辟一块儿空间用于存放这个会话的信息，并把这块空间的id（sessionId）返回给浏览器。浏览器将sessionId存放在cookie中，之后<u>每次向服务器发起请求都会携带这个cookie</u>，告知服务器当前的会话。  </p><h4 id="JavaWeb三大作用域对象"><a href="#JavaWeb三大作用域对象" class="headerlink" title="JavaWeb三大作用域对象"></a>JavaWeb三大作用域对象</h4><ul><li>HttpServletRequest – 请求响应完毕就消失了。</li><li>HttpSession – 第一次请求被创建，默认30分钟没有被访问就被销毁。此时把浏览器关掉其实是将存储在cookie中的sessionid抛弃，并没有被销毁。</li><li>ServletContext web – 应用启动时被创建，重启或关闭时被销毁。</li></ul><p>程序开发时，为了便于维护，<u>能用小作用域对象就用小作用域对象。</u></p><h4 id="JSP九大内置对象"><a href="#JSP九大内置对象" class="headerlink" title="JSP九大内置对象"></a>JSP九大内置对象</h4><p><img src="https://img.mukewang.com/climg/5c0b7dfc0001e32919201080.jpg" alt=""></p><p>更新中，未完待续…</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode 951 翻转二叉树</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/LeetCode-951-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/LeetCode-951-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>我们可以为二叉树 T 定义一个翻转操作，如下所示：选择任意节点，然后交换它的左子树和右子树。</p><p>只要经过一定次数的翻转操作后，能使 X 等于 Y，我们就称二叉树 X 翻转等价于二叉树 Y。</p><p>编写一个判断两个二叉树是否是翻转等价的函数。这些树由根节点 root1 和 root2 给出。<br><a id="more"></a></p><p>示例：</p><blockquote><p>输入：root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]<br>输出：true<br>解释：We flipped at nodes with values 1, 3, and 5.</p></blockquote><p>提示：<br>每棵树最多有 100 个节点。<br>每棵树中的每个值都是唯一的、在 [0, 99] 范围内的整数。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>先说一句，我没写出来。看到这个题我首先想的是怎么实现将某些节点交换左右子节点，而某些不换，从而判断两棵树是否相等。于是写了交换子节点的函数和判断两棵树是否相等的函数。且不说可行性，光O(n)就够我喝一壶的。<br>然后我看了下<a href="https://blog.csdn.net/u011732358/article/details/84790975" target="_blank" rel="noopener">网上大佬的题解</a>才懂。<br>我的代码理解都写在注释里。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">flipEquiv</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//若有一个或两个为空，返回两节点是否相等。具体结果是：若均为空，返回true；若一个为空，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(root1 == <span class="keyword">null</span> || root2 == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root1 == root2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若两节点的值都不相等，那么自然树也不相等</span></span><br><span class="line">        <span class="keyword">if</span>(root1.val != root2.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        分别比较root1和root2的：左左、右右、左右、右左。</span></span><br><span class="line"><span class="comment">        若是可以通过交换子节点来使两根节点下的树相等，</span></span><br><span class="line"><span class="comment">        那么将这两个根节点的四个子节点顺序进行排列组合，</span></span><br><span class="line"><span class="comment">        若有一种情况下是两边相等,那么就可以通过交换而得；否则就不可以。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">return</span> flipEquiv(root1.left, root2.left) &amp;&amp; flipEquiv(root1.right, root2.right) </span><br><span class="line">        || flipEquiv(root1.left, root2.right) &amp;&amp; flipEquiv(root1.right, root2.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode 0102-二叉树的层次遍历</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/LeetCode-0102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/LeetCode-0102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。<br><a id="more"></a><br>例如:<br>给定二叉树: [3,9,20,null,null,15,7],<br>​    <img src="https://img-blog.csdnimg.cn/20181207210208562.png" alt=""></p><p>返回其层次遍历结果：<br>[<br>  [3],<br>  [9,20],<br>  [15,7]<br>]</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>我的思路是每行的节点都从左到右用一个队列或链表来存储，每次取队列头部并弹出。如果该节点有非空的后代节点则再加入队列，直到队列为空时停止。<br>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue=<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size=queue.size();</span><br><span class="line">            List&lt;Integer&gt; subres=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode tmp=queue.pop();</span><br><span class="line">                subres.add(tmp.val);</span><br><span class="line">                <span class="keyword">if</span>(tmp.left!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.offer(tmp.left);</span><br><span class="line">                <span class="keyword">if</span>(tmp.right!=<span class="keyword">null</span>)</span><br><span class="line">                    queue.offer(tmp.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(subres);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>耗时最少的是用递归法做的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//递归实现</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)  <span class="keyword">return</span> res;</span><br><span class="line">        recursionLevelOrder(root,<span class="number">0</span>,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recursionLevelOrder</span><span class="params">(TreeNode root,<span class="keyword">int</span> level,List&lt;List&lt;Integer&gt;&gt; res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(res.size()==level)&#123;</span><br><span class="line">            List&lt;Integer&gt; subres=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            subres.add(root.val);</span><br><span class="line">            res.add(subres);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.get(level).add(root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        recursionLevelOrder(root.left,level+<span class="number">1</span>,res);</span><br><span class="line">        recursionLevelOrder(root.right,level+<span class="number">1</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>类型修饰符volatile</title>
      <link href="/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E7%B1%BB%E5%9E%8B%E4%BF%AE%E9%A5%B0%E7%AC%A6volatile/"/>
      <url>/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/%E7%B1%BB%E5%9E%8B%E4%BF%AE%E9%A5%B0%E7%AC%A6volatile/</url>
      <content type="html"><![CDATA[<p>今天看Java并发时，看到了一个新的关键字volatile，觉得有必要记一下。</p><a id="more"></a><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><p>​    先补充一下概念：Java 内存模型中的<strong>可见性</strong>、<strong>原子性</strong>和<strong>有序性</strong>。<br><strong>可见性</strong>：<br>　　可见性是一种复杂的属性，因为可见性中的错误总是会违背我们的直觉。通常，我们无法确保执行读操作的线程能适时地看到其他线程写入的值，有时甚至是根本不可能的事情。为了确保多个线程之间对内存写入操作的可见性，必须使用同步机制。</p><p>　　可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果。另一个线程马上就能看到。比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许<strong>线程内部缓存</strong>和<strong>重排序</strong>，即直接修改内存。所以对其他线程是可见的。但是这里需要注意一个问题，volatile只能让被他修饰内容具有可见性，但不能保证它具有原子性。比如 volatile int a = 0；之后有一个操作 a++；这个变量a具有可见性，但是a++ 依然是一个<u>非原子</u>操作，也就是这个操作同样<strong>存在</strong>线程安全问题。</p><p>　　在 Java 中 volatile、synchronized 和 final 实现可见性。</p><p><strong>原子性</strong>：<br>　　原子是世界上的最小单位，具有不可分割性。比如 a=0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作时原子操作。再比如：a++； 这个操作实际是a = a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。一个操作是原子操作，那么我们称它具有原子性。java的concurrent包下提供了一些原子类，我们可以通过阅读API来了解这些原子类的用法。比如：AtomicInteger、AtomicLong、AtomicReference等。</p><p>　　在 Java 中 synchronized 和在 lock、unlock 中操作保证原子性。</p><p><strong>有序性</strong>：</p><p>​    Java 语言提供了 volatile 和 synchronized 两个关键字来保证线程之间操作的有序性，volatile 是因为其本身包含“<strong>禁止指令重排序</strong>”的语义，synchronized 是由“一个变量在同一个时刻只允许一条线程对其进行 lock 操作”这条规则获得的，此规则决定了<u>持有同一个对象锁的两个同步块只能串行执行</u>。　　</p><h4 id="volatile原理"><a href="#volatile原理" class="headerlink" title="volatile原理　　"></a>volatile原理　　</h4><p>百度该字条，其内容是：</p><blockquote><p>volatile是一个类型修饰符（type specifier）.volatile的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。<br>volatile的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。</p></blockquote><p>​    如果查阅一下英文字典，有关volatile的解释，你会得到最常用的解释是“易变的，不稳定的”。这也是volatile关键字的含义。</p><p>​    Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量<u>不会</u>被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会<strong>返回最新写入的值</strong>。</p><p><img src="https://images2015.cnblogs.com/blog/731716/201607/731716-20160708224602686-2141387366.png" alt=""></p><p>　　在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。</p><p>​    当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的 CPU cache 中。</p><p>　　<font color="red">而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过 CPU cache 这一步。</font></p><p>​    当一个变量定义为 volatile 之后，将具备两种特性：</p><p>　　1.保证此变量对所有的线程的可见性，这里的“可见性”，如本文开头所述，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存（详见：<a href="http://www.cnblogs.com/zhengbin/p/6407137.html" target="_blank" rel="noopener">Java内存模型</a>）来完成。</p><p>　　2.禁止指令重排序优化。有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个<strong>内存屏障</strong>（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；（什么是指令重排序：是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）。</p><h4 id="volatile-性能："><a href="#volatile-性能：" class="headerlink" title="volatile 性能："></a>volatile 性能：</h4><p>　　volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XML文档编写及XPath表达式使用</title>
      <link href="/%E5%89%8D%E7%AB%AF/XML%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E5%8F%8AXPath%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8/"/>
      <url>/%E5%89%8D%E7%AB%AF/XML%E6%96%87%E6%A1%A3%E7%BC%96%E5%86%99%E5%8F%8AXPath%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h4><p><strong>XML</strong>是可扩展标记语言(Extensible Markup Language，XML)缩写，用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。可以用于Java程序配置描述文件、保存产生的数据、网络间数据传输等。</p><a id="more"></a><h4 id="XML语法-amp-结构"><a href="#XML语法-amp-结构" class="headerlink" title="XML语法&amp;结构"></a>XML语法&amp;结构</h4><p>XML文档结构</p><ol><li>第一行需是XML文档声明</li><li>有且只有一个根节点</li><li>书写规则与HTML相同</li></ol><p>标签名使用<strong>小写英文</strong>, 单词间用-分隔<br>多级标签之间不要存在重名</p><p>对特殊符号使用实体引用或CDATA标签<br>5种实体引用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt; <span class="tag">&lt;</span></span><br><span class="line"><span class="tag">&amp;<span class="attr">gt</span>; &gt;</span></span><br><span class="line">&amp;amp; &amp;</span><br><span class="line">&amp;apos; '</span><br><span class="line">&amp;quot; "</span><br></pre></td></tr></table></figure></p><p>CDATA标签:<br><code>&lt;![CDATA[不希望由XML解析的文本数据]]&gt;</code></p><p><strong>XML语义约束</strong><br>语义约束的两种定义方式:<strong>DTD</strong>与<strong>XML Schema</strong><br><strong>DTD</strong><br>利用DTD中的&lt;！ELEMENT&gt;标签定义XML文档中允许出现的节点及数量<br>例: <code>&lt;!ELEMENT hr (employee)&gt;</code><br><code>&lt;!ELMENT name(#PCDATA)&gt;</code>   定义name标签体只能是文本<br>使用描述符表达子节点数量<br><code>+</code> 至少出现1个子节点<br><code>*</code> 可出现0…n个子节点<br><code>?</code>最多出现1个子节点<br>在XML中使用&lt;!DOCTYPE&gt;标签来引用DTD文件。<br>书写格式:<br><code>&lt;!DOCTYPE 根节点 SYSTEM &quot;dtd文件路径&quot;&gt;</code></p><p><strong>Schema</strong><br>比DTD更复杂<br>XML Schema提供了数据类型、格式限定、数据范围等特性<br><code>&lt;schema xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;</code><br>声明文本是Schema<br><code>&lt;element&gt;</code>代表标签节点<br><code>&lt;complexType&gt;</code>复杂节点, 标签包含子节点时使用<br><code>&lt;sequence&gt;</code>子标签按顺序排列<br><code>&lt;attribute&gt;</code>设置属性<br>标签属性:<br>name= 属性名称<br>type= 属性值类型<br>use=”required” 属性必须存在<br>minOccurs=”n” 最小出现次数<br>maxOccurs=”n” 最大出现次数<br><code>&lt;simpleType&gt;</code>简单类型。 代替属性:type使用<br><code>&lt;restriction&gt;</code>限定数据类型<br>base=”xx” 基本类型<br><code>&lt;minInclusive value=&quot;&quot;&gt;</code>最小数据范围<br><code>&lt;maxInclusive value=&quot;&quot;&gt;</code>最大数据范围<br>在XML文本的根节点添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;Schema文件路径&quot;</span><br></pre></td></tr></table></figure></p><p>属性来关联schema文本</p><h4 id="Dom4j"><a href="#Dom4j" class="headerlink" title="Dom4j"></a>Dom4j</h4><p><strong>Dom4j</strong>是java用来读取和操作xml文档的一种方式。<br>DOM(Document Object Model) 文档对象模型把xml文档看做一个树结构<br>Dom4j的含义和作用</p><ol><li>将xml文件视为Document对象</li><li>将xml文件中的标签视为Element对象<br>使用时需下载dom4j的jar包并导入。</li></ol><h4 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h4><p><strong>基本表达式</strong><br>nodename: 选取此节点的所有子节点<br><code>/</code> 从根节点选取<br><code>//</code> 从匹配选择的当前节点选择文档中的节点<br><code>.</code> 当前节点<br><code>..</code> 当前节点的父节点<br><code>@</code> 选取属性<br><strong>谓语表达式</strong><br><code>[1]</code> 第一个匹配的元素<br><code>[last()]</code> 最后一个匹配的元素<br><code>[last()-1]</code> 倒数第二个匹配的元素<br><code>[position()&lt;3]</code> 最前面两个匹配的元素<br><code>[@lang]</code> 选取所有拥有lang属性的元素<br><code>[@lang=&#39;value&#39;]</code> 选取所有包含lang属性且属性值为value的元素<br><code>[price&gt;35.00]</code> 选取price元素值大于35.00的元素</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>下面是我写的一个例子：<br>XML文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!-- &lt;!DOCTYPE hr SYSTEM "NewFile.dtd"&gt; --&gt;</span><span class="comment">&lt;!-- 人力资源管理系统 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"hr.xsd"</span>&gt;</span></span><br><span class="line">//xml schema文件名为hr.xsd</span><br><span class="line"><span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">"3309"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>31<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dname</span>&gt;</span>会计部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>b103<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">"3310"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>22<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">salary</span>&gt;</span>4000<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dname</span>&gt;</span>会计部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>b103<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">employee</span> <span class="attr">no</span>=<span class="string">"3311"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>张无忌<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>30<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">salary</span>&gt;</span>3600<span class="tag">&lt;/<span class="name">salary</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">department</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">department</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dname</span>&gt;</span>人事部<span class="tag">&lt;/<span class="name">dname</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>XX大厦-B105<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">department</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">employee</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>xml语义约束–xml schema文件(.xsd)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">targetNamespace</span>=<span class="string">"http://www.example.org/hr"</span> <span class="attr">xmlns:tns</span>=<span class="string">"http://www.example.org/hr"</span> <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"hr"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"employee"</span> <span class="attr">minOccurs</span>=<span class="string">"1"</span> <span class="attr">maxOccurs</span>=<span class="string">"9999"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">restriction</span> <span class="attr">base</span>=<span class="string">"integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">minInclusive</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">minInclusive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maxInclusive</span> <span class="attr">value</span>=<span class="string">"60"</span>&gt;</span><span class="tag">&lt;/<span class="name">maxInclusive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">restriction</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"salary"</span> <span class="attr">type</span>=<span class="string">"integer"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"department"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"dname"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">element</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span> <span class="attr">name</span>=<span class="string">"no"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">use</span>=<span class="string">"required"</span>&gt;</span><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sequence</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">complexType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>读xml<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hrreader</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readXml</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String file = <span class="string">"d:/Eclipse/workplace/calculator/src/NewFile.xml"</span>;</span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Document document = reader.read(file);</span><br><span class="line"><span class="comment">//获取文档根节点，即hr标签</span></span><br><span class="line">Element root = document.getRootElement();</span><br><span class="line">List&lt;Element&gt; employees = root.elements(<span class="string">"employee"</span>);</span><br><span class="line"><span class="keyword">for</span>( Element employee : employees ) &#123;</span><br><span class="line">Element name = employee.element(<span class="string">"name"</span>);</span><br><span class="line">String empName = name.getText();</span><br><span class="line">System.out.println(empName);</span><br><span class="line">System.out.println(employee.elementText(<span class="string">"age"</span>));</span><br><span class="line">System.out.println(employee.elementText(<span class="string">"salary"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的 catch 块</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Hrreader reader = <span class="keyword">new</span> Hrreader();</span><br><span class="line">reader.readXml();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>写xml<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HrWriter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteXml</span><span class="params">()</span></span>&#123;</span><br><span class="line">String file = <span class="string">"d:/Eclipse/workplace/calculator/src/NewFile.xml"</span>;</span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Document document = reader.read(file);</span><br><span class="line">Element root = document.getRootElement();</span><br><span class="line">Element employee = root.addElement(<span class="string">"employee"</span>);</span><br><span class="line">employee.addAttribute(<span class="string">"no"</span>, <span class="string">"3311"</span>);</span><br><span class="line"><span class="comment">//Element name = employee.addElement("name");</span></span><br><span class="line"><span class="comment">//name.setText("李想");</span></span><br><span class="line">employee.addElement(<span class="string">"name"</span>).setText(<span class="string">"张无忌"</span>);</span><br><span class="line">employee.addElement(<span class="string">"age"</span>).setText(<span class="string">"30"</span>);</span><br><span class="line">employee.addElement(<span class="string">"salary"</span>).setText(<span class="string">"3600"</span>);</span><br><span class="line">Element department = employee.addElement(<span class="string">"department"</span>);</span><br><span class="line">department.addElement(<span class="string">"department"</span>);</span><br><span class="line">department.addElement(<span class="string">"dname"</span>).setText(<span class="string">"人事部"</span>);</span><br><span class="line">department.addElement(<span class="string">"address"</span>).setText(<span class="string">"XX大厦-B105"</span>);</span><br><span class="line">Writer writer = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(file), <span class="string">"UTF-8"</span>);</span><br><span class="line">document.write(writer);</span><br><span class="line">writer.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handl exception</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">HrWriter hrWriter = <span class="keyword">new</span> HrWriter();</span><br><span class="line">hrWriter.WriteXml();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>利用xpath进行xml文件的各种查找，类似数据库的查找语句<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> hr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Node;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XPathTestor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xpath</span><span class="params">(String xpathExp)</span> </span>&#123;</span><br><span class="line">String file = <span class="string">"d:/Eclipse/workplace/calculator/src/NewFile.xml"</span>;</span><br><span class="line">SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Document document = reader.read(file);</span><br><span class="line">List&lt;Node&gt; nodes = document.selectNodes(xpathExp);</span><br><span class="line"><span class="keyword">for</span>( Node node : nodes ) &#123;</span><br><span class="line">Element emp = (Element)node;</span><br><span class="line">System.out.println(emp.attributeValue(<span class="string">"no"</span>));</span><br><span class="line">System.out.println(emp.elementText(<span class="string">"name"</span>));</span><br><span class="line">System.out.println(emp.elementText(<span class="string">"age"</span>));</span><br><span class="line">System.out.println(emp.elementText(<span class="string">"salary"</span>));</span><br><span class="line">System.out.println(<span class="string">"==========================="</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">XPathTestor testor = <span class="keyword">new</span> XPathTestor();</span><br><span class="line"><span class="comment">// 查询   斜杠/代表根节点</span></span><br><span class="line"><span class="comment">//testor.xpath("/hr/employee");</span></span><br><span class="line"><span class="comment">//testor.xpath("//employee[@no=3311]");</span></span><br><span class="line"><span class="comment">//testor.xpath("//employee[1]");</span></span><br><span class="line"><span class="comment">//testor.xpath("//employee[last()]");</span></span><br><span class="line">testor.xpath(<span class="string">"//employee[position()&lt;3]"</span>);</span><br><span class="line"><span class="comment">//testor.xpath("//employee[1] | //employee[2]");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>LeetCode 002-两数相加</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/LeetCode%20002%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/LeetCode%20002%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      <content type="html"><![CDATA[<p>一道很简单的题，但是因为空指针的判别耗了很长时间…<br><a id="more"></a></p><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><blockquote><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p></blockquote><p><strong>示例</strong>  </p><blockquote><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807  </p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>我的代码(虽然过了但是耗时多)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode now = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode res = now;</span><br><span class="line">        <span class="keyword">while</span>( l1!=<span class="keyword">null</span> || l2!=<span class="keyword">null</span> )&#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag=<span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1==<span class="keyword">null</span>)&#123;</span><br><span class="line">                sum += <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                sum += l1.val;</span><br><span class="line">                <span class="keyword">if</span>( l1.next==<span class="keyword">null</span> ) l1=<span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    l1=l1.next;   </span><br><span class="line">                    flag=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l2==<span class="keyword">null</span>)&#123;</span><br><span class="line">                sum += <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sum += l2.val;</span><br><span class="line">                <span class="keyword">if</span>( l2.next==<span class="keyword">null</span>) l2=<span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    l2=l2.next;</span><br><span class="line">                    flag=<span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            now.val += sum;</span><br><span class="line">            <span class="keyword">if</span>( now.val&lt;<span class="number">10</span> )&#123;</span><br><span class="line">                <span class="keyword">if</span>( flag )</span><br><span class="line">                    now.next = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                now.next = <span class="keyword">new</span> ListNode(now.val/<span class="number">10</span>);</span><br><span class="line">                now.val %= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            now = now.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>官方题解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode p = l1, q = l2, curr = dummyHead;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span> || q != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = (p != <span class="keyword">null</span>) ? p.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (q != <span class="keyword">null</span>) ? q.val : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = carry + x + y;</span><br><span class="line">        carry = sum / <span class="number">10</span>;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="keyword">null</span>) p = p.next;</span><br><span class="line">        <span class="keyword">if</span> (q != <span class="keyword">null</span>) q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        curr.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我没想到一个carry用两次，可以放在下一个循环继续用。</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS小记</title>
      <link href="/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B0%8F%E8%AE%B0/"/>
      <url>/%E5%89%8D%E7%AB%AF/CSS/CSS%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>以下是CSS的一些知识及语法。<br><a id="more"></a></p><h4 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h4><p>css指<strong>层叠样式表</strong>（Cascading Style Sheets)<br>样式通常存储在样式表中<br>css可以统一不同浏览器显示的内容样式  </p><h4 id="CSS使用目的"><a href="#CSS使用目的" class="headerlink" title="CSS使用目的"></a>CSS使用目的</h4><p>定义如何显示html元素<br>解决内容（html元素）与表现（浏览器中的呈现）分离的问题  </p><h4 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h4><ol><li>CSS声明：</li></ol><ul><li>样式属性：background-color</li><li>操作符: :</li><li>样式值：#FFFFFF</li><li>分隔符： ；</li></ul><ol start="2"><li><p>声明块：同时使用多个声明语句</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line"><span class="attribute">background-color</span>:<span class="number">#FFFFFF</span>;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CSS规则：<br>1.选择器：定位页面中的元素<br>2.声明块：由多个CSS声明组成，最外层{}，可以使用多个声明内容  </p></li></ol><h4 id="定义CSS的两种方式："><a href="#定义CSS的两种方式：" class="headerlink" title="定义CSS的两种方式："></a>定义CSS的两种方式：</h4><p>内联样式方式、外联样式方式</p><ul><li>内联样式方式：<code>&lt;p style=&quot;color:lightcoral;font-weight:bolder;&quot; &gt;&lt;/p&gt;</code><br>内联方式设置样式只对当前标签有效</li><li>外联样式方式：<br>在style内通过元素选择器 设置元素的声明块。<br>此时相当于将CSS嵌入到HTML文件中。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!DOCSTYLE</span> <span class="attr">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">lang</span>=<span class="string">"en"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>定义CSS的样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">p&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">color</span><span class="selector-pseudo">:lightcoral</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">font-weight</span><span class="selector-pseudo">:bolder</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-weight:bolder;color:red;"</span>&gt;</span> 这是内联样式1.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"size:small;color:yellow;"</span>&gt;</span> 这是内联样式2.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是外联样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>注：若进行了内联样式，则其优先级更高。即外联样式声明了元素样式后，若该元素同时进行了内联样式声明，则依照内联样式显示。</p><h4 id="CSS选择器："><a href="#CSS选择器：" class="headerlink" title="CSS选择器："></a>CSS选择器：</h4><ul><li>ID选择器（ # +id值）</li><li>元素选择器（直接使用元素名称）</li><li>类（class）选择器（ . + class名称）</li><li>属性选择器（中括号里面写属性名称，如[title]）</li><li>后代元素选择器<br>A E :  指定需要修改的元素E与A为<strong>祖先和后代</strong>关系<br>A&gt;E :  指定需要修改的元素E与A为<strong>父元素和子元素</strong>关系<br>B+E :  指定需要修改的元素E为B的下一个<strong>兄弟</strong>元素<h4 id="伪类："><a href="#伪类：" class="headerlink" title="伪类："></a>伪类：</h4>主要用于<code>&lt;a&gt;</code>标签。<br>a:link – 链接的样式<br>a:hover – 鼠标悬停时的样式<br>a:active – 点击时的样式<br>a:visited – 访问过后的样式<h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><strong>::before</strong> – 为当前元素创建一个排在第一位的子元素。例q::before{ content:”&lt;”;}，会把页面中的引用标签<code>&lt;q&gt;</code>创建伪元素，把默认加的双引号变为&lt;;<br><strong>::after</strong> – 为当前元素创建一个排在最后一位的子元素。例q::after {content:”&gt;”;}，会把页面中的引用标签<code>&lt;q&gt;</code>创建伪元素，把默认加的双引号变为&gt;.<h4 id="CSS选择器优先级别"><a href="#CSS选择器优先级别" class="headerlink" title="CSS选择器优先级别"></a>CSS选择器优先级别</h4>1、内联&gt;外联<br>2、内联：id&gt;类选择器&gt;元素/伪类<br>3、在属性后加上：空格+!important让该属性升级为最高级别(会打乱默认的次序，少用)  <h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><strong>background</strong>:简写属性，作用是将背景属性设置在一个声明中<br><strong>background-color</strong>：设置元素的背景颜色<br><strong>background-image</strong>:把图像设置为背景（通过url定位文件中的图片路径，将图片设置为背景）<br><strong>background-position</strong>：设置背景图像的起始位置<br><strong>background-repeat</strong>:设置背景图像是否及如何重复<br>因为p元素作为一个块级元素出现，它默认占到页面的整个宽度，即使文本内容很少，但它依旧会占到页面的整个宽度，所以背景图片会重复显示以填充所有区域内容<br><strong>background-repeat</strong>:设置背景图像是否及如何重复<br><strong>repeat</strong>:表示水平和垂直方向都是重复显示的<br><strong>no-repeat</strong>:表示水平和垂直方向都是不重复显示的  <h5 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h5></li></ul><ol><li>无文本信息仅插入图片时，无法正常显示图片。这是由于未显示文本，导致分配的大小为：0，无法正常显示。此时需要手动设置 高height和宽width；</li><li>需要显示部分图片时，可以通过更改 高height和宽width来调节显示图片的大小。高和宽的数值正负代表图片的移动方向，即：需要显示图片中某一块时，高和宽都是负值。  <h4 id="CSS文本样式"><a href="#CSS文本样式" class="headerlink" title="CSS文本样式"></a>CSS文本样式</h4>color：设置字体颜色<br>text-align：文本水平对齐<br>text-decoration：向文本添加修饰<br>text-indent：文本首行缩进<br>vertical-align：文本垂直对齐</li></ol><p>关于文本水平、垂直居中：<a href="https://www.cnblogs.com/huchong/p/7875127.html" target="_blank" rel="noopener"></a>  </p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>font-family 指定文本的字体系列<br>font-size 指定文本的字体大小<br>font-style 指定文本的字体样式<br>font-weight 指定字体的粗细  </p><h4 id="列表与表格"><a href="#列表与表格" class="headerlink" title="列表与表格"></a>列表与表格</h4><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><p>list-style 用于把所有用于列表的属性设置于一个声明中<br>list-style-image 把图像设置为列表项标志<br>list-style -type 设置列表项标志的类型</p><h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><p>border 设置表格边框<br>border-collapse 设置边框是否被折叠成单个或隔开<br>width 定义表格的宽度<br>text-align 表格中文本对齐<br>padding 设置表格的填充(内边距)</p><h5 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h5><ul><li>内边距padding<br>padding： 使用缩写属性设置在一个声明中的所有填充属性<br>padding-bottom: 设置元素的底部填充<br>padding-left： 设置元素的左部填充<br>padding-right： 设置元素的右部填充<br>padding-top: 设置元素的顶部填充<br>注：<br>padding：全部<br>padding:上下 左右<br>padding：上 左右 下<br>padding：上 右 下 左  </li><li>外边距margin类似。</li><li>边框 border:10px black solid;<br>三个属性意思是：边框宽度 颜色 实/虚线  </li><li>Tips：<br>1.内外边距和边框的使用会使当前盒子变大<br>2.内边距享有当前盒子背景色  </li></ul><h4 id="CSS定位机制"><a href="#CSS定位机制" class="headerlink" title="CSS定位机制"></a>CSS定位机制</h4><h5 id="普通流-标准流"><a href="#普通流-标准流" class="headerlink" title="普通流(标准流):"></a>普通流(标准流):</h5><p>默认状态,从左往右, 从上到下排列<br>块元素：</p><ol><li>独占一行</li><li>可以设置宽、高</li><li>如果不设置宽度，宽度默认为容器的100%</li><li>div、p、h1-h6、ul、ol、li、dl、dt、dd(定义列表)  </li></ol><p>行内元素</p><ol><li>与其他元素同行显示</li><li>不可以设置宽、高</li><li>宽高就是文字或图片的宽高</li><li>span、a、b、i、u、em……</li></ol><h5 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h5><ol><li>只能使元素向左或向右移动, 不能上下移动</li><li>浮动元素碰到包含框 或另一个浮动框, 浮动停止</li><li>浮动元素之后的元素将围绕它, 之前的不受影响</li><li>浮动会脱离标准流<br>浮动的基础语法<br>float:left<br>float:right<br>float:none<br>float:inherit 继承父类的浮动效果</li></ol><p><strong>浮动的理解</strong><br>浮动可以实现块级元素在一行中横向排列。浮动的原理是：当前的块从当前的容器里面脱离出来，虽然浮动后脱离了文档流（容器）但是文本流还在，还是会占据文本空间（这里带来的问题是：原来下一个块的内容可能会被浮动的内容占满 使该块本身的内容溢出）<br>清除浮动是把浮动元素回归文档流, 撑起重启高度。  </p><p><strong>清除浮动语法</strong><br>clear:none | left | right |both;<br>none: 不清除浮动<br>left: 清除该元素左边的浮动<br>right: 清除该元素右边的浮动<br>both: 清除所有浮动<br>inherit: 继承父类清除浮动的值  </p><p><strong>清除浮动常用的方法</strong></p><ul><li><p>方法一：在浮动元素后使用一个空元素。<br>例如：<code>&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;</code>  </p></li><li><p>方法二：给浮动元素的容器添加overflow：hidden;<br>可同时添加 <code>*zoom:1 /*触发hasLayout 兼容IE6、7*/</code></p></li><li><p>方法三：使用CSS3的:after伪元素</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">visibility</span>: hidden;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;*zoom:1; /*触发hasLayout 兼容IE6、7*/&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法四：通过父级元素清除浮动 (较少使用)</p></li></ul><ol><li>父级元素定义height。只适用于高度固定的布局。</li><li>父级元素也一起浮动。不推荐, 会产生新的浮动问题。  </li></ol><h4 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h4><p>position:既是一个定位布局模块（提供与元素定位和层叠相关功能，是一个核心模块，又是一个属性<br>模块内包含：</p><ol><li>盒子模型的类型和尺寸</li><li>布局模型</li><li>元素之间的关系</li><li>视口大小、图像大小等其他相关方面  </li></ol><p>重要的定位模型：<br>static ：静态模型/自然模型<br>relative：相对定位模型<br>absolute：绝对定位模型<br>fixed：固定定位模型<br>sticky：磁铁定位模型  </p><p>static：<br>作用：使元素定位于 常规/自然流 中<br>特点：</p><ol><li>忽略 top/bottom/left/right 或者z-inherit声明</li><li>两个相邻的元素如果都设置外边距，最终外边距=两者外边距中最大的那个</li><li>具有固定width和height值的元素，若把左右外边距设置为auto，则左右外边距会自动扩大占满剩余宽度。造成水平居中效果。  </li></ol><p>relative：<br>作用: 使元素成为可定位的祖先元素<br>特点：  </p><ol><li>可以使用top/right/bottom/left/z-index相对于该元素的原位置进行偏移</li><li>相对定位的元素，原来在标准流中的位置依旧保留，后面元素接在元素原位置之后</li><li>任何元素都可设置relative, 它绝对定位的后代都可以相对它进行绝对定位</li><li>可以使的浮动元素发生偏移，并控制它们的堆叠顺序  </li></ol><p>absolute：<br>作用：使元素脱离常规流<br>特点：</p><ol><li>脱离常规流</li><li>设置尺寸要注意：百分比比的是最近定位祖先元素</li><li>若没有最近定位祖先元素，会以<code>&lt;body&gt;</code>为祖先元素</li><li>left/right/top/bottom若设置为0，它将对齐到最近定位祖先元素的各边，居中效果。</li><li>若left/right/top/bottom设置为auto，它将会回归到常规流  </li></ol><p>fixed ：<br>作用:  同absolute相同，使元素脱离常规流<br>特点： </p><ol><li>fixed相对于视口(用户当前可见界面)做绝对定位</li><li>固定定位元素不会随着视口滚动而滚动 </li><li>继承absolute特点 （left/right/top/bottom若设置为0，它将对齐到最近定位祖先元素的各边，居中效果。 若left/right/top/bottom设置为auto，它将会回归到常规流）</li></ol><p>sticky<br>磁铁定位/粘性定位/吸附定位<br>作用：relavtive+fixed的完美结合，制造出吸附效果<br>特点：</p><ol><li>如果产生偏移原位置还是会在常规流中，一亩三分地留着。</li><li>如果它的最近祖元素有滚动，那么它的偏移标尺就是最近祖先元素</li><li>如果最近祖先元素没有滚动 那么它的偏移标尺是视口。</li><li>上下左右的偏移规则  </li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>盒子模型</strong>: 通过改变元素的margin和padding来控制元素的移动。<br><strong>定位</strong>: 通过元素的位置移动改变出现在网页的相对位置。<br>先通过定位调整元素的大体位置, 再用盒子模型调整元素最后的位置</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML小记</title>
      <link href="/%E5%89%8D%E7%AB%AF/HTML/HTML%E5%B0%8F%E8%AE%B0/"/>
      <url>/%E5%89%8D%E7%AB%AF/HTML/HTML%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>由于要学习Java Web开发，先学习一下HTML。下面是一些基础知识。<br><a id="more"></a></p><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><p>标题标签共有六级：&lt;h1,2,3,4,5,6&gt;&lt;/……&gt;<br>如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>对应大小：h1,2,3,4,5,6–32px,24px,18px,16px,14px,12px<br>1em=16px  </p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>默认浏览器样式，空标签也会占位置（本来是空的，但由于浏览器可能默认设置为固定大小，因此需要自定义）；  </li><li>标签的默认浏览器可能造成部分问题，建议自定义；  </li></ol><p>设置段落标签的属性:在head内的style中设置<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">p&#123;</span></span><br><span class="line"><span class="undefined">margin: 0;</span></span><br><span class="line"><span class="undefined">padding: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如此，内外边距为0。</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>基本不用，一般在css中设置。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span>字体内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>size: 字体大小<br>face：字体集<br>color：颜色，三种表示法——名称，16进制，rgb坐标</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>HTML链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.makersy.top"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span> (新建一个窗口)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.makersy.top"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span> （在当前页面打开）</span><br></pre></td></tr></table></figure><p><strong>页面锚点</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#xxx"</span>&gt;</span>页面内锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span>（跳转到id为xxx的地方）</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"xxx"</span>&gt;</span> 你好<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>禁止跳转</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:; / javascript:void(0);"</span>&gt;</span>死链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>   ---这是一个死链接</span><br></pre></td></tr></table></figure></p><p><strong>去掉下划线、去掉指向链接时光标的手形</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a&#123;</span><br><span class="line">text-decoration: none;</span><br><span class="line">cursor: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li><p>无序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>定义概念的名字<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>概念的解释 主体<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>贴士：</strong></p><ol><li>type属性项目符号样式<code>&lt;ul type=&quot;&quot;&gt;&lt;/ul&gt;</code><br>（<em>disc</em>（实心圆）,<em>circle</em>（空心圆）,<em>square</em>(实心方形)，none表示不去设置它的项目符号样式，但会保留项目符号所在的位置）不建议使用！<br>有序标签ol无法设置项目符号，独具特色的顺序就是他的项目符号<br>定义列表也无法设置其项目符号</li><li>只用<code>&lt;ul&gt;&lt;/ul&gt;</code>无序列表就好了<br>以后看到样式，都不要通过html（或者元素本身属性）去设置，通过css。</li></ol><h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><ol><li>标签 <img></li><li><strong>作用</strong> 插入图像</li><li><strong>属性</strong> src（src这个属性是图片的地址，有这个属性才能实现图像效果。）</li><li><strong>支持格式</strong>：  </li></ol><ul><li>PNG、JPEG、GIF、PDF（引入的PDF必须是单页的）</li><li>非标签方式：background</li></ul><ol start="5"><li>alt：在图片无法显示比如地址写错时，提示用户这里本来放的是什么</li><li>class:标识，用来指定标签的类名<br>例：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"logo"</span> <span class="attr">src</span>=<span class="string">"https://img1.mukewang.com/5b8cef4200019d9a02000200-140-140.jpg"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 非标签方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.logo&#123;</span></span><br><span class="line"><span class="undefined">background: url(https://img1.mukewang.com/5b8cef4200019d9a02000200-140-140.jpg);</span></span><br><span class="line"><span class="undefined">width: 140px;</span></span><br><span class="line"><span class="undefined">height: 150px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="插入本地图像"><a href="#插入本地图像" class="headerlink" title="插入本地图像"></a>插入本地图像</h4><p><strong>路径</strong>：绝对路径– <em>C:\html\logo.jpg</em>，相对路径– 与文件同级目录下– <em>./img/logo.png</em> 或者 <em>../logo.png</em></p><h3 id="div"><a href="#div" class="headerlink" title="div"></a>div</h3><p><code>&lt;div&gt;&lt;/div&gt;</code> 万能标签 无语义标签<br>作用：布局<br>贴士：非常常用且重要 现代布局常用  </p><h3 id="块级元素与行内元素"><a href="#块级元素与行内元素" class="headerlink" title="块级元素与行内元素"></a>块级元素与行内元素</h3><p>块级元素垂直分段排列。行内元素水平一行内一个挨着一个。<br><code>&lt;span&gt;包裹一行内容&lt;/span&gt;</code><br>块级元素大小取决于开发者的设置，行内元素大小取决于内容  </p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><strong>单行注释</strong>：<code>&lt;!--注释文本--&gt;</code><br><strong>多行注释</strong>：<code>&lt;!--注释开始--&gt;...&lt;!--注释结束--&gt;</code>，这里，多行注释不会隐藏注释间的内容，只是开发时的提示。<br><strong>条件注释</strong>：<code>&lt;!--[if IE 6]&gt;注释内容&lt;![endif]--&gt;</code>，这里，条件注释主要用于浏览器兼容性。条件注释只在IE10以下版本的浏览器中生效。提示浏览器较旧。</p><h3 id="一些不常用的标签"><a href="#一些不常用的标签" class="headerlink" title="一些不常用的标签"></a>一些不常用的标签</h3><p>以下标签一般都不用！！！<br>文本格式化标签（为避免浏览器差异，一般不用，多用css设置）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗2<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>大号字体<span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调字体(斜体)<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体/图标<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>小号字体<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>预格式文本标签：<code>&lt;pre&gt;一般这里是预览的代码&lt;/pre&gt;</code><br>引用标签：<code>&lt;blockquote&gt;引用来的&lt;/blockquote&gt;</code><br>删除线标签：<code>&lt;del&gt;删除的内容&lt;/del&gt;</code><br>下划线标签:<code>&lt;ins&gt;下划线的内容&lt;/ins&gt;</code></p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无序列表 --&gt;</span></span><br><span class="line">野生动物</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"circle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>栗子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>煎饼果子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>台湾饭团<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>正数<span class="tag">&lt;/<span class="name">dt</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>大于0的自然数<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>标签<code>&lt;form&gt; &lt;/form&gt;</code><br>作用：手机用户输入的内容（文本、文件）<br>属性：<br>（1）action：提交到的服务端地址<br>（2）method：指定提交时用哪种HTTP方法：POST/GET<br>（3）name:标识<br>（4）autocomplete:浏览器是否可以填充<br>（5）enctype:指定表单内容编码<br>input:文本、密码、单选、多选、按钮、数字、日期、颜色、范围、邮件、URL、文件<br>select:下拉列表<br>textarea:文本域<br>button:按钮<br>inout(单尖括号标签)<br>文本：<code>&lt;input type=&quot;text&quot;maxlength=&quot;&quot;(最大输入框长度)value=&quot;&quot;/&gt;</code><br>密码：<code>&lt;input type=&quot;password&quot;value=&quot;&quot;/&gt;</code><br>单选：<code>&lt;input type=&quot;radio&quot; name=&quot;&quot;vaule=&quot;&quot;/&gt;</code>做单选操作，name要相同<br>多选:<code>&lt;input type=&quot;checkbox&quot;name=&quot;&quot;value=&quot;checked&quot;/&gt;(checked)</code>默认选中<br>按钮：<code>&lt;input type=&quot;button&quot;value=&quot;&quot;/&gt;</code><br>数字:<code>&lt;input type=&quot;number&quot;/&gt;</code><br>日期：<code>&lt;input type=&quot;date&quot;/&gt;</code><br>颜色：<code>&lt;input type=&quot;color&quot;/&gt;</code>(由于兼容性问题不是很常用)<br>范围:<code>&lt;input type=&quot;range&quot;min=&quot;&quot; max=&quot;&quot;/&gt;</code><br>邮件:<code>&lt;input type=&quot;email&quot;/&gt;</code><br>提交按钮:<code>&lt;input type=&quot;submit&quot;value=&quot;提交&quot;/&gt;</code><br>URL:<code>&lt;input type=&quot;url&quot;/&gt;</code>(和邮件一样自带格式校验)<br>文件：<code>&lt;input type=&quot;file&quot;mulitple=&quot;multiple&quot;(多个文件)&gt;</code><br><strong>select</strong>：下拉列表<br>如果<code>&lt;select&gt;</code>标签中设置了multiple或size属性的话,那么select就是列表了，不是下拉菜单；不设置是下拉菜单，所以代码实现了一个列表。<br>multiple多选，size显示可见选项数目。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">selected</span>(设置默认值)&gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span> &gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span> &gt;</span> <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">textarea：文本域</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">textarea&#123;</span></span><br><span class="line"><span class="undefined">resize:none;(使其没有可拖拽能力）</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">""</span>(决定有几行高) <span class="attr">cols</span>=<span class="string">""</span>(决定有多宽）&gt;</span> 。。。。。（默认值） <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="undefined">button：按钮</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">""</span>(可以指明三个值 <span class="attr">1</span>、<span class="attr">button</span> 普通按钮 <span class="attr">2</span>、<span class="attr">submit</span> 带提交行为 <span class="attr">3</span>、<span class="attr">reset</span> 重置） <span class="attr">form</span>=<span class="string">"(此处应该是表单的name) "</span>&gt;</span>提交（设置名字）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://img.mukewang.com/climg/5aabfbff000174ce12800720.jpg" alt="HTML总结"></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>爬虫笔记</title>
      <link href="/python/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
      <url>/python/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>python爬虫笔记<br><a id="more"></a></p><h3 id="判断请求是否成功"><a href="#判断请求是否成功" class="headerlink" title="判断请求是否成功"></a>判断请求是否成功</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> response.status_code==<span class="number">200</span></span><br></pre></td></tr></table></figure><h3 id="字符串格式化的一种方式"><a href="#字符串格式化的一种方式" class="headerlink" title="字符串格式化的一种方式"></a>字符串格式化的一种方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"你&#123;&#125;好"</span>.format(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="使用代理ip"><a href="#使用代理ip" class="headerlink" title="使用代理ip"></a>使用代理ip</h3><ul><li>准备一堆ip地址，组成ip池，随机选择一个ip来使用</li><li><p>如何随机选择代理ip</p><ul><li>{“ip”:ip,”times”:0}</li><li>[{},{},{},{},{}],对这个ip的列表进行排序，按照使用次数进行排序</li><li>选择使用次数较少的10个ip，从中随机选择一个</li></ul></li><li><p>检查ip的可用性  </p><ul><li>可以使用requests添加超时参数，判断ip地址的质量  </li><li>在线代理ip质量检测网站</li></ul></li></ul><h3 id="携带cookie请求"><a href="#携带cookie请求" class="headerlink" title="携带cookie请求"></a>携带cookie请求</h3><ul><li>尽量不使用cookie</li><li>携带一堆cookie进行请求，把cookie组成cookie池</li></ul><h3 id="请求登陆之后的网站的思路"><a href="#请求登陆之后的网站的思路" class="headerlink" title="请求登陆之后的网站的思路"></a>请求登陆之后的网站的思路</h3><ul><li>实例化session</li><li>先使用session发送请求，登陆对网站，把cookie保存在session中</li><li>再使用session请求登录之后才能访问的网站，sesssion能够自动携带登陆成功时保存在其中的cookie，进行请求</li></ul><h3 id="不发送post请求，使用cookie获取登陆后的页面"><a href="#不发送post请求，使用cookie获取登陆后的页面" class="headerlink" title="不发送post请求，使用cookie获取登陆后的页面"></a>不发送post请求，使用cookie获取登陆后的页面</h3><ul><li>cookie过期时间很长的网站</li><li>在cookie过期之前能够拿到所有的数据，比较麻烦</li><li>配合其他程序一起使用，其他程序专门其获取cookie，当前程序专门请求页面</li></ul><h3 id="字典推导式，列表推导式"><a href="#字典推导式，列表推导式" class="headerlink" title="字典推导式，列表推导式"></a>字典推导式，列表推导式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookies = <span class="string">"uuid_tt_dd=10_18697420810-1541514998525-406120; dc_session_id=10_1541514998525.130001; c_adb=1; smidV2=2018110622540004c9a404e4b4418224a1bc1f0afbaf24004db7a451c1dc9c0; UN=makersy; TY_SESSION_ID=bcb2fab5-1594-432f-b08b-77ff1c25478c; SESSION=04780891-f506-4bae-9eb9-7bee9b0f01b6; UserName=makersy; UserInfo=TY72nyXcSQ4kxcpYdP3noqwQsV904wqUfUrjssi1EYiqf77of1nXIX31igaPjkMfWt%2FBg37Ty5yCAFxluyxuwvK%2BjTb8WKRG2o8PpCGW7eCE5ImRX5bUUNkAvcYMhTjY; UserNick=makersy; AU=7FA; BT=1541516799322; UserToken=TY72nyXcSQ4kxcpYdP3noqwQsV904wqUfUrjssi1EYiqf77of1nXIX31igaPjkMfWt%2FBg37Ty5yCAFxluyxuwvK%2BjTb8WKRG2o8PpCGW7eAvjKefqLie1zAAltRYdzP1Sk%2Bfm7yuJ%2FP%2Fbsd6wSQVGMnSmTWc8bbv2HgJOkqFDhc%3D; ARK_ID=JSc5d36a4d0c44c361b2667ed6147b5607c5d3; dc_tos=phs2bi"</span></span><br><span class="line">cookies = &#123;i.split(<span class="string">"="</span>)[<span class="number">0</span>]:i.split(<span class="string">"="</span>)[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> cookies.split(<span class="string">"; "</span>)&#125;</span><br></pre></td></tr></table></figure><h3 id="获取登陆后的页面的三种方式"><a href="#获取登陆后的页面的三种方式" class="headerlink" title="获取登陆后的页面的三种方式"></a>获取登陆后的页面的三种方式</h3><ul><li>实例化session，使用session发送post请求，在使用他获取登陆后的页面</li><li>headers中添加cookie键，值为cookie字符串</li><li>在请求方法中添加cookie参数，接受字典形式的cookie，字典形式的cookie中的键是cookie的name对应的值，值是cookie的value对应的值</li></ul>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java连接高版本mysql数据库(8.0)的坑</title>
      <link href="/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/java%E8%BF%9E%E6%8E%A5%E9%AB%98%E7%89%88%E6%9C%ACmysql%E6%95%B0%E6%8D%AE%E5%BA%93-8-0-%E7%9A%84%E5%9D%91/"/>
      <url>/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/java%E8%BF%9E%E6%8E%A5%E9%AB%98%E7%89%88%E6%9C%ACmysql%E6%95%B0%E6%8D%AE%E5%BA%93-8-0-%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>今天在写java连接mysql数据库时，遇到了无法连接的问题。<br><a id="more"></a><br>报错信息如下:  </p><p>Loading class ‘com.mysql.jdbc.Driver’. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver’. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</p><p>Sat Sep 22 16:28:36 GMT+08:00 2018 WARN: Establishing SSL connection without server’s identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn’t set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to ‘false’. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.</p><p>java.sql.SQLException: The server time zone value ‘???ú±ê×??±??’ is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</p><p>这三段意思是说：</p><ul><li>驱动不再是之前的com.mysql.jdbc.Driver而是’com.mysql.cj.jdbc.Driver’；</li><li>mysql8.0不需要使用ssl连接，因此需要设置手动设置useSSL=false；</li><li>mysql返回的时间与实际不一样，需要设置在jdbc连接的url后面加上serverTimezone=GMT(即时区)。  </li></ul><p>因此应该这么写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//Class.forName("com.mysql.jdbc.Driver");</span></span><br><span class="line">conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost/EXAMPLE?useSSL=false&amp;serverTimezone=GMT"</span>,<span class="string">"root"</span>,<span class="string">"password"</span>);</span><br><span class="line"><span class="comment">//conn = DriverManager.getConnection("jdbc:mysql://localhost/EXAMPLE","root","password");</span></span><br></pre></td></tr></table></figure></p><p>注释里是之前的写法。</p>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>String&amp;StringBuffer</title>
      <link href="/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/String-StringBuffer/"/>
      <url>/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/String-StringBuffer/</url>
      <content type="html"><![CDATA[<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><a id="more"></a><p>String是Java中很常见的类，是一个final修饰的<strong>不可变</strong>的数组，用来存放字符的容器。不可变是什么意思呢，意思是被赋值后就不能被改变了，如果再进行修改的话实质上是创建一个新对象，并将引用指向新对象，原来的对象被当做垃圾回收掉了。这是效率很低的。</p><hr><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><strong>1.求字符串某一位置字符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span><span class="comment">//返回字符串中指定位置的字符；注意字符串中第一个字符索引是0，最后一个是length()-1。</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"asdfzxc"</span>);</span><br></pre></td></tr></table></figure><p><strong>2获取角标</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Int <span class="title">indexOf</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s=”Java”;    Int a=s.indexOf(a);</span><br></pre></td></tr></table></figure><p><strong>3判断</strong></p><ul><li><strong>字符串是否包含某个字符串</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(str)</span><span class="comment">//判断源字符串是否包含str字符串并返回boolean值</span></span></span><br></pre></td></tr></table></figure><p>例如：String str=”My love Java”;</p><p>Boolean b=str.contains(love);</p><p>结果：true</p><ul><li><strong>字符串是否有内容</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>例如：booleanb=str.isEmpty();</p><ul><li><strong>字符串是否以指定内容开始</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(str)</span></span></span><br></pre></td></tr></table></figure><p>例如：booleanb=str.startsWith(“My”);</p><ul><li><strong>字符串是否以指定内容结束</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(str)</span></span>;</span><br></pre></td></tr></table></figure><p>用法如上</p><ul><li><strong>判断内容是否相同</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(str)</span>      <span class="comment">//String类重写了Object类中的equals方法，该方法用于判断字符串内容是否相同而非判断地址</span></span></span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str1=”Java”;</span><br><span class="line"></span><br><span class="line">String str2=”love”;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> s=str1.equals(str2);</span><br></pre></td></tr></table></figure><ul><li><strong>判断内容是否相同，并忽略大小写</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Boolean <span class="title">equalsIngoreCase</span><span class="params">(str)</span></span></span><br></pre></td></tr></table></figure><p>用法同上</p><p><strong>4提取子串</strong><br>用String类的substring方法可以提取字符串中的子串，该方法有两种常用参数:</p><ul><li>public String substring(int beginIndex)    //该方法从beginIndex位置起，从当前字符串中取出剩余的字符作为一个新的字符串返回。</li><li>public String substring(int beginIndex, int endIndex)    //该方法从beginIndex位置起，从当前字符串中取出到endIndex-1位置的字符作为一个新的字符串返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> String str1 = <span class="keyword">new</span> String(<span class="string">"asdfzxc"</span>);</span><br><span class="line"><span class="number">2</span> String str2 = str1.substring(<span class="number">2</span>);<span class="comment">//str2 = "dfzxc"</span></span><br><span class="line"><span class="number">3</span> String str3 = str1.substring(<span class="number">2</span>,<span class="number">5</span>);<span class="comment">//str3 = "dfz"</span></span><br></pre></td></tr></table></figure><p><strong>5字符串比较</strong></p><ul><li>public int compareTo(StringanotherString)        //该方法是对字符串内容按字典顺序进行大小比较，通过返回的整数值指明当前字符串与参数字符串的大小关系。若当前对象比参数大则返回正整数，反之返回负整数，相等返回0。</li><li>public int compareToIgnore(StringanotherString)    //与compareTo方法相似，但忽略大小写。</li><li>public boolean equals(ObjectanotherObject)    //比较当前字符串和参数字符串，在两个字符串相等的时候返回true，否则返回false。</li></ul><p><strong>6字符串中字符的大小写转换</strong></p><ul><li>public String toLowerCase()    //返回将当前字符串中所有字符转换成小写后的新串</li><li>public String toUpperCase()    //返回将当前字符串中所有字符转换成大写后的新串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> String str = <span class="keyword">new</span> String(<span class="string">"asDF"</span>);</span><br><span class="line"><span class="number">2</span> String str1 = str.toLowerCase();<span class="comment">//str1 = "asdf"</span></span><br><span class="line"><span class="number">3</span> String str2 = str.toUpperCase();<span class="comment">//str2 = "ASDF"</span></span><br></pre></td></tr></table></figure><p><strong>7字符串中字符的替换</strong></p><ul><li>public String replace(char oldChar, charnewChar)    //用字符newChar替换当前字符串中所有的oldChar字符，并返回一个新的字符串。</li><li>public String replaceFirst(String regex,String replacement)        //该方法用字符replacement的内容替换当前字符串中遇到的第一个和字符串regex相匹配的子串，应将新的字符串返回。</li><li>public String replaceAll(String regex,String replacement)             //该方法用字符replacement的内容替换当前字符串中遇到的所有和字符串regex相匹配的子串，应将新的字符串返回。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> String str = <span class="string">"asdzxcasd"</span>;</span><br><span class="line"><span class="number">2</span> String str1 = str.replace(<span class="string">'a'</span>,<span class="string">'g'</span>);<span class="comment">//str1 = "gsdzxcgsd"</span></span><br><span class="line"><span class="number">3</span> String str2 = str.replace(<span class="string">"asd"</span>,<span class="string">"fgh"</span>);<span class="comment">//str2 = "fghzxcfgh"</span></span><br><span class="line"><span class="number">4</span> String str3 = str.replaceFirst(<span class="string">"asd"</span>,<span class="string">"fgh"</span>);<span class="comment">//str3 = "fghzxcasd"</span></span><br><span class="line"><span class="number">5</span> String str4 = str.replaceAll(<span class="string">"asd"</span>,<span class="string">"fgh"</span>);<span class="comment">//str4 = "fghzxcfgh"</span></span><br><span class="line">字符串分隔</span><br><span class="line">String[] split(String str)<span class="comment">//将str作为分隔符进行字符串分解，分解后的字字符串在字符串数组中返回。</span></span><br><span class="line"><span class="number">1</span> String str = <span class="string">"asd!qwe|zxc#"</span>;</span><br><span class="line"><span class="number">2</span> String[] str1 = str.split(<span class="string">"!|#"</span>);<span class="comment">//str1[0] = "asd";str1[1] = "qwe";str1[2] = "zxc";</span></span><br></pre></td></tr></table></figure><p><strong>8字符串与基本类型的转换</strong></p><p>字符串转换为基本类型java.lang包中有Byte、Short、Integer、Float、Double类的调用方法:</p><ul><li><p>public static byte parseByte(String s)</p></li><li><p>public static short parseShort(String s)</p></li><li><p>public static short parseInt(String s)</p></li><li><p>public static long parseLong(String s)</p></li><li><p>public static float parseFloat(String s)</p></li><li><p>public static double parseDouble(String s)</p></li></ul><p>字符串基本类型时，如int short dobule字符串中的数据一定要是数字，否则会出现异常。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">int</span> n = Integer.parseInt(<span class="string">"12"</span>);</span><br><span class="line"><span class="number">2</span> <span class="keyword">float</span> f = Float.parseFloat(<span class="string">"12.34"</span>);</span><br><span class="line"><span class="number">3</span> <span class="keyword">double</span> d = Double.parseDouble(<span class="string">"1.124"</span>);</span><br></pre></td></tr></table></figure><p><strong>9基本类型转换为字符串类型</strong></p><p>String类中提供了String valueOf()放法，用作基本类型转换为字符串类型。</p><ul><li>static String valueOf(char data[])</li><li>static String valueOf(char data[], intoffset, int count)</li><li>static String valueOf(boolean b)</li><li>static String valueOf(char c)</li><li>static String valueOf(int i)</li><li>static String valueOf(long l)</li><li>static String valueOf(float f)</li><li>static String valueOf(double d)</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> String s1 = String.valueOf(<span class="number">12</span>);</span><br><span class="line"><span class="number">2</span> String s1 = String.valueOf(<span class="number">12.34</span>);</span><br></pre></td></tr></table></figure><p><strong>10和数组有关的方法</strong></p><table><thead><tr><th style="text-align:left">返回类型</th><th style="text-align:left">方法名</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:left">byte[]</td><td style="text-align:left">getBytes()</td><td style="text-align:left">将一个字符串转换成字节数组</td></tr><tr><td style="text-align:left">String[]</td><td style="text-align:left">split(String)</td><td style="text-align:left">将一个字符串按照指定内容劈开</td></tr><tr><td style="text-align:left">char[]</td><td style="text-align:left">toCharArray()</td><td style="text-align:left">将一个字符串转换成字符数组</td></tr></tbody></table><p><strong>11判断是否为空</strong></p><p><code>public boolean isEmpty()</code></p><p><strong>当且仅当</strong> length()为 0 时返回 true。</p><h2 id="String-Buffer"><a href="#String-Buffer" class="headerlink" title="String Buffer"></a>String Buffer</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li><p>public StringBuffer append(boolean b)</p><p>该方法的作用是追加内容到当前StringBuffer对象的末尾，类似于字符串的连接。调用该方法以后，StringBuffer对象的内容也发生改变，</p></li><li><p>public StringBuffer deleteCharAt(int index)</p><p>该方法的作用是删除指定位置的字符，然后将剩余的内容形成新的字符串。</p></li><li><p>public StringBuffer deleteCharAt(int index)</p></li><li><p>该方法的作用是删除指定位置的字符，然后将剩余的内容形成新的字符串。</p></li><li><p>public StringBuffer insert(int offset, boolean b)</p><p>该方法的作用是在StringBuffer对象中插入内容，然后形成新的字符串。</p></li><li><p>public StringBuffer reverse()</p><p>该方法的作用是将StringBuffer对象中的内容反转，然后形成新的字符串。</p></li><li><p>public void setCharAt(int index, char ch)</p><p>该方法的作用是修改对象中索引值为index位置的字符为新的字符ch。</p></li></ul>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java大数基本用法</title>
      <link href="/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%A4%A7%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Java/Java%E5%A4%A7%E6%95%B0%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>最近学Java有接触到大数运算，感觉比用c++自己写个算法方便太多，在此记录下代码。<br><a id="more"></a><br>java中用于操作大数的类主要有两个，一个是BigInteger，代表大整数类，用于对大整数进行操作；另一个是BigDecimal，代表高精度类，用于对比较大或精度比较高的浮点型数据进行操作。两个比较像。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><h3 id="1、新建一个值为123的大整数对象"><a href="#1、新建一个值为123的大整数对象" class="headerlink" title="1、新建一个值为123的大整数对象"></a>1、新建一个值为123的大整数对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigInteger a=<span class="keyword">new</span> BigInteger(“<span class="number">123</span>”); <span class="comment">//第一种，参数是字符串 </span></span><br><span class="line">BigInteger a=BigInteger.valueOf(<span class="number">123</span>); <span class="comment">//第二种，参数可以是int、long</span></span><br></pre></td></tr></table></figure><h3 id="2、大整数的四则运算"><a href="#2、大整数的四则运算" class="headerlink" title="2、大整数的四则运算"></a>2、大整数的四则运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a. add(b); <span class="comment">//a,b均为BigInteger类型，加法 </span></span><br><span class="line">a.subtract(b); <span class="comment">//减 法 </span></span><br><span class="line">a.divide(b); <span class="comment">//除法 </span></span><br><span class="line">a.multiply(b); <span class="comment">//乘法</span></span><br></pre></td></tr></table></figure><h3 id="3、大整数比较大小"><a href="#3、大整数比较大小" class="headerlink" title="3、大整数比较大小"></a>3、大整数比较大小</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.equals(b); <span class="comment">//如果a、b相等返回true否则返回false </span></span><br><span class="line">a.compareTo(b); <span class="comment">//a小于b返回-1，等于返回0，大于返回1</span></span><br></pre></td></tr></table></figure><h3 id="4、常用方法"><a href="#4、常用方法" class="headerlink" title="4、常用方法"></a>4、常用方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.mod(b); <span class="comment">//求余 </span></span><br><span class="line">a.gcd(b); <span class="comment">//求最大公约数 </span></span><br><span class="line">a.max(b); <span class="comment">//求最大值 </span></span><br><span class="line">a.min(b); <span class="comment">//求最小值</span></span><br></pre></td></tr></table></figure><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1002" target="_blank" rel="noopener">HDU1002 a+b</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> t = sc.nextInt();</span><br><span class="line">    BigInteger a, b, c;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=t; i++ ) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Case "</span> + i + <span class="string">":"</span>);</span><br><span class="line">    a = sc.nextBigInteger();</span><br><span class="line">    b = sc.nextBigInteger();</span><br><span class="line">    System.out.println(a + <span class="string">" + "</span> + b + <span class="string">" = "</span> + a.add(b));</span><br><span class="line">    <span class="keyword">if</span>( i!=t ) &#123;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018CCPC-网络赛 1001 Buy and Resell</title>
      <link href="/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/(HDU)2018CCPC-%E7%BD%91%E7%BB%9C%E8%B5%9B%201001%20Buy%20and%20Resell/"/>
      <url>/%E7%AE%97%E6%B3%95/%E8%B4%AA%E5%BF%83/(HDU)2018CCPC-%E7%BD%91%E7%BB%9C%E8%B5%9B%201001%20Buy%20and%20Resell/</url>
      <content type="html"><![CDATA[<h1 id="Buy-and-Resell"><a href="#Buy-and-Resell" class="headerlink" title="Buy and Resell"></a>Buy and Resell</h1><blockquote><p>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 65536/65536 K (Java/Others)<br>Total Submission(s): 2282    Accepted Submission(s): 359</p><a id="more"></a></blockquote><p><strong>Problem Description</strong></p><blockquote><p>The Power Cube is used as a stash of Exotic Power. There are n cities numbered 1,2,…,n where allowed to trade it. The trading price of the Power Cube in the i-th city is ai dollars per cube. Noswal is a foxy businessman and wants to quietly make a fortune by buying and reselling Power Cubes. To avoid being discovered by the police, Noswal will go to the i-th city and choose exactly one of the following three options on the i-th day:</p><ol><li>spend ai dollars to buy a Power Cube</li><li>resell a Power Cube and get ai dollars if he has at least one Power Cube</li><li>do nothing</li></ol><p>Obviously, Noswal can own more than one Power Cubes at the same time. After going to the n cities, he will go back home and stay away from the cops. He wants to know the maximum profit he can earn. In the meanwhile, to lower the risks, he wants to minimize the times of trading (include buy and sell) to get the maximum profit. Noswal is a foxy and successful businessman so you can assume that he has infinity money at the beginning.</p></blockquote><p><strong>Input</strong></p><blockquote><p>There are multiple test cases. The first line of input contains a positive integer T (T≤250), indicating the number of test cases. For each test case:<br>The first line has an integer n. (1≤n≤105)<br>The second line has n integers a1,a2,…,an where ai means the trading price (buy or sell) of the Power Cube in the i-th city. (1≤ai≤109)<br>It is guaranteed that the sum of all n is no more than 5×105.</p></blockquote><p><strong>Output</strong></p><blockquote><p>For each case, print one line with two integers —— the maximum profit and the minimum times of trading to get the maximum profit.</p></blockquote><p><strong>Sample Input</strong></p><blockquote><p>3<br>4<br>1 2 10 9<br>5<br>9 5 9 10 5<br>2<br>2 1</p></blockquote><p><strong>Sample Output</strong></p><blockquote><p>16 4<br>5 2<br>0 0</p></blockquote><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有n个位置，每个位置有一个价格a[i]，按从1-n顺序经过每个位置，每个位置都可以进行三种操作之一且只能进行一次：1) 花a[i]元购买一个物品；2）卖掉一个手上的物品得到a[i]元； 3）什么也不做。<br>假设金钱无限，初始没物品，身上可以装无限个物品，求走完所有城市后所能得到的最大利润和得到该最大利润所需的最少操作数。  </p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>低买高卖，此题可应用贪心的思想，每次遇到一个价格时，总是与前面的最低价进行“抵消”，这样利润最大。但是也许后面还有比这个价格更高的，所以需要“反悔”的机会，把错误时机卖出的损失挽回。因此优先队列（价格低标记值大先出队）代表已有物品，每到一个城市，先判断此地价格是不是比队列的最低价格高，是的话就可以将最低价格的物品卖掉了，再把差值加到利润上。然后最低价弹出，在队列里插入此地价格两个，分别以1和0标记（已经卖过一次，尚未卖过）。如此循环，假如后面有更高价想反悔，就把标记为1的错误卖出值弹出，队中标记为0的代表这个值现在是未被使用，可参与买卖。<br>举个例子：样例中有“1 2 10 9”这个情况，首先花1元买物品，遇到2时我会把1给卖出，队里插入“2 1”“2 0”，利润为-1+2=1。后来又遇到10，2就属于贱卖当然不行，此时队里有两个2，让标记为1的出队，剩下的2的标记为0，代表没有被使用过，插入“10 1”“10 0”，此时利润值为1-2+10=9（跟1买10卖的利润是一样的）。下一个遇到9，此时队中最小为2，消之，利润计算为9-2+9=16。<br>至于操作次数计算就简单了，只需要每次在标记为0的价格出队时总次数+2即可。<br>以下为代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> v, s;   <span class="comment">//v--价格，s--状态</span></span><br><span class="line">  node(<span class="keyword">int</span> a, <span class="keyword">int</span> b):v(a), s(b)&#123;&#125;</span><br><span class="line">  <span class="comment">//重载&lt;运算符，使优先队列让v小的先出队，v相同则s大的先出队</span></span><br><span class="line">  <span class="comment">//优先队列默认把结构体按从大到小排序，重载&lt;运算符使其按照自定义顺序排序</span></span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> node &amp;a) <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( v==a.v ) <span class="keyword">return</span> s&lt;a.s;</span><br><span class="line">    <span class="keyword">return</span> v&gt;a.v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  <span class="keyword">while</span>( t-- )&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    LL profit=<span class="number">0</span>, cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    priority_queue&lt;node&gt; que;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++ )&#123;</span><br><span class="line">      <span class="keyword">int</span> c;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c);</span><br><span class="line">      <span class="keyword">if</span>( !que.empty() &amp;&amp; que.top().v&lt;c )&#123;</span><br><span class="line">        node tmp=que.top();</span><br><span class="line">        profit=profit-tmp.v+c;</span><br><span class="line">        <span class="keyword">if</span>( tmp.s==<span class="number">0</span> ) cnt+=<span class="number">2</span>;  <span class="comment">//当前最小值之前没有买过，次数加2(以最小值买，以最大值卖)</span></span><br><span class="line">        que.pop();</span><br><span class="line">        que.push(node(c, <span class="number">1</span>));</span><br><span class="line">        que.push(node(c, <span class="number">0</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        que.push(node(c, <span class="number">0</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, profit, cnt);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C/C++ </tag>
            
            <tag> 队列 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(HDU)2018CCPC - 网络赛 1004 Find Integer</title>
      <link href="/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/(HDU)2018CCPC-%E7%BD%91%E7%BB%9C%E8%B5%9B%201004%20Find%20Integer/"/>
      <url>/%E7%AE%97%E6%B3%95/%E6%95%B0%E8%AE%BA/(HDU)2018CCPC-%E7%BD%91%E7%BB%9C%E8%B5%9B%201004%20Find%20Integer/</url>
      <content type="html"><![CDATA[<h1 id="Find-Integer"><a href="#Find-Integer" class="headerlink" title="Find Integer"></a>Find Integer</h1><blockquote><p>Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/65536 K (Java/Others)Total Submission(s): 0 Accepted Submission(s): 0Special Judge  </p></blockquote><a id="more"></a><p><strong>Problem Description</strong></p><blockquote><p>people in USSS love math very much, and there is a famous math problem .<br>give you two integers n,a,you are required to find 2 integers b,c such that an+bn=cn.</p></blockquote><p><strong>Input</strong></p><blockquote><p>one line contains one integer T;(1≤T≤1000000)<br>next T lines contains two integers n,a;(0≤n≤1000,000,000,3≤a≤40000)</p></blockquote><p><strong>Output</strong></p><blockquote><p>print two integers b,c if b,c exits;(1≤b,c≤1000,000,000);<br>else print two integers -1 -1 instead.</p></blockquote><p><strong>Sample Input</strong></p><blockquote><p>1 2 3</p></blockquote><p><strong>Sample Output</strong></p><blockquote><p>4 5</p></blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>本题给出一个<a href="https://baike.baidu.com/item/%E8%B4%B9%E9%A9%AC%E5%A4%A7%E5%AE%9A%E7%90%86/80363?fr=aladdin" target="_blank" rel="noopener">费马大定理</a>的表达式 —— $a^n+b^n=c^n,(a,b,c) \in Z$。 题目意思是给定该公式中的a和n，求满足公式的b和c并输出，若不存在满足公式的b和c，则输出”-1 -1”。所以当n&gt;2或n==0时输出”-1 -1”；当n=1时输出满足方程的第一组解：1 a+1；当n=2时输出勾股数。<br><strong>求勾股数</strong>：这种前n项固定的情况一般可以采用打表法。三层循环肯定是不行的，这么大数据量肯定tle。$a^2=c^2-b^2=(c+b)(c-b)$。令$x=c+b,y=c-b$，于是$a^2=xy$。从x着手，当满足a<sup>2</sup>可以整除x时就可以求出符合条件的b，c。<br>代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll b,c;</span><br><span class="line">&#125;gg[<span class="number">40007</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(gg, <span class="number">0</span>, <span class="keyword">sizeof</span>(gg));</span><br><span class="line">    <span class="keyword">for</span>( ll i=<span class="number">3</span>; i&lt;=<span class="number">40000</span>; i++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>( ll j=<span class="number">1</span>; j&lt;i; j++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>( i*i%j==<span class="number">0</span> )&#123;   <span class="comment">//若a^2可以整除(c+b),则此式成立</span></span><br><span class="line">                ll x = j;</span><br><span class="line">                ll y = i*i/j;</span><br><span class="line">                <span class="keyword">if</span>( (y-x)%<span class="number">2</span>==<span class="number">0</span> )&#123;   <span class="comment">//若b为整数,则c也是整数</span></span><br><span class="line">                    gg[i].c=(x+y)/<span class="number">2</span>;</span><br><span class="line">                    gg[i].b=(y-x)/<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>( t-- )&#123;</span><br><span class="line">        ll a, n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;a);</span><br><span class="line">        <span class="keyword">if</span>( n&gt;<span class="number">2</span> || n==<span class="number">0</span> )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1 -1\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( n==<span class="number">1</span> )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"1 %lld\n"</span>, a+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>( gg[a].b )&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, gg[a].b, gg[a].c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"-1 -1\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C/C++ </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT L2-019. 悄悄关注</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/STL/PAT%20L2-019%20%E6%82%84%E6%82%84%E5%85%B3%E6%B3%A8/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/STL/PAT%20L2-019%20%E6%82%84%E6%82%84%E5%85%B3%E6%B3%A8/</url>
      <content type="html"><![CDATA[<p>一道水题<br><a id="more"></a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>新浪微博上有个“悄悄关注”，一个用户悄悄关注的人，不出现在这个用户的关注列表上，但系统会推送其悄悄关注的人发表的微博给该用户。现在我们来做一回网络侦探，根据某人的关注列表和其对其他用户的点赞情况，扒出有可能被其悄悄关注的人。</p></blockquote><p><strong>输入格式：</strong></p><blockquote><p>输入首先在第一行给出某用户的关注列表，格式如下：</p></blockquote><blockquote><p>人数N 用户1 用户2 …… 用户N</p></blockquote><blockquote><p>其中N是不超过5000的正整数，每个“用户i”（i=1, …, N）是被其关注的用户的ID，是长度为4位的由数字和英文字母组成的字符串，各项间以空格分隔。</p></blockquote><blockquote><p>之后给出该用户点赞的信息：首先给出一个不超过10000的正整数M，随后M行，每行给出一个被其点赞的用户ID和对该用户的点赞次数（不超过1000），以空格分隔。注意：用户ID是一个用户的唯一身份标识。题目保证在关注列表中没有重复用户，在点赞信息中也没有重复用户。</p></blockquote><p><strong>输出格式：</strong></p><blockquote><p>我们认为被该用户点赞次数大于其点赞平均数、且不在其关注列表上的人，很可能是其悄悄关注的人。根据这个假设，请你按用户ID字母序的升序输出可能是其悄悄关注的人，每行1个ID。如果其实并没有这样的人，则输出“Bing Mei You”。</p></blockquote><p>输入样例1：  </p><blockquote><p>10 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao<br>8<br>Magi 50<br>Pota 30<br>LLao 3<br>Ammy 48<br>Dave 15<br>GAO3 31<br>Zoro 1<br>Cath 60</p></blockquote><p>输出样例1：  </p><blockquote><p>Ammy<br>Cath<br>Pota</p></blockquote><p>输入样例2：  </p><blockquote><p>11 GAO3 Magi Zha1 Sen1 Quan FaMK LSum Eins FatM LLao Pota<br>7<br>Magi 50<br>Pota 30<br>LLao 48<br>Ammy 3<br>Dave 15<br>GAO3 31<br>Zoro 29</p></blockquote><p>输出样例2：  </p><blockquote><p>Bing Mei You  </p></blockquote><p>题目比较简单，就是找出点赞数大于均值且名字不在关注列表里的人，排个序就好了。总结下：</p><ul><li><p>用set存储元素时自动升序排序。set存储字符串用string；</p></li><li><p>存储数组一般开大些，’\0’会占位。如存储4个字母数组不能只开char[4]。</p></li></ul><p>以下为代码:<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">int</span> num;</span><br><span class="line">&#125;zan;       <span class="comment">//点赞信息</span></span><br><span class="line"></span><br><span class="line">zan a[<span class="number">10010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; men;      <span class="comment">//存储关注列表</span></span><br><span class="line">  <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; se;       <span class="comment">//存储悄悄关注的人</span></span><br><span class="line">  <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator it;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++ )&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;s;</span><br><span class="line">    men.insert(s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m;</span><br><span class="line">  <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt;m;</span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++ )&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;a[i].name &gt;&gt;a[i].num;</span><br><span class="line">    sum += a[i].num;</span><br><span class="line">  &#125;</span><br><span class="line">  sum /= (m*<span class="number">1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//寻找符合条件的人</span></span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++ )&#123;</span><br><span class="line">    <span class="keyword">if</span>( a[i].num &gt; sum )&#123;</span><br><span class="line">      <span class="keyword">if</span>( men.count(a[i].name) == <span class="number">0</span> )&#123;</span><br><span class="line">        se.insert(a[i].name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//结果列表空则输出没有，有则遍历输出</span></span><br><span class="line">  <span class="keyword">if</span>( se.size() == <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Bing Mei You\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( it=se.begin(); it!=se.end(); it++ )&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt;*it &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hello</title>
      <link href="/uncategorized/hello/"/>
      <url>/uncategorized/hello/</url>
      <content type="html"><![CDATA[<h1 id="Hello"><a href="#Hello" class="headerlink" title="Hello"></a>Hello</h1><a id="more"></a><p>  嗯…花费了大概一天的时间才搭好这个基于Github+Hexo的博客，对于啥经验都没有的我来说，已经很满足了。参考了不少网上大佬的教程，遇到了很多百度也没有解答的问题(比如git bash不识别nodejs…)，但在完成后看到首页的瞬间还是很有成就感的。<br>为什么要建博客呢，原因无外乎那几种，但最主要的还是想有个属于自己的地方，存放一些文章，记录学习、生活的历程，起个日记本的作用。  </p><p>那么，就从今天开始吧。</p>]]></content>
      
      
    </entry>
    
  
  
</search>
